using System;
using System.Reflection;
using System.Xml.Linq;
using MixinXRef.Formatting;
using MixinXRef.Reflection;
using MixinXRef.UnitTests.TestDomain;
using NUnit.Framework;
using NUnit.Framework.SyntaxHelpers;
using Remotion.Mixins;

namespace MixinXRef.UnitTests
{
  [TestFixture]
  public class MemberReportGeneratorTest
  {
    private IOutputFormatter _outputFormatter;
    
    [SetUp]
    public void SetUp ()
    {
      _outputFormatter = new OutputFormatter();
    }

    [Test]
    public void GenerateXml_InterfaceWithZeroMembers ()
    {
      var reportGenerator = CreateMemberReportGenerator(typeof(IUseless));

      var output = reportGenerator.GenerateXml();
      var expectedOutput = new XElement ("Members");

      Assert.That (output.ToString(), Is.EqualTo (expectedOutput.ToString()));
    }

    [Test]
    public void GenerateXml_InterfaceWithMembers ()
    {
      var reportGenerator = CreateMemberReportGenerator(typeof(IDisposable));

      var output = reportGenerator.GenerateXml();
      var expectedOutput = new XElement (
          "Members",
          new XElement (
              "Member",
              new XAttribute ("type", MemberTypes.Method),
              new XAttribute ("name", "Dispose"),
              _outputFormatter.CreateModifierMarkup("", "public abstract"),
              _outputFormatter.CreateMethodMarkup("Dispose", typeof(void), new ParameterInfo[0])
              )
          );

      Assert.That (output.ToString(), Is.EqualTo (expectedOutput.ToString()));
    }

    [Test]
    public void GenerateXml_ObjectWithoutOwnMembers ()
    {
      var reportGenerator = CreateMemberReportGenerator(typeof(UselessObject));

      var output = reportGenerator.GenerateXml();

      // enhancement: surpress output of default constructor if generated by compiler
      var expectedOutput = new XElement (
          "Members",
          new XElement (
              "Member",
              new XAttribute ("type", MemberTypes.Constructor),
              new XAttribute ("name", ".ctor"),
              _outputFormatter.CreateModifierMarkup("", "public"),
              _outputFormatter.CreateConstructorMarkup("UselessObject", new ParameterInfo[0])
              )
          );

      Assert.That (output.ToString(), Is.EqualTo (expectedOutput.ToString()));
    }

    [Test]
    public void GenerateXml_PropertyWithoutGetAndSet_Overriden ()
    {
      var reportGenerator = CreateMemberReportGenerator(typeof(ClassWithProperty));

      var output = reportGenerator.GenerateXml();

      // MemberReportGenerator removes get_* and set_* functions of properties
      var expectedOutput = new XElement (
          "Members",
          new XElement(
              "Member",
              new XAttribute("type", MemberTypes.Method),
              new XAttribute("name", "DoSomething"),
             _outputFormatter.CreateModifierMarkup("", "public override"),
             _outputFormatter.CreateMethodMarkup("DoSomething", typeof(void), new ParameterInfo[0])
              ),
          new XElement (
              "Member",
              new XAttribute ("type", MemberTypes.Constructor),
              new XAttribute ("name", ".ctor"),
              _outputFormatter.CreateModifierMarkup("", "public"),
              _outputFormatter.CreateConstructorMarkup("ClassWithProperty", new ParameterInfo[0])
              ),
          new XElement (
              "Member",
              new XAttribute ("type", MemberTypes.Property),
              new XAttribute ("name", "PropertyName"),
              _outputFormatter.CreateModifierMarkup("", "public override"),
              _outputFormatter.CreatePropertyMarkup("PropertyName", typeof(string))
              )
          );

      Assert.That (output.ToString(), Is.EqualTo (expectedOutput.ToString()));
    }

    [Test]
    public void HasOverrideMixinAttribute_False ()
    {
      var reportGenerator = CreateMemberReportGenerator(typeof(object));
      var memberInfo = typeof (object).GetMember ("ToString")[0];
      var output = reportGenerator.HasOverrideMixinAttribute (memberInfo);

      Assert.That (output, Is.False);
    }

    [Test]
    public void HasOverrideMixinAttribute_True()
    {
      var type = typeof (MemberOverrideTestClass.Target);
      var mixinConfiguration =
          MixinConfiguration.BuildNew().ForClass<MemberOverrideTestClass.Target>().AddMixin<MemberOverrideTestClass.Mixin1>().BuildConfiguration();
      var targetClassDefinition = new ReflectedObject(TargetClassDefinitionUtility.GetConfiguration (type, mixinConfiguration));
      var reportGenerator = new MemberReportGenerator(type, null, targetClassDefinition, _outputFormatter);
      
      var memberInfo = type.GetMember("TemplateMethod")[0];
      var output = reportGenerator.HasOverrideMixinAttribute(memberInfo);

      Assert.That(output, Is.True);
    }


    private MemberReportGenerator CreateMemberReportGenerator(Type type)
    {
      return new MemberReportGenerator(type, null, null, _outputFormatter);
    }
  }
}