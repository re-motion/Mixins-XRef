using System;
using System.Reflection;
using System.Xml.Linq;
using MixinXRef.Formatting;
using MixinXRef.UnitTests.TestDomain;
using NUnit.Framework;
using NUnit.Framework.SyntaxHelpers;

namespace MixinXRef.UnitTests
{
  [TestFixture]
  public class MemberReportGeneratorTest
  {
    private IOutputFormatter _outputFormatter;
    
    [SetUp]
    public void SetUp ()
    {
      _outputFormatter = new OutputFormatter();
    }

    [Test]
    public void GenerateXml_InterfaceWithZeroMembers ()
    {
      var reportGenerator = new MemberReportGenerator(typeof(IUseless), null, _outputFormatter);

      var output = reportGenerator.GenerateXml();
      var expectedOutput = new XElement ("Members");

      Assert.That (output.ToString(), Is.EqualTo (expectedOutput.ToString()));
    }

    [Test]
    public void GenerateXml_InterfaceWithMembers ()
    {
      var reportGenerator = new MemberReportGenerator(typeof(IDisposable), null, _outputFormatter);

      var output = reportGenerator.GenerateXml();
      var expectedOutput = new XElement (
          "Members",
          new XElement (
              "Member",
              new XAttribute ("type", MemberTypes.Method),
              new XAttribute ("name", "Dispose"),
              _outputFormatter.CreateKeywordMarkup("public abstract"),
              _outputFormatter.CreateMethodMarkup("Dispose", typeof(void), new ParameterInfo[0])
              )
          );

      Assert.That (output.ToString(), Is.EqualTo (expectedOutput.ToString()));
    }

    [Test]
    public void GenerateXml_ObjectWithoutOwnMembers ()
    {
      var reportGenerator = new MemberReportGenerator(typeof(UselessObject), null, _outputFormatter);

      var output = reportGenerator.GenerateXml();

      // enhancement: surpress output of default constructor if generated by compiler
      var expectedOutput = new XElement (
          "Members",
          new XElement (
              "Member",
              new XAttribute ("type", MemberTypes.Constructor),
              new XAttribute ("name", ".ctor"),
              _outputFormatter.CreateKeywordMarkup("public"),
              _outputFormatter.CreateConstructorMarkup("UselessObject", new ParameterInfo[0])
              )
          );

      Assert.That (output.ToString(), Is.EqualTo (expectedOutput.ToString()));
    }

    [Test]
    public void GenerateXml_PropertyWithoutGetAndSet_Overriden ()
    {
      var reportGenerator = new MemberReportGenerator(typeof(ClassWithProperty), null, _outputFormatter);

      var output = reportGenerator.GenerateXml();

      // MemberReportGenerator removes get_* and set_* functions of properties
      var expectedOutput = new XElement (
          "Members",
          new XElement(
              "Member",
              new XAttribute("type", MemberTypes.Method),
              new XAttribute("name", "DoSomething"),
             _outputFormatter.CreateKeywordMarkup("public override"),
             _outputFormatter.CreateMethodMarkup("DoSomething", typeof(void), new ParameterInfo[0])
              ),
          new XElement (
              "Member",
              new XAttribute ("type", MemberTypes.Constructor),
              new XAttribute ("name", ".ctor"),
              _outputFormatter.CreateKeywordMarkup("public"),
              _outputFormatter.CreateConstructorMarkup("ClassWithProperty", new ParameterInfo[0])
              ),
          new XElement (
              "Member",
              new XAttribute ("type", MemberTypes.Property),
              new XAttribute ("name", "PropertyName"),
              _outputFormatter.CreateKeywordMarkup("public override"),
              _outputFormatter.CreatePropertyMarkup("PropertyName", typeof(string))
              )
          );

      Assert.That (output.ToString(), Is.EqualTo (expectedOutput.ToString()));
    }
  }
}