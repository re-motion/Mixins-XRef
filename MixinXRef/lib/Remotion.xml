<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Remotion</name>
    </assembly>
    <members>
        <member name="T:Remotion.Utilities.DefaultConsoleManager">
            <summary>
            Provides a default implementation of the <see cref="T:Remotion.Utilities.IConsoleManager"/> interface for the console represented by the <see cref="T:System.Console"/>
            class.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.IConsoleManager">
            <summary>
            Provides an API for manipulating the Console. This abstracts the <see cref="T:System.Console"/> class and thus enables unit testing of
            console-dependent code even when there is no console as well as use of multiple consoles at the same time.
            </summary>
        </member>
        <member name="P:Remotion.Utilities.IConsoleManager.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the console.
            </summary>
            <value>The console's foreground color.</value>
        </member>
        <member name="P:Remotion.Utilities.IConsoleManager.BackgroundColor">
            <summary>
            Gets or sets the background color of the console.
            </summary>
            <value>The console's background color.</value>
        </member>
        <member name="F:Remotion.Utilities.DefaultConsoleManager.Instance">
            <summary>
            The single instance of this class.
            </summary>
        </member>
        <member name="P:Remotion.Utilities.DefaultConsoleManager.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the console.
            </summary>
            <value>The console's foreground color. Returns <see cref="F:System.ConsoleColor.Gray"/> if there is no console attached to the current process.</value>
        </member>
        <member name="P:Remotion.Utilities.DefaultConsoleManager.BackgroundColor">
            <summary>
            Gets or sets the background color of the console.
            </summary>
            <value>The console's background color. Returns <see cref="F:System.ConsoleColor.Black"/> if there is no console attached to the current process.</value>
        </member>
        <member name="T:Remotion.Reflection.NonApplicationAssemblyAttribute">
            <summary>
            Causes an assembly to be ignored by <see cref="T:Remotion.Reflection.ApplicationAssemblyFinderFilter"/> (which is used by the configuration loaders
            in Remotion.Data.DomainObjects and Remotion.Mixins).
            </summary>
        </member>
        <member name="T:Remotion.Collections.NullCache`2">
            <summary>
            This class implements a cache that does not actually cache anything.
            </summary>
            <remarks>
            Use NullCache objects if some code expects an <see cref="T:Remotion.Collections.ICache`2"/> interface, but you don't actually want to use caching.
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.Utilities.MixinReflector.GetClassContextFromConcreteType(System.Type)">
            <summary>
            Returns the <see cref="T:Remotion.Mixins.Context.ClassContext"/> that was used as the mixin configuration when the given concrete mixed <paramref name="type"/>
            was created by the <see cref="T:Remotion.Mixins.TypeFactory"/>.
            </summary>
            <param name="type">The type whose mixin configuration is to be retrieved.</param>
            <returns>The <see cref="T:Remotion.Mixins.Context.ClassContext"/> used when the given concrete mixed <paramref name="type"/> was created, or <see langword="null"/>
            if <paramref name="type"/> is no mixed type.</returns>
        </member>
        <member name="M:Remotion.Mixins.Utilities.MixinReflector.GetMixinConfiguration(System.Object,System.Object)">
            <summary>
            Returns the <see cref="T:Remotion.Mixins.Definitions.MixinDefinition"/> that was used as the mixin configuration for a specific mixin when its target object was created.
            </summary>
            <param name="mixin">The mixin whose configuration should be returned.</param>
            <param name="mixedInstance">The instance containing <paramref name="mixin"/>.</param>
            <returns>The <see cref="T:Remotion.Mixins.Definitions.MixinDefinition"/> object corresponding to the <paramref name="mixin"/>.</returns>
        </member>
        <member name="T:Remotion.Globalization.ResourceManagerResolver`1">
            <summary>
            Provides a generalized implementation of the algorithms used to translate resource attributes into <see cref="T:Remotion.Globalization.IResourceManager"/> instances.
            </summary>
            <typeparam name="TAttribute">The type of the resource attribute to be resolved by this class.</typeparam>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerResolver`1.GetResourceManager(System.Type,System.Boolean)">
            <summary>
              Returns an instance of <c>IResourceManager</c> for the resource container specified
              in the class declaration of the type.
            </summary>
            <remarks>
        ResourceManagerWrappers are cached after their first initalization.
      </remarks><returns>
        The <c>ResourceManagerWrapper</c> containing the type's resource containers.
      </returns>
            <param name="objectType">
      The type for which the resource manager is wanted.
    </param><param name="includeHierarchy">
      Include the resource managers for the base types.
    </param>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerResolver`1.GetResourceManager(System.Type,System.Boolean,System.Type@)">
            <summary>
              Returns a <c>IResourceManager</c> set for the resource containers specified
              in the class declaration of the type.
            </summary>
            <remarks>
        ResourceManagerWrappers are cached after their first initalization.
      </remarks><returns>
        The <c>ResourceManagerWrapper</c> containing the type's resource containers.
      </returns>
            <param name="objectType">
      The type for which the resource manager is wanted.
    </param><param name="includeHierarchy">
      Include the resource managers for the base types.
    </param><param name="definingType">
      The base type where the <c>MultiLingualResourcesAttribute</c> was defined.
    </param>
        </member>
        <member name="M:Remotion.Logging.BridgeImplementations.LogManagerImplementation.GetLogger(System.String)">
            <summary>
            Gets or creates a logger.
            </summary>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>A logger for the <paramref name="name"/> specified.</returns>
        </member>
        <member name="M:Remotion.Logging.BridgeImplementations.LogManagerImplementation.GetLogger(System.Type)">
            <summary>
            Gets or creates a logger.
            </summary>
            <param name="type">The full name of <paramref name="type"/> will be used as the name of the logger to retrieve.</param>
            <returns>A logger for the fully qualified name of the <paramref name="type"/> specified.</returns>
        </member>
        <member name="M:Remotion.Logging.BridgeImplementations.LogManagerImplementation.Initialize">
            <summary>
            Initializes the current logging framework.
            </summary>
        </member>
        <member name="M:Remotion.Logging.BridgeImplementations.LogManagerImplementation.InitializeConsole">
            <summary>
            Initializes the current logging framework to log to the console.
            </summary>
        </member>
        <member name="T:Remotion.Collections.InterlockedDataStore`2">
            <summary>
            Provides a synchronization wrapper around an implementation of <see cref="T:Remotion.Collections.IDataStore`2"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <remarks>
            Instances of this object delegate every method call to an inner <see cref="T:Remotion.Collections.IDataStore`2"/> implementation,
            locking on a private synchronization object while the method is executed. This provides a convenient way to make an 
            <see cref="T:Remotion.Collections.IDataStore`2"/> thread-safe, as long as the store is only executed through this wrapper.
            </remarks>
        </member>
        <member name="M:Remotion.Collections.InterlockedDataStore`2.#ctor(Remotion.Collections.IDataStore{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Collections.InterlockedDataStore`2"/> class.
            </summary>
            <param name="innerStore">The inner store which is wrapped.</param>
        </member>
        <member name="M:Remotion.Collections.InterlockedDataStore`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Collections.InterlockedDataStore`2"/> class wrapping a 
            <see cref="T:Remotion.Collections.SimpleDataStore`2"/>.
            </summary>
        </member>
        <member name="M:Remotion.Collections.InterlockedDataStore`2.ContainsKey(`0)">
            <summary>
            Determines whether the store contains an element with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>
            true if the store contains the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Collections.InterlockedDataStore`2.Add(`0,`1)">
            <summary>
            Adds a new element to the store.
            </summary>
            <param name="key">The key of the new element.</param>
            <param name="value">The value of the new element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">An item with an equal key already exists in the store.</exception>
        </member>
        <member name="M:Remotion.Collections.InterlockedDataStore`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the store, if any.
            </summary>
            <param name="key">The key of the element to be removed.</param>
            <returns>
            true if the item was found in the store; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Collections.InterlockedDataStore`2.Clear">
            <summary>
            Removes all elements from the store.
            </summary>
        </member>
        <member name="M:Remotion.Collections.InterlockedDataStore`2.GetValueOrDefault(`0)">
            <summary>
            Gets the value of the element with the specified key, or <typeparamref name="TValue"/>'s default value if no such element exists.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>
            The value of the element, or the default value if no such element exists.
            </returns>
        </member>
        <member name="M:Remotion.Collections.InterlockedDataStore`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value of the element with the specified key.
            </summary>
            <param name="key">The key to look up.</param>
            <param name="value">The value of the element with the specified key, or <typeparamref name="TValue"/>'s default value if no such element
            exists.</param>
            <returns>
            true if an element with the specified key was found; otherwise, false.
            </returns>
        </member>
        <member name="M:Remotion.Collections.InterlockedDataStore`2.GetOrCreateValue(`0,System.Func{`0,`1})">
            <summary>
            Gets the value of the element with the specified key, creating a new one if none exists.
            </summary>
            <param name="key">The key of the element to be retrieved.</param>
            <param name="creator">A delegate used for creating a new element if none exists.</param>
            <returns>
            The value of the element that was found or created.
            </returns>
        </member>
        <member name="P:Remotion.Collections.InterlockedDataStore`2.Item(`0)">
            <summary>
            Gets or sets the <typeparamref name="TValue"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:Remotion.Reflection.ConstructorLookupInfo.CreateValueTypeDefaultDelegate(System.Type,System.Type)">
            <summary>
            Since value types do not have default constructors, an activation with zero parameters must create the object with the initobj IL opcode.
            </summary>
        </member>
        <member name="T:Remotion.Mixins.Utilities.CodeGenerationStatistics">
            <summary>
            Provides statistical information about the resources used by the mixin code generation engine.
            </summary>
        </member>
        <member name="T:Remotion.Mixins.CodeGeneration.ConcreteMixinType">
            <summary>
            Holds the results of mixin code generation when a concrete mixin type was generated.
            </summary>
            <remarks>
            A concrete mixin type is a type derived from a mixin type that implements <see cref="T:Remotion.Mixins.OverrideMixinAttribute">mixin overrides</see> and holds
            public wrappers for protected methods needed to be accessed from the outside.
            </remarks>
        </member>
        <member name="T:Remotion.Mixins.CodeGeneration.IConcreteTypeMetadataImporter">
            <summary>
            Assists in importing pre-generated concrete mixed and mixin types by analyzing the types and returning the respective metadata they were
            generated for.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.OuterProductProcessorBase">
            <summary>
            Convenience class to derive OuterProductIndexGenerator-processors from. Already supplies ProcessingState-functionality,
            just requiring override implementation of <see cref="M:Remotion.Diagnostics.OuterProductProcessorBase.DoBeforeLoop"/> and <see cref="M:Remotion.Diagnostics.OuterProductProcessorBase.DoAfterLoop"/>.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.IOuterProductProcessor">
            <summary>
            Interface to a class which can be passed to <see cref="M:Remotion.Diagnostics.OuterProductIndexGenerator.ProcessOuterProduct(Remotion.Diagnostics.IOuterProductProcessor)"/>.
            <see cref="M:Remotion.Diagnostics.OuterProductIndexGenerator.ProcessOuterProduct(Remotion.Diagnostics.IOuterProductProcessor)"/> will then call its methods <see cref="M:Remotion.Diagnostics.IOuterProductProcessor.DoBeforeLoop"/>
            and <see cref="M:Remotion.Diagnostics.IOuterProductProcessor.DoAfterLoop"/> before and after it starts iterating over a new outer product dimension.
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.IOuterProductProcessor.DoBeforeLoop">
            <summary>
            Processor callback invoked before a nested for loop starts.
            </summary>
            <returns><c>true</c> to continue looping, <c>false</c> to break from the current loop.</returns>
        </member>
        <member name="M:Remotion.Diagnostics.IOuterProductProcessor.DoAfterLoop">
            <summary>
            Processor callback invoked after a nested for loop has finished.
            </summary>
            <returns><c>true</c> to continue looping, <c>false</c> to break from the current loop.</returns>
        </member>
        <member name="M:Remotion.Diagnostics.IOuterProductProcessor.SetProcessingState(Remotion.Diagnostics.OuterProductProcessingState)">
            <summary>
            Before each callback to the processor the OuterProductIndexGenerator class sets the current <see cref="T:Remotion.Diagnostics.OuterProductProcessingState"/> through a
            call to this method. The processor class is expected to store the <see cref="T:Remotion.Diagnostics.OuterProductProcessingState"/> to be able to access
            it during the callbacks.
            </summary>
            <param name="processingState"></param>
        </member>
        <member name="P:Remotion.Diagnostics.IOuterProductProcessor.ProcessingState">
            <summary>
            The current <see cref="T:Remotion.Diagnostics.OuterProductProcessingState"/> to be used during callbacks. Set by the OuterProductIndexGenerator class
            in call to <see cref="M:Remotion.Diagnostics.IOuterProductProcessor.SetProcessingState(Remotion.Diagnostics.OuterProductProcessingState)"/>.
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.OuterProductProcessorBase.DoBeforeLoop">
            <summary>
            Default implementation for the callback before a new for loop starts. Simply keeps on looping.
            Override to implement your own functionality.
            </summary>
            <returns><see cref="M:Remotion.Diagnostics.IOuterProductProcessor.DoBeforeLoop"/></returns>
        </member>
        <member name="M:Remotion.Diagnostics.OuterProductProcessorBase.DoAfterLoop">
            <summary>
            Default implementation for the callback after a for loop finishes. Simply keeps on looping.
            Override to implement your own functionality.
            </summary>
            <returns><see cref="M:Remotion.Diagnostics.IOuterProductProcessor.DoAfterLoop"/></returns>
        </member>
        <member name="M:Remotion.Diagnostics.OuterProductProcessorBase.SetProcessingState(Remotion.Diagnostics.OuterProductProcessingState)">
            <summary>
            Internal use only: Used by OuterProductIndexGenerator class to set the current <see cref="P:Remotion.Diagnostics.OuterProductProcessorBase.ProcessingState"/> before invoking a callback.
            </summary>
            <param name="processingState"></param>
        </member>
        <member name="P:Remotion.Diagnostics.OuterProductProcessorBase.ProcessingState">
            <summary>
            The current <see cref="P:Remotion.Diagnostics.OuterProductProcessorBase.ProcessingState"/> to be used during callbacks.
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteTheFollowingIfComplexityLevelIsGreaterThanOrEqualTo(Remotion.Diagnostics.ToText.Infrastructure.ToTextBuilderBase.ToTextBuilderOutputComplexityLevel)">
            <summary>
            Write the following if the output complexity level is to the passed <see cref="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextBuilderBase.ToTextBuilderOutputComplexityLevel"/>.
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.SetOutputComplexityToDisable">
            <summary>
            <para>Set the output complexity level to "disable", effectively disabling the <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.SetOutputComplexityToSkeleton">
            <summary>
            <para>Set the output complexity level to "skeleton", the lowest complexity level where output is still produced.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.SetOutputComplexityToBasic">
            <summary>
            <para>Set the output complexity level to "basic".</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.SetOutputComplexityToMedium">
            <summary>
            <para>Set the output complexity level to "medium".</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.SetOutputComplexityToComplex">
            <summary>
            <para>Set the output complexity level to "complex".</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.SetOutputComplexityToFull">
            <summary>
            <para>Set the output complexity level to "full".</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.Flush">
            <summary>
            <para>Flushes the underlying stream writer.</para> 
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteRawElementBegin">
            <summary>
            <para>Starts raw element writing. Until <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteRawElementEnd"/> is called, calls which write directly to the underlying
            stream writer (e.g. <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteRawString(System.String)"/>, <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteRawChar(System.Char)"/>) are permitted.</para> 
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteRawElementEnd">
            <summary>
            <para>Ends raw element writing started with a call to <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteRawElementBegin"/>.</para> 
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteNewLine(System.Int32)">
            <summary>
            <para>Writes the number of newline-tokens passed as an argument.</para>
            <para>Shorthand notation: <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.nl(System.Int32)"/></para>
            </summary>
            <remarks>
            <para>Note that for e.g. a <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/>
            writing an XML stream a newline will be expressed as an XML-tag, not as carriage return/linefeed characters.</para>
            </remarks>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.nl(System.Int32)">
            <summary>
            <para>Writes the passed number of newline-tokens. Shorthand notation for <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteNewLine(System.Int32)"/></para>
            </summary>   
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteNewLine">
            <summary>
            <para>Writes one newline-token. Equivalent to <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteNewLine(System.Int32)"/> with an argument of 1.</para> 
            <para>Shorthand notation: <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.nl"/></para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.nl">
            <summary>
            <para>Writes one newline-token. Shorthand notation for <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteNewLine"/></para>
            </summary>   
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteRawString(System.String)">
            <summary>
            <para>Writes the given string directly to the output stream. The string is written directly to the output stream, 
            without considering sequences etc. A raw scope must be open for this call to be valid (see <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteRawElementBegin"/>).</para>
            <para>Shorthand notation: <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.s(System.String)"/></para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.s(System.String)">
            <summary>
            <para>Writes the given string directly to the output stream. Shorthand notation for <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteRawString(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteRawStringEscaped(System.String)">
            <summary>
            <para>Writes the given string directly to the output stream, replacing newline, tabulator, etc characters with an escaped representation.
            The string is written directly to the output stream, 
            without considering sequences etc. A raw scope must be open for this call to be valid (see <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteRawElementBegin"/>).</para>
            <para>Shorthand notation: <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.sEsc(System.String)"/></para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.sEsc(System.String)">
            <summary>
            <para>Writes the given string directly to the output stream, replacing newline, tabulator, etc characters with 
            an escaped representation. Shorthand notation for <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteRawStringEscaped(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteRawChar(System.Char)">
            <summary>
            <para>Writes the given character directly to the output stream. The string is written directly to the output stream, 
            without considering sequences etc. A raw scope must be open for this call to be valid (see <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteRawElementBegin"/>).</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteRaw(System.Object)">
            <summary>
            <para>Writes the object argument directly to the underlying stream. A raw scope must be open for this call to be valid (see <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteRawElementBegin"/>).</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteSequenceLiteralBegin(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Begins a sequence with a given name, literal set of sequence-begin/end and element-prefix/postifx and -seperarator strings.</para>
            <para>Shorthand notation: <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.sbLiteral(System.String,System.String,System.String,System.String,System.String)"/>.</para>
            </summary>
            <remarks><para>
            Note that not all classes implementing <see cref="T:Remotion.Diagnostics.ToText.IToTextBuilder"/> are required to support this method.
            Use semantic sequence-begin-calls (e.g. <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteSequenceBegin"/>, <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteInstanceBegin(System.Type,System.String)"/>, <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteSequenceArrayBegin"/>)
            to be compatible with all <see cref="T:Remotion.Diagnostics.ToText.IToTextBuilder"/> implementations.
            </para>
            </remarks>remarks&gt;
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.sbLiteral(System.String,System.String)">
            <summary>
            <para>Begins a sequence with a given literal pair of sequence-begin and -end strings.
            See <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteSequenceLiteralBegin(System.String,System.String,System.String,System.String,System.String,System.String)"/>.
            </para>
            <para>Shorthand notation: <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.sbLiteral(System.String,System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.sbLiteral(System.String,System.String,System.String)">
            <summary>
            <para>Begins a sequence with a given literal pair of sequence-begin and -end strings, together with an element separator.
            See <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteSequenceLiteralBegin(System.String,System.String,System.String,System.String,System.String,System.String)"/>.
            </para>
            <para>Shorthand notation: <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.sbLiteral(System.String,System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.sbLiteral(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Begins a sequence with a given literal pair of sequence-begin and -end strings, together with an element separator.
            See <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteSequenceLiteralBegin(System.String,System.String,System.String,System.String,System.String,System.String)"/>.
            </para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteSequenceBegin">
            <summary>
            <para>Begins a new sequence, i.e. a number of consecutive elements bracketed by the sequence 
            which are automatically output in a seperated manner. </para>
            <para>Shorthand notation: <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.sb"/>.</para>
            </summary>
            <remarks><para>
            The way the sequence begin and end and the sequence elements are output and 
            separated is decided by the <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/>.</para>
            <para>Sequences can be nested: Each new sequence pushed the current sequence (if any) onto a sequence stack; ending the sequence with a call to <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteSequenceEnd"/>
            pops the previous sequence from the stack making it active again.</para>
            <para>Within a sequence elements in the sequence can be emitted using calls to the WriteElement family of members
            (<see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteElement(System.Object)"/>, <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteElement(System.String,System.Object)"/>, <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteElement``1(System.Linq.Expressions.Expression{System.Func{``0}})"/>).
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.sb">
            <summary>
            <para>Begins a new sequence. Shorthand notation for <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteSequenceBegin"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteElement(System.Object)">
            <summary>
            <para>Applies <see cref="N:Remotion.Diagnostics.ToText"/> to the passed argument and emits the result through the <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/>.</para>
            <para>Shorthand notation: <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.e(System.Object)"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteElement(System.String,System.Object)">
            <summary>
            <para>Applies <see cref="N:Remotion.Diagnostics.ToText"/> to the passed argument and emits the result through the <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/> as a name-value-pair.</para>
            <para>Shorthand notation: <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.e(System.String,System.Object)"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteElement``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            <para>Applies <see cref="N:Remotion.Diagnostics.ToText"/> to the passed variable and emits the result through the <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/>
            as a name-value-pair. Usage: <c>ttb.e(() =&gt; myVar);</c>.
            </para>
            <para>Shorthand notation: <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.e``1(System.Linq.Expressions.Expression{System.Func{``0}})"/>.</para>
            </summary>
            <remarks><para>
            Since the variable to write is passed in a lambda expression the name and value can be 
            deduced from just one term, eliminating name-value-mismatch-errors.</para>
            <example><code>
            var myList = List.New(5,3,1);
            toTextBuilder.e(() =&gt; myList);
            var result = toTextBuilder.ToString(); // returns: myList={5,3,1}
            </code></example>
            </remarks>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.e(System.Object)">
            <summary>
            <para>Applies <see cref="N:Remotion.Diagnostics.ToText"/> to the passed argument and emits the result through the <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/>.</para>
            <para>Shorthand notation for <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteElement(System.Object)"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.e``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            <para>Applies <see cref="N:Remotion.Diagnostics.ToText"/> to the passed argument and emits the result through the <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/> as a name-value-pair.</para>
            <para>Shorthand notation for <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteElement``1(System.Linq.Expressions.Expression{System.Func{``0}})"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.e(System.String,System.Object)">
            <summary>
            <para>Applies <see cref="N:Remotion.Diagnostics.ToText"/> to the passed argument and emits the result through the <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/> as a name-value-pair.</para>
            <para>Shorthand notation for <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteElement(System.String,System.Object)"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.eIfNotNull(System.String,System.Object)">
            <summary>
            <para>Writes element using <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.e(System.String,System.Object)"/> if the passed Object is not null.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.eIfNotNull(System.Object)">
            <summary>
            <para>Writes element using <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.e(System.Object)"/> if the passed Object is not null.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.eIfNotEqualTo(System.String,System.Object,System.Object)">
            <summary>
            <para>Writes element using <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.e(System.String,System.Object)"/> if the passed Object is not null.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteSequenceEnd">
            <summary>
            <para>Closes a sequence, activating the previously active sequence.</para>
            <para>Shorthand notation: <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.se"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.se">
            <summary>
            <para>Closes a sequence.</para>
            <para>Shorthand notation for <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteSequenceEnd"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteSequenceElements(System.Object[])">
            <summary>
            <para>Writes the passed parameters out as sequence elements.</para>
            <para>Shorthand notation: <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.elements(System.Object[])"/>.</para>
            </summary>
            <remarks>
            <example><code>
            toTextBuilder.sb().WriteSequenceElements(x0,x1,x2,x3,x4).se(); 
            // Is equivalent to:
            toTextBuilder.sb().WriteElement(x0).WriteElement(x1).WriteElement(x2).WriteElement(x3).WriteElement(x4).se();
            </code></example>
            </remarks>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.elements(System.Object[])">
            <summary>
            <para>Writes the passed parameters out as sequence elements.</para>
            <para>Shorthand notation for <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteSequenceElements(System.Object[])"/>.</para>
            </summary>
            <remarks>
            <example><code>
            toTextBuilder.sb().elements(x0,x1,x2,x3,x4).se(); 
            // Is equivalent to:
            toTextBuilder.sb().e(x0).e(x1).e(x2).e(x3).e(x4).se();
            </code></example>
            </remarks>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.elementsNumbered(System.String,System.Int32,System.Int32)">
            <summary>
            <para>Writes out as sequence elements of the form <c>s+i0,s+i0+1,...,s+i1</c>.</para>
            </summary>
            <remarks>
            <example><code>
            toTextBuilder.sbLiteral ("", "|", ">", "", "").elementsNumbered ("a", 1, 5).se();
            var result = toTextBuilder.ToString(); // returns: |a1>|a2>|a3>|a4>|a5>
            </code></example>
            </remarks>    
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteSequence(System.Object[])">
            <summary>
            <para>Writes the passed parameters out as a standard sequence.</para>
            <para>Shorthand notation: <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.sequence(System.Object[])"/>.</para>
            </summary>
            <remarks>
            <example><code>
            toTextBuilder.sequence(x0,x1,x2,x3,x4); 
            // Is equivalent to:
            toTextBuilder.sb().e(x0).e(x1).e(x2).e(x3).e(x4).se();
            </code></example>
            </remarks>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.sequence(System.Object[])">
            <summary>
            <para>Writes the passed parameters out as a standard sequence.</para>
            <para>Shorthand notation for <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteSequence(System.Object[])"/>.</para>
            </summary>
            <remarks>
            <example><code>
            toTextBuilder.sequence(x0,x1,x2,x3,x4); 
            // Is equivalent to:
            toTextBuilder.sb().e(x0).e(x1).e(x2).e(x3).e(x4).se();
            </code></example>
            </remarks>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteInstanceBegin(System.Type,System.String)">
            <summary>
            <para>Begins a new sequence for writing an instance of the passed Type.</para>
            <para>Shorthand notation: <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.ib(System.Type)"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.ib(System.Type)">
            <summary>
            <para>Begins a new sequence for writing an instance of the passed Type.</para>
            <para>Shorthand notation for <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteInstanceBegin(System.Type,System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.ib``1">
            <summary>
            <para>Begins a new sequence for writing an instance of the Type of the generic argument.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.ib``1(System.String)">
            <summary>
            <para>Begins a new sequence for writing an instance of the Type of the generic argument, using
            the passed shortTypeName in the output.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.ie">
            <summary>
            <para>Closes an instance sequence.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteSequenceArrayBegin">
            <summary>
            <para>Begins a new sequence for writing out the elements of an array. Note that arrays are handled automatically 
            by the <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteElement(System.Object)"/>, etc methods, so normally there is no need to call this method explicitely.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteArray(System.Array)">
            <summary>
            <para>Writes out the passed array. Note that arrays are also handled automatically by <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteElement(System.Object)"/> so
            normally there is no need to call this method explicitely.</para>
            <para>Shorthand notation: <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.array(System.Array)"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.array(System.Array)">
            <summary>
            <para>Writes out the passed array.</para>
            <para>Shorthand notation for <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteArray(System.Array)"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteEnumerable(System.Collections.IEnumerable)">
            <summary>
            <para>Writes out the passed enumerable. Note that enumerables are handled automatically 
            by <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteElement(System.Object)"/>-methods, so normally there is no need to call this method explicitely.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.enumerable(System.Collections.IEnumerable)">
            <summary>
            <para>Writes out the passed enumerable.</para>
            <para>Shorthand notation for <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteEnumerable(System.Collections.IEnumerable)"/>.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteDictionary(System.Collections.IDictionary)">
            <summary>
            <para>Writes out the passed dictionary. Note that dictionaries are handled automatically 
            by <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteElement(System.Object)"/>-methods, so normally there is no need to call this method explicitely.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.IToTextBuilder.dictionary(System.Collections.IDictionary)">
            <summary>
            <para>Writes out the passed dictionary.</para>
            <para>Shorthand notation for <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteDictionary(System.Collections.IDictionary)"/>.</para>
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.ToText.IToTextBuilder.AllowNewline">
            <summary>
            <para>Get/set whether the TextBuilder allows explicit emission of newlines (see <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteNewLine"/>, <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteNewLine(System.Int32)"/>).</para>
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.ToText.IToTextBuilder.Enabled">
            <summary>
            <para>Get/set whether the TextBuilder writes to his underlying stream.</para>
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.ToText.IToTextBuilder.IsInSequence">
            <summary>
            <para>Get whether the TextBuilder is currently in a sequence; see <see cref="M:Remotion.Diagnostics.ToText.IToTextBuilder.WriteSequenceBegin"/></para>
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.ToText.IToTextBuilder.ToTextProvider">
            <summary>
            The <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/> used by the <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/>.
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.ToText.IToTextBuilder.OutputComplexity">
            <summary>
            <para>Get The TextBuilder's current output complexity level. The output complexity level can be used by type/interface handlers
            to tailor the created output for different compactness needs of the user.</para>
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.ToText.IToTextBuilder.writeIfSkeletonOrHigher">
            <summary>
            Write the following if the output complexity level is set to "skeleton" or higher.
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.ToText.IToTextBuilder.writeIfBasicOrHigher">
            <summary>
            Write the following if the output complexity level is set to "basic" or higher.
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.ToText.IToTextBuilder.writeIfMediumOrHigher">
            <summary>
            Write the following if the output complexity level is set to "medium" or higher.
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.ToText.IToTextBuilder.writeIfComplexOrHigher">
            <summary>
            Write the following if the output complexity level is set to "complex" or higher.
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.ToText.IToTextBuilder.writeIfFull">
            <summary>
            Write the following if the output complexity level is set to "full" or higher.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.ConsoleApplication.ConsoleApplicationSettings">
            <summary>
            Supplies command line arguments for <see cref="T:Remotion.Utilities.ConsoleApplication.ConsoleApplication`2"/>|s:
            <para>/? ... output usage information</para>
            <para>/wait+ ... wait for a keypress at the end of program execution</para>
            </summary>
        </member>
        <member name="T:Remotion.Text.MonospaceTextFormat">
            <summary>
            Utility functions for formatting text with fixed character widths.
            </summary>
        </member>
        <member name="M:Remotion.Text.MonospaceTextFormat.AppendWrappedText(System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Formats the specified text with word breaks within the specified line width.
            </summary>
            <param name="sb">The StringBuilder object the text is written to.</param>
            <param name="lineWidth">The line width of the output.</param>
            <param name="text">The text that is to be formatted.</param>
        </member>
        <member name="M:Remotion.Text.MonospaceTextFormat.AppendIndentedText(System.Text.StringBuilder,System.Int32,System.Int32,System.String)">
            <summary>
            Formats the specified text with word breaks within the specified line width. All lines but the first are indented.
            </summary>
            <param name="sb">The StringBuilder object the text is written to.</param>
            <param name="indent">The number of characters already contained in the current line, which is also the number of spaces
            that preceed each following line.</param>
            <param name="lineWidth">The line width of the output.</param>
            <param name="text">The text that is to be formatted.</param>
        </member>
        <member name="M:Remotion.Text.MonospaceTextFormat.SplitTextOnSeparator(System.String,System.String@,System.String@,System.Int32,System.Char[])">
            <summary>
            Splits a string on the last separator character before the specified split position.
            </summary>
            <param name="text">Input string.</param>
            <param name="beforeSplit">Returns the part of the string before the split.</param>
            <param name="afterSplit">Returns the part of the string after the split, or a null reference if the complete string was returned in <c>beforeSplit</c>.</param>
            <param name="splitAt">Specifies the position to split at. No more than <c>splitAt</c> characters will be returned in <c>beforeSplit</c>.</param>
            <param name="separators">Valid separator characters.</param>
        </member>
        <member name="T:Remotion.Text.CommandLine.CommandLineArgument">
            <summary>
            The base class for command line argument definitions
            </summary>
        </member>
        <member name="M:Remotion.Text.CommandLine.CommandLineArgument.#ctor(System.Boolean)">
            <summary>
            Creates a positional command line argument.
            </summary>
        </member>
        <member name="M:Remotion.Text.CommandLine.CommandLineArgument.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a named command line argument.
            </summary>
        </member>
        <member name="T:Remotion.Mixins.Globalization.MixedMultiLingualResources">
            <summary>
            Provides a variant of <see cref="T:Remotion.Globalization.MultiLingualResources"/> that can be used to have mixins add resource identifiers to a target
            class. With this class, attributes are not only retrieved from the class and its base classes, but also from its mixins.
            </summary>
            <remarks>
            The methods of this class do not have overloads taking object - getting and checking resources is always done via the type.
            The reason for this is as follows: If an instance was specified, its type would have to be used. Now, if the instance was not created 
            by the <see cref="T:Remotion.Mixins.ObjectFactory"/>, we would have to either:
            <list type="bullet">
              <item>Fall back to <see cref="T:Remotion.Globalization.MultiLingualResources"/>, because the "new-ed" object doesn't have any mixins, so the type-based resource 
              lookup shouldn't use the mixins either; or </item>
              <item>Be consistent with ExistsResource (obj.GetType()), ie. considering the mixins as well.</item>
            </list>
            Both possibilities have a certain inconsistency, and none is perfect, so the class leaves it to the user to decide.
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.Globalization.MixedMultiLingualResources.GetResourceManager(System.Type,System.Boolean)">
            <summary>
              Returns an instance of <see cref="T:Remotion.Globalization.IResourceManager"/> for the resource container specified in the class declaration of the type.
            </summary>
            <param name="objectType">The type to return an <see cref="T:Remotion.Globalization.IResourceManager"/> for.</param>
            <param name="includeHierarchy">If set to true, <see cref="T:Remotion.Globalization.MultiLingualResourcesAttribute"/> applied to base classes and mixins will be
            included in the resource manager; otherwise, only the <paramref name="objectType"/> is searched for such attributes.</param>
            <returns>An instance of <see cref="T:Remotion.Globalization.IResourceManager"/> for <paramref name="objectType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Globalization.MixedMultiLingualResources.GetResourceManager(System.Type)">
            <summary>
              Returns an instance of <see cref="T:Remotion.Globalization.IResourceManager"/> for the resource container specified in the class declaration of the type
              that does not include resource managers for base classes and mixins.
            </summary>
            <param name="objectType">The type to return an <see cref="T:Remotion.Globalization.IResourceManager"/> for.</param>
            <returns>An instance of <see cref="T:Remotion.Globalization.IResourceManager"/> for <paramref name="objectType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Globalization.MixedMultiLingualResources.GetResourceText(System.Type,System.String)">
            <summary>
              Loads a string resource for the specified type, identified by ID.
            </summary>
            <param name="objectTypeToGetResourceFor">
              The <see cref="T:System.Type"/> for which to get the resource.
            </param>
            <param name="name"> The ID of the resource. </param>
            <returns> The found string resource or an empty string. </returns>
        </member>
        <member name="M:Remotion.Mixins.Globalization.MixedMultiLingualResources.ExistsResourceText(System.Type,System.String)">
            <summary>
              Checks for the existence of a string resource for the specified type, identified by ID.
            </summary>
            <param name="objectTypeToGetResourceFor">
              The <see cref="T:System.Type"/> for which to check the resource.
            </param>
            <param name="name"> The ID of the resource. </param>
            <returns> <see langword="true"/> if the resource can be found. </returns>
        </member>
        <member name="M:Remotion.Mixins.Globalization.MixedMultiLingualResources.ExistsResource(System.Type)">
            <summary>
              Checks for the existence of a resource set for the specified type.
            </summary>
            <param name="objectTypeToGetResourceFor">
              The <see cref="T:System.Type"/> for which to check for the resource set.
            </param>
            <returns> <see langword="true"/> if the resource set can be found. </returns>
        </member>
        <member name="P:Remotion.Mixins.Globalization.MixedMultiLingualResources.Resolver">
            <summary>
            Gets the resolver object used by the methods of this class.
            </summary>
            <value>The resolver object used by <see cref="T:Remotion.Globalization.MultiLingualResources"/>.</value>
        </member>
        <member name="T:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder">
            <summary>
            Provides a way to build concrete types for target and mixin classes in mixin configurations and maintains a cache for built types.
            </summary>
            <remarks>
            <para>
            You can use different instances of <see cref="T:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder"/> by setting them as the
            <see cref="P:Remotion.Mixins.Utilities.Singleton.ThreadSafeSingletonBase`2.Current"/> property via <see cref="M:Remotion.Mixins.Utilities.Singleton.ThreadSafeSingletonBase`2.SetCurrent(`0)"/>.
            Each of these will have its own instance of <see cref="T:Remotion.Mixins.CodeGeneration.IModuleManager"/> as its <see cref="P:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.Scope"/>, and each scope will have its own
            dynamic assembly for code generation. However, each scope's assembly will have the same default name. 
            </para>
            <para>
            Having different assemblies with the same names loaded into one AppDomain can lead to sporadic
            <see cref="T:System.TypeLoadException">TypeLoadExceptions</see> in reflective scenarios. To avoid running into such errors, set the 
            <see cref="P:Remotion.Mixins.CodeGeneration.IModuleManager.SignedAssemblyName"/> and <see cref="P:Remotion.Mixins.CodeGeneration.IModuleManager.UnsignedAssemblyName"/> properties of the
            <see cref="P:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.Scope"/> to unique names for each <see cref="T:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder"/> instance you use.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.LockAndAccessScope(System.Action{Remotion.Mixins.CodeGeneration.IModuleManager})">
            <summary>
            Provides thread-safe access to the module scope of <see cref="T:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder"/>, see also <see cref="P:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.Scope"/>.
            </summary>
            <param name="scopeAccessor">A delegate accessing the scope while access to it is locked.</param>
            <remarks>This methods locks the scope while executing <paramref name="scopeAccessor"/>. This ensures that no other method of
            <see cref="T:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder"/> modifies the scope while it is being accessed.</remarks>
        </member>
        <member name="M:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.GetConcreteType(Remotion.Mixins.Definitions.TargetClassDefinition)">
            <summary>
            Gets the concrete mixed type for the given target class configuration either from the cache or by generating it.
            </summary>
            <param name="configuration">The configuration object for the target class.</param>
            <returns>A concrete type with all mixins from <paramref name="configuration"/> mixed in.</returns>
            <remarks>This is mostly for internal reasons, users should use <see cref="M:Remotion.Mixins.TypeFactory.GetConcreteType(System.Type)"/> instead.</remarks>
        </member>
        <member name="M:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.GetConcreteMixinType(Remotion.Mixins.Definitions.MixinDefinition)">
            <summary>
            Gets the concrete type for the given mixin class configuration either from the cache or by generating it.
            </summary>
            <param name="configuration">The configuration object for the mixin class.</param>
            <returns>A concrete type for the given mixin <paramref name="configuration"/>.</returns>
            <remarks>This is mostly for internal reasons, users will hardly ever need to use this method..</remarks>
        </member>
        <member name="M:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.SaveAndResetDynamicScope">
            <summary>
            Saves the dynamic <see cref="P:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.Scope"/> of this builder to disk and resets it, so that the builder can continue to generate types. Use
            the <see cref="P:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.Scope">Scope's</see> properties via <see cref="M:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.LockAndAccessScope(System.Action{Remotion.Mixins.CodeGeneration.IModuleManager})"/> to configure the name and paths of the modules being
            saved.
            </summary>
            <returns>An array containing the paths of the assembly files saved.</returns>
            <remarks>
            <para>
            This is similar to directly calling <c>Scope.SaveAssemblies</c>, but in addition resets the <see cref="P:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.Scope"/> to a new instance of
            <see cref="T:Remotion.Mixins.CodeGeneration.IModuleManager"/>. That way, the builder can continue to generate types even when the dynamic assemblies have been saved.
            Note that each time this method is called, only the types generated since the last save operation are persisted. Also, if the scope isn't
            reconfigured to save at different paths, previously saved assemblies might be overwritten.
            </para>
            <para>
            Having different assemblies with the same names loaded into one AppDomain can lead to sporadic
            <see cref="T:System.TypeLoadException">TypeLoadExceptions</see> in reflective scenarios. To avoid running into such errors, set the 
            <see cref="P:Remotion.Mixins.CodeGeneration.IModuleManager.SignedAssemblyName"/> and <see cref="P:Remotion.Mixins.CodeGeneration.IModuleManager.UnsignedAssemblyName"/> properties of the
            <see cref="P:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.Scope"/> to new, unique names after calling this method.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.LoadAssemblyIntoCache(System.Reflection.Assembly)">
            <summary>
            Loads an assembly with the given name and adds its mixed types to this builder's cache.
            </summary>
            <param name="assembly">The assembly whose public types to load into the cache.</param>
        </member>
        <member name="M:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.LoadAssemblyIntoCache(System.Runtime.InteropServices._Assembly)">
            <summary>
            Loads an assembly with the given name and adds its mixed types to this builder's cache.
            </summary>
            <param name="assembly">The assembly whose public types to load into the cache.</param>
            <remarks>
            This overload exists primarily for testing purposes; it has the same functionality as <see cref="M:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.LoadAssemblyIntoCache(System.Reflection.Assembly)"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.InitializeUnconstructedInstance(Remotion.Mixins.IMixinTarget)">
            <summary>
            Initializes a mixin target instance which was created without its constructor having been called.
            </summary>
            <param name="mixinTarget">The mixin target to initialize.</param>
            <exception cref="T:System.ArgumentNullException">The mixin target is <see langword="null"/>.</exception>
            <remarks>This method is useful when a mixin target instance is created via <see cref="M:System.Runtime.Serialization.FormatterServices.GetSafeUninitializedObject(System.Type)"/>.</remarks>
        </member>
        <member name="M:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.BeginDeserialization(System.Func{System.Type,System.Type},System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Begins deserialization of a mixed object.
            </summary>
            <param name="typeTransformer">A transformation object that is given a chance to modify the deserialized type before it is instantiated.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object provided by the .NET serialization infrastructure.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> object provided by the .NET serialization infrastructure.</param>
            <returns>An <see cref="T:System.Runtime.Serialization.IObjectReference"/> object containing a partially deserialized mixed object. Be sure to call
            <see cref="M:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.FinishDeserialization(System.Runtime.Serialization.IObjectReference)"/> from an implementation of <see cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)"/> to finish the
            deserialization process.</returns>
            <exception cref="T:System.ArgumentNullException">One or more of the parameters passed to this method are <see langword="null"/>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The serialization data does not hold the expected values.</exception>
            <remarks>
            <para>
            This method is useful when the mixin engine is combined with other code generation mechanisms. In such a case, the default
            <see cref="T:System.Runtime.Serialization.IObjectReference"/> implementation provided by the mixin code generation can be extended by a custom <see cref="T:System.Runtime.Serialization.IObjectReference"/>
            object by calling this method. This method instantiates the real object to be returned by the deserialization process, but the caller
            specifies a <paramref name="typeTransformer"/> delegate that gets the chance to modify the type of object before it is instantiated. The
            parameter passed to <paramref name="typeTransformer"/> is the type deducted from the deserialized mixin configuration-
            </para>
            <para>
            This method expects that the deserialized data is from a mixed object, calling it for an unmixed object will yield an exception.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.FinishDeserialization(System.Runtime.Serialization.IObjectReference)">
            <summary>
            Finishes a deserialization process started by <see cref="M:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.BeginDeserialization(System.Func{System.Type,System.Type},System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>.
            </summary>
            <param name="objectReference">The object returned from <see cref="M:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.BeginDeserialization(System.Func{System.Type,System.Type},System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>.</param>
            <remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="objectReference"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentTypeException">The <paramref name="objectReference"/> parameter does not hold an object returned by the
            <see cref="M:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.BeginDeserialization(System.Func{System.Type,System.Type},System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> method.</exception>
            <para>
            Call this method to complete deserialization of a mixed object when the .NET serialization infrastructure has finished its
            work, e.g. from an implementation of <see cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)"/>. After this method, the real object
            contained in <paramref name="objectReference"/> can safely be used.
            </para>
            <para>
            If the given instance is not an instance of a mixed type, this method does nothing.
            </para>
            </remarks>
        </member>
        <member name="P:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.Cache">
            <summary>
            Gets the cache used to cache types generated by this <see cref="T:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder"/>.
            </summary>
            <value>The cache used for building types.</value>
        </member>
        <member name="P:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.Scope">
            <summary>
            Gets or sets the module scope of this <see cref="T:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder"/>. The object returned by this property must not be used by multiple
            threads at the same time (or while another thread executes methods on <see cref="T:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder"/>). Use the
            <see cref="M:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.LockAndAccessScope(System.Action{Remotion.Mixins.CodeGeneration.IModuleManager})"/> method to access the scope in a thread-safe way.
            </summary>
            <value>The module scope of this <see cref="T:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder"/>. If set to <see langword="null"/>, a new <see cref="T:Remotion.Mixins.CodeGeneration.IModuleManager"/>
            will be created the next time the <see cref="P:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.Scope"/> property is accessed.</value>
        </member>
        <member name="P:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.TypeNameProvider">
            <summary>
            Gets or sets the name provider used when generating a concrete mixed type.
            </summary>
            <value>The type name provider for mixed types.</value>
        </member>
        <member name="P:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder.MixinTypeNameProvider">
            <summary>
            Gets or sets the name provider used when generating a concrete mixin type.
            </summary>
            <value>The type name provider for mixin types.</value>
        </member>
        <member name="T:Remotion.Collections.MultiDictionary`2">
            <summary>
            A dictionary that contains a <see cref="T:System.Collections.Generic.List`1"/> of values for every key.
            </summary>
        </member>
        <member name="T:Remotion.Collections.AutoInitDictionary`2">
            <summary>
              A dictionary that automatically creates new value objects when queried for a specific key.
            </summary>
            <remarks>
            	This collection should usually not be modified using <see cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)"/>, setting values through 
              the indexer or removing items. Getting values through the indexer will assign a new object to the specified key if none exists.
            </remarks>
        </member>
        <member name="M:Remotion.Collections.MultiDictionary`2.Add(`0,`1)">
            <summary>
            Adds a value to the key's value list.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextSpecificHandlerMap`1">
            <summary>
            A map mapping from types to  <see cref="T:Remotion.Diagnostics.ToText.Infrastructure.IToTextSpecificHandler"/>s.
            </summary>
            <typeparam name="THandler"></typeparam>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.Infrastructure.ToTextSpecificHandlerMap`1.Add(Remotion.Diagnostics.ToText.Infrastructure.ToTextSpecificHandlerMap{`0})">
            <summary>
            Adds the entries from the passed <see cref="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextSpecificHandlerMap`1"/> to the map.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderDictionaryHandler">
            <summary>
            Handles instances implementing the <see cref="T:System.Collections.IEnumerable"/> interface in <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>'s <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToText(System.Object,Remotion.Diagnostics.ToText.IToTextBuilder)"/> fallback cascade.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderHandler">
            <summary>
            Base class for all handlers which can be used by <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/> in its ToText-fallback-cascade.
            Handlers are registered in order of precedence with <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/> by calling its (<see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.RegisterToTextProviderHandler``1(``0)"/>-method.
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderHandler.ToTextIfTypeMatches(Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextParameters,Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderHandlerFeedback)">
            <summary>
            Abstract method whose concrete implementations supply conversion into human readable text form (<see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>'s <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToText(System.Object,Remotion.Diagnostics.ToText.IToTextBuilder)"/> method) 
            of the passed instance for specific classes of types (e.g. types implementing IEnumerable or IFormattable, Strings, etc).
            </summary>
            <param name="toTextParameters">The instance to convert, type of the instance and <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/> to add the human readable text to.</param>
            <param name="toTextProviderHandlerFeedback">If the type was handled by the method, it must set 
            the <see cref="P:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderHandlerFeedback.Handled"/> property of the passed argument to <c>true</c>.</param>
        </member>
        <member name="P:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderHandler.Disabled">
            <summary>
            Enables/disables the handler. Disabled handlers are skipped by the <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/> fallback cascade).
            </summary>
        </member>
        <member name="T:Remotion.Utilities.AssertionException">
            <summary>
            This exception is thrown when an assertion fails.
            </summary>
            <seealso cref="T:Remotion.Utilities.Assertion"/>
        </member>
        <member name="T:Remotion.Utilities.Assertion">
            <summary>
            Provides methods that throw an <see cref="T:Remotion.Utilities.AssertionException"/> if an assertion fails.
            </summary>
            <remarks>
              <para>
              This class contains methods that are conditional to the DEBUG and TRACE attributes (<see cref="M:Remotion.Utilities.Assertion.DebugAssert(System.Boolean,System.String)"/> and <see cref="M:Remotion.Utilities.Assertion.TraceAssert(System.Boolean,System.String)"/>). 
              </para><para>
              Note that assertion expressions passed to these methods are not evaluated (read: executed) if the respective symbol are not defined during
              compilation, nor are the methods called. This increases performance for production builds, but make sure that your assertion expressions do
              not cause any side effects! See <see cref="T:System.Diagnostics.ConditionalAttribute"/> or <see cref="T:System.Diagnostics.Debug"/> and <see cref="T:System.Diagnostics.Trace"/> the for more information 
              about conditional compilation.
              </para><para>
              Assertions are no replacement for checking input parameters of public methods (see <see cref="T:Remotion.Utilities.ArgumentUtility"/>).  
              </para>
            </remarks>
        </member>
        <member name="T:Remotion.Text.CommandLine.CommandLineArgumentException">
            <summary>
            Base class for all exceptions that indicate errors in the command line.
            </summary>
            <remarks>
            Throw <see cref="T:Remotion.Text.CommandLine.CommandLineArgumentApplicationException"/> to indicate application-defined command line
            errors (e.g., use of arguments that exclude each other).
            </remarks>
        </member>
        <member name="T:Remotion.Text.CommandLine.InvalidCommandLineArgumentValueException">
            <summary>
            This exception is thrown if the value of a parameter cannot be interpreted.
            </summary>
        </member>
        <member name="T:Remotion.Text.CommandLine.InvalidCommandLineArgumentNameException">
            <summary>
            This exception is thrown if the command line contains a named argument that is not defined.
            </summary>
            <remarks>
            The exception is thrown either because there is no argument definition with the specified name,
            or (if <see cref="P:Remotion.Text.CommandLine.CommandLineParser.IncrementalNameValidation"/> is <c>true</c>), because there 
            is more than one argument that starts with the specified string.
            </remarks>
        </member>
        <member name="T:Remotion.Text.CommandLine.InvalidNumberOfCommandLineArgumentsException">
            <summary>
            This exception is thrown if the command line contains too many unnamed arguments.
            </summary>
        </member>
        <member name="T:Remotion.Text.CommandLine.MissingRequiredCommandLineParameterException">
            <summary>
            This exception is thrown if a non-optional command line argument is not contained in the command line.
            </summary>
        </member>
        <member name="T:Remotion.Text.CommandLine.ConflictCommandLineParameterException">
            <summary>
            This exception is thrown if two or more conflictiong arguments are set.
            </summary>
        </member>
        <member name="T:Remotion.Text.CommandLine.CommandLineArgumentApplicationException">
            <summary>
            This exception class indicates application-defined error conditions.
            </summary>
            <remarks>
            Use this class to indicate application-defined command line errors (e.g., 
            use of arguments that exclude each other).
            </remarks>
        </member>
        <member name="T:Remotion.Reflection.IAssemblyFinderFilter">
            <summary>
            Provides an interface for filtering the assemblies found by the <see cref="T:Remotion.Reflection.AssemblyFinder"/>.
            </summary>
            <remarks>The filtering interface provides a two-step model: first, the <see cref="T:Remotion.Reflection.AssemblyFinder"/> checks whether the assembly name fits the 
            criteria of the filter implementation, then, it checks whether the assembly itself fits the criteria. If the <see cref="T:Remotion.Reflection.AssemblyFinder"/> locates
            an assembly on disk, it will only load it if the assembly's name passes the first step. After loading, the second step can still reject the
            assembly based on more detailed investigation.</remarks>
        </member>
        <member name="M:Remotion.Reflection.IAssemblyFinderFilter.ShouldConsiderAssembly(System.Reflection.AssemblyName)">
            <summary>
            Determines whether the assembly of the given name should be considered for inclusion by the <see cref="T:Remotion.Reflection.AssemblyFinder"/>.
            </summary>
            <param name="assemblyName">The name of the assembly to be checked.</param>
            <returns>True if the <see cref="T:Remotion.Reflection.AssemblyFinder"/> should consider this assembly; otherwise false.</returns>
            <remarks>This is the first step of a two-step filtering protocol. Assemblies rejected by this method will not be explicitly loaded by the
            <see cref="T:Remotion.Reflection.AssemblyFinder"/>.</remarks>
        </member>
        <member name="M:Remotion.Reflection.IAssemblyFinderFilter.ShouldIncludeAssembly(System.Reflection.Assembly)">
            <summary>
            Determines whether the given assembly should be included in the list of assemblies returned by the <see cref="T:Remotion.Reflection.AssemblyFinder"/>.
            </summary>
            <param name="assembly">The assembly to be checked.</param>
            <returns>True if the <see cref="T:Remotion.Reflection.AssemblyFinder"/> should return this assembly; otherwise false.</returns>
            <remarks>This is the second step of a two-step filtering protocol. Only assemblies not rejected by <see cref="M:Remotion.Reflection.IAssemblyFinderFilter.ShouldConsiderAssembly(System.Reflection.AssemblyName)"/> are
            passed on to this step.</remarks>
        </member>
        <member name="T:Remotion.Globalization.IObjectWithResources">
            <summary>
              A class whose instances know where their resource container is.
            </summary>
            <remarks>
              Used to externally controll resource management.
            </remarks>
        </member>
        <member name="M:Remotion.Globalization.IObjectWithResources.GetResourceManager">
            <summary>
              Returns an instance of <c>IResourceManager</c> for resource container of the object.
            </summary>
        </member>
        <member name="T:Remotion.Mixins.ConfigurationException">
            <summary>
            Thrown when there is a severe error in the mixin configuration which is detected during configuration analysis. The problem prevents
            the configuration from being fully analyzed. See also <see cref="T:Remotion.Mixins.Validation.ValidationException"/>.
            </summary>
        </member>
        <member name="M:Remotion.Mixins.ConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Mixins.ConfigurationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Remotion.Mixins.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Mixins.ConfigurationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Remotion.Mixins.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Mixins.ConfigurationException"/> class during deserialization.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Remotion.Logging.Log4NetLog">
            <summary>
            Implementation of interface <see cref="T:Remotion.Logging.ILog"/> for <b>log4net</b>.
            </summary>
            <remarks>
            Use <see cref="T:Remotion.Logging.LogManager"/> to instantiate <see cref="T:Remotion.Logging.Log4NetLog"/> via <see cref="O:Remotion.Logging.LogManager.GetLogger"/>.
            <note type="warning">
            <see cref="T:Remotion.Logging.Log4NetLog"/> does not allow event ids outside the range of unsigned 16-bit integers (0 - 65535) and will throw an
            <see cref="T:System.ArgumentOutOfRangeException"/> if an event id outside this range is encountered. The original message will be logged using a 
            truncated event id before the exception is thrown.
            </note>
            </remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.Convert(Remotion.Logging.LogLevel)">
            <summary>
            Converts <see cref="T:Remotion.Logging.LogLevel"/> to <see cref="T:log4net.Core.Level"/>.
            </summary>
            <param name="logLevel">The <see cref="T:Remotion.Logging.LogLevel"/> to be converted.</param>
            <returns>Corresponding <see cref="T:log4net.Core.Level"/> needed for logging to the <b>log4net </b> <see cref="T:log4net.ILog"/> interface.</returns>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.#ctor(log4net.Core.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Logging.Log4NetLog"/> class 
            using the specified <see cref="T:log4net.Core.ILogger"/>.
            </summary>
            <param name="logger">The <see cref="T:log4net.Core.ILogger"/> the log messages are written to.</param>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.Log(Remotion.Logging.LogLevel,System.Int32,System.Object,System.Exception)">
            <overloads><inheritdoc cref="M:Remotion.Logging.ILog.Log(Remotion.Logging.LogLevel,System.Object)"/></overloads>
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.Log(Remotion.Logging.LogLevel,System.Int32,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.Log(Remotion.Logging.LogLevel,System.Object,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.Log(Remotion.Logging.LogLevel,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.LogFormat(Remotion.Logging.LogLevel,System.Int32,System.Exception,System.String,System.Object[])">
            <overloads><inheritdoc cref="M:Remotion.Logging.ILog.LogFormat(Remotion.Logging.LogLevel,System.String,System.Object[])"/></overloads>
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.LogFormat(Remotion.Logging.LogLevel,System.Int32,System.String,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.LogFormat(Remotion.Logging.LogLevel,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.LogFormat(Remotion.Logging.LogLevel,System.Exception,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.LogFormat(Remotion.Logging.LogLevel,System.Enum,System.Exception,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="messageEnum"/>'s underlying value is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.LogFormat(Remotion.Logging.LogLevel,System.Enum,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="messageEnum"/>'s underlying value is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.Debug(System.Int32,System.Object,System.Exception)">
            <overloads><inheritdoc cref="M:Remotion.Logging.ILog.Debug(System.Object)"/></overloads>
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.Debug(System.Int32,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.DebugFormat(System.Int32,System.Exception,System.String,System.Object[])">
            <overloads><inheritdoc cref="M:Remotion.Logging.ILog.DebugFormat(System.String,System.Object[])"/></overloads>
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.DebugFormat(System.Int32,System.String,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.DebugFormat(System.Exception,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.DebugFormat(System.Enum,System.Exception,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="messageEnum"/>'s underlying value is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.DebugFormat(System.Enum,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="messageEnum"/>'s underlying value is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.Info(System.Int32,System.Object,System.Exception)">
            <overloads><inheritdoc cref="M:Remotion.Logging.ILog.Info(System.Object)"/></overloads>
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.Info(System.Int32,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.InfoFormat(System.Int32,System.Exception,System.String,System.Object[])">
            <overloads><inheritdoc cref="M:Remotion.Logging.ILog.InfoFormat(System.String,System.Object[])"/></overloads>
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.InfoFormat(System.Int32,System.String,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.InfoFormat(System.Exception,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.InfoFormat(System.Enum,System.Exception,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="messageEnum"/>'s underlying value is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.InfoFormat(System.Enum,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="messageEnum"/>'s underlying value is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.Warn(System.Int32,System.Object,System.Exception)">
            <overloads><inheritdoc cref="M:Remotion.Logging.ILog.Warn(System.Object)"/></overloads>
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.Warn(System.Int32,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.WarnFormat(System.Int32,System.Exception,System.String,System.Object[])">
            <overloads><inheritdoc cref="M:Remotion.Logging.ILog.WarnFormat(System.String,System.Object[])"/></overloads>
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.WarnFormat(System.Int32,System.String,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.WarnFormat(System.Exception,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.WarnFormat(System.Enum,System.Exception,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="messageEnum"/>'s underlying value is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.WarnFormat(System.Enum,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="messageEnum"/>'s underlying value is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.Error(System.Int32,System.Object,System.Exception)">
            <overloads><inheritdoc cref="M:Remotion.Logging.ILog.Error(System.Object)"/></overloads>
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.Error(System.Int32,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.ErrorFormat(System.Int32,System.Exception,System.String,System.Object[])">
            <overloads><inheritdoc cref="M:Remotion.Logging.ILog.ErrorFormat(System.String,System.Object[])"/></overloads>
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.ErrorFormat(System.Int32,System.String,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.ErrorFormat(System.Exception,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.ErrorFormat(System.Enum,System.Exception,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="messageEnum"/>'s underlying value is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.ErrorFormat(System.Enum,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="messageEnum"/>'s underlying value is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.Fatal(System.Int32,System.Object,System.Exception)">
            <overloads><inheritdoc cref="M:Remotion.Logging.ILog.Fatal(System.Object)"/></overloads>
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.Fatal(System.Int32,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.FatalFormat(System.Int32,System.Exception,System.String,System.Object[])">
            <overloads><inheritdoc cref="M:Remotion.Logging.ILog.FatalFormat(System.String,System.Object[])"/></overloads>
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.FatalFormat(System.Int32,System.String,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.FatalFormat(System.Exception,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.FatalFormat(System.Enum,System.Exception,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="messageEnum"/>'s underlying value is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.FatalFormat(System.Enum,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="messageEnum"/>'s underlying value is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="T:Remotion.Collections.LazyInterlockedCache`2">
            <summary>
            A thread-save cache with optimized interlocking behaviour. 
            </summary>
            <remarks>
              The cache object is only locked while a new key is added to the cache. If a new value needs to be created, 
              only its key will be locked during creation. For best performance, first try to get the object using
              <see cref="M:Remotion.Collections.LazyInterlockedCache`2.TryGetValue(`0,`1@)"/>. If no object is found, call <see cref="M:Remotion.Collections.LazyInterlockedCache`2.GetOrCreateValue(`0,System.Func{`0,`1})"/> using a factory
              method that will be called if the key still cannot be found.
            </remarks>
            <typeparam name="TKey"> Type of the cache key. </typeparam>
            <typeparam name="TValue"> Type of the cache value. </typeparam>
        </member>
        <member name="T:Remotion.Configuration.ConfigurationWrapper">
            <summary>Use the <see cref="T:Remotion.Configuration.ConfigurationWrapper"/> to encapsulate the access to the configiration data.</summary>
            <remarks>
            The .NET runtime does not provide an assignable well-known instance for the configuration. The <see cref="T:Remotion.Configuration.ConfigurationWrapper"/> is therefore
            the only option for injecting custom configuration data during design-time or for unit tests.
            </remarks>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderToStringHandler">
            <summary>
            Special type of handler which handles all instances in <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>'s <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToText(System.Object,Remotion.Diagnostics.ToText.IToTextBuilder)"/> fallback cascade 
            by calling their <see cref="M:System.Object.ToString"/> method.
            Since it handles all incoming types, if it is used this should always the last handler in the fallback cascade.
            
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderAutomaticObjectToTextHandler">
            <summary>
            Handles automatic conversion of arbitrary instances to human readable text form through reflection in
            <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>'s <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToText(System.Object,Remotion.Diagnostics.ToText.IToTextBuilder)"/> fallback cascade.
            </summary>
        </member>
        <member name="T:Remotion.Mixins.MixinConfiguration">
            <summary>
            Constitutes a mixin configuration (ie. a set of classes associated with mixins) and manages the mixin configuration for the
            current thread.
            </summary>
            <remarks>
            <para>
            Instances of this class represent a single mixin configuration, ie. a set of classes associated with mixins. The class manages a thread-local
            (actually <see cref="T:Remotion.Context.SafeContext"/>-local) single active configuration instance via its <see cref="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration"/> property and
            related methods; the active configuration can conveniently be replaced via the <see cref="M:Remotion.Mixins.MixinConfiguration.EnterScope"/> method. The also provides entry points
            for building new mixin configuration objects: <see cref="M:Remotion.Mixins.MixinConfiguration.BuildNew"/>, <see cref="M:Remotion.Mixins.MixinConfiguration.BuildFromActive"/>, and <see cref="M:Remotion.Mixins.MixinConfiguration.BuildFrom(Remotion.Mixins.MixinConfiguration)"/>.
            </para>
            <para>
            While the <see cref="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration"/> will usually be accessed only indirectly via <see cref="T:Remotion.Mixins.ObjectFactory"/> or <see cref="T:Remotion.Mixins.TypeFactory"/>,
            <see cref="M:Remotion.Mixins.MixinConfiguration.EnterScope"/> and the <see cref="M:Remotion.Mixins.MixinConfiguration.BuildFromActive">BuildFrom...</see> methods can be very useful to adjust a thread's mixin
            configuration at runtime.
            </para>
            <para>
            The master mixin configuration - the configuration in effect for a thread if not specifically replaced by another configuration - is obtained
            by analyzing the assemblies in the application's bin directory  for attributes such as <see cref="T:Remotion.Mixins.UsesAttribute"/>,
            <see cref="T:Remotion.Mixins.ExtendsAttribute"/>, and <see cref="T:Remotion.Mixins.CompleteInterfaceAttribute"/>. (For more information about the default configuration, see
            <see cref="M:Remotion.Mixins.Context.DeclarativeConfigurationBuilder.BuildDefaultConfiguration"/>.) The master configuration can also be manipulated via
            <see cref="M:Remotion.Mixins.MixinConfiguration.EditMasterConfiguration(System.Action{Remotion.Mixins.MixinConfiguration})"/>.
            </para>
            <example>
            The following shows an exemplary application of the <see cref="T:Remotion.Mixins.MixinConfiguration"/> class that manually builds mixin configuration instances
            and activates them for the current thread for a given scope.
            <code>
            class Program
            {
              public static void Main()
              {
                // myType1 is an instantiation of MyType with the default mixin configuration
                MyType myType1 = ObjectFactory.Create&lt;MyType&gt; ().With();
            
                using (MixinConfiguration.BuildNew().ForClass&lt;MyType&gt;.AddMixin&lt;SpecialMixin&gt;().EnterScope())
                {
                  // myType2 is an instantiation of MyType with a specific configuration, which contains only SpecialMixin
                  MyType myType2 = ObjectFactory.Create&lt;MyType&gt; ().With();
            
                  using (MixinConfiguration.BuildNew().EnterScope())
                  {
                    // myType3 is an instantiation of MyType without any mixins
                    MyType myType3 = ObjectFactory.Create&lt;MyType&gt; ().With();
                  }
                }
            
                // myType4 again is an instantiation of MyType with the default mixin configuration
                MyType myType4 = ObjectFactory.Create&lt;MyType&gt; ().With();
              }
            }
            </code>
            </example>
            </remarks>
            <threadsafety static="true" instance="false">
               <para>Instances of this class are meant to be used one-per-thread, see <see cref="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration"/>.</para>
            </threadsafety>
        </member>
        <member name="M:Remotion.Mixins.MixinConfiguration.EditMasterConfiguration(System.Action{Remotion.Mixins.MixinConfiguration})">
            <summary>
            Locks access to the application's master mixin configuration and accepts a delegate to edit the configuration while it is locked.
            </summary>
            <param name="editor">A delegate performing changes to the master configuration.</param>
            <remarks>
            The master mixin configuration is the default mixin configuration used whenever a thread first accesses
            <see cref="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration"/>. Changes made to it will affect any thread accessing its mixin configuration for the
            first time after this method has been called. If a thread attempts to access its mixin configuration for the first time while
            a change is in progress, it will block until until that process has finished (i.e. until <paramref name="editor"/> has returned).
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.MixinConfiguration.ResetMasterConfiguration">
            <summary>
            Causes the master mixin configuration to be rebuilt from scratch the next time a thread accesses its mixin configuration for the first time.
            </summary>
            <remarks>
            The master mixin configuration is the default mixin configuration used whenever a thread first accesses
            <see cref="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration"/>. Changes made to it will affect any thread accessing its mixin configuration for the
            first time after this method has been called.
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.MixinConfiguration.#ctor">
            <summary>
            Initializes a new empty mixin configuarion that does not inherit anything from another configuration.
            </summary>
        </member>
        <member name="M:Remotion.Mixins.MixinConfiguration.#ctor(Remotion.Mixins.MixinConfiguration)">
            <summary>
            Initializes a new configuration that inherits from another configuration.
            </summary>
            <param name="parentConfiguration">The parent configuration. The new configuration will inherit all class contexts from its parent configuration. Can be
            <see langword="null"/>.</param>
        </member>
        <member name="M:Remotion.Mixins.MixinConfiguration.EnterScope">
            <summary>
            Temporarily replaces the mixin configuration associated with the current thread (actually <see cref="T:Remotion.Context.SafeContext"/>) with this 
            <see cref="T:Remotion.Mixins.MixinConfiguration"/>. The original configuration will be restored when the returned object's <see cref="M:System.IDisposable.Dispose"/> method
            is called.
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> object for restoring the original configuration.</returns>
        </member>
        <member name="M:Remotion.Mixins.MixinConfiguration.Validate">
            <summary>
            Validates the whole configuration.
            </summary>
            <returns>An <see cref="T:Remotion.Mixins.Validation.IValidationLog"/>, which contains information about whether the configuration reresented by this context is valid.</returns>
            <remarks>This method retrieves definition items for all the <see cref="P:Remotion.Mixins.MixinConfiguration.ClassContexts"/> known by this configuration and uses the
            <see cref="T:Remotion.Mixins.Validation.Validator"/> class to validate them. The validation results can be inspected, passed to a <see cref="T:Remotion.Mixins.Validation.ValidationException"/>, or
            be dumped using the <see cref="T:Remotion.Mixins.Validation.ConsoleDumper"/>.</remarks>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Remotion.Mixins.MixinConfiguration"/> contains a <see cref="T:Remotion.Mixins.Context.ClassContext"/> for a generic type, of
            which it cannot make a closed generic type. Because closed types are needed for validation, this <see cref="T:Remotion.Mixins.MixinConfiguration"/>
            cannot be validated as a whole. Even in this case, the configuration might still be correct, but validation is deferred to
            <see cref="M:Remotion.Mixins.TargetClassDefinitionUtility.GetActiveConfiguration(System.Type)"/>.</exception>
        </member>
        <member name="M:Remotion.Mixins.MixinConfiguration.RegisterInterface(System.Type,Remotion.Mixins.Context.ClassContext)">
            <summary>
            Registers an interface to be associated with the given <see cref="T:Remotion.Mixins.Context.ClassContext"/>. Later calls to <see cref="M:Remotion.Mixins.MixinConfiguration.ResolveInterface(System.Type)"/>
            with the given interface type will result in the registered context being returned.
            </summary>
            <param name="interfaceType">Type of the interface to be registered.</param>
            <param name="associatedClassContext">The class context to be associated with the interface type.</param>
            <exception cref="T:System.InvalidOperationException">The interface has already been registered.</exception>
            <exception cref="T:System.ArgumentNullException">One of the parameters is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="interfaceType"/> argument is not an interface or
            <paramref name="associatedClassContext"/> has not been added to this configuration.</exception>
        </member>
        <member name="M:Remotion.Mixins.MixinConfiguration.RegisterInterface(System.Type,System.Type)">
            <summary>
            Registers an interface to be associated with the <see cref="T:Remotion.Mixins.Context.ClassContext"/> for the given type. Later calls to <see cref="M:Remotion.Mixins.MixinConfiguration.ResolveInterface(System.Type)"/>
            with the given interface type will result in the registered context being returned.
            </summary>
            <param name="interfaceType">Type of the interface to be registered.</param>
            <param name="associatedClassType">The type whose class context is to be associated with the interface type.</param>
            <exception cref="T:System.InvalidOperationException">The interface has already been registered.</exception>
            <exception cref="T:System.ArgumentNullException">One of the parameters is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="interfaceType"/> argument is not an interface or no <see cref="T:Remotion.Mixins.Context.ClassContext"/> for
            <paramref name="associatedClassType"/> has been added to this configuration.</exception>
        </member>
        <member name="M:Remotion.Mixins.MixinConfiguration.ResolveInterface(System.Type)">
            <summary>
            Resolves the given interface into a class context.
            </summary>
            <param name="interfaceType">The interface type to be resolved.</param>
            <returns>The <see cref="T:Remotion.Mixins.Context.ClassContext"/> previously registered for the given type, or <see langword="null"/> if the no context was registered.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interfaceType"/> argument is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="interfaceType"/> argument is not an interface.</exception>
        </member>
        <member name="M:Remotion.Mixins.MixinConfiguration.Clear">
            <summary>
            Removes all <see cref="T:Remotion.Mixins.Context.ClassContext"/> instances and registered interfaces from this <see cref="T:Remotion.Mixins.MixinConfiguration"/> object.
            </summary>
        </member>
        <member name="M:Remotion.Mixins.MixinConfiguration.CopyTo(Remotion.Mixins.MixinConfiguration)">
            <summary>
            Copies all configuration data of this configuration to a destination object, replacing class contexts and registered interfaces
            for types that are configured in both objects.
            </summary>
            <param name="destination">The destination to copy all configuration data to..</param>
        </member>
        <member name="M:Remotion.Mixins.MixinConfiguration.BuildNew">
            <summary>
            Returns a <see cref="T:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder"/> object to build a new <see cref="T:Remotion.Mixins.MixinConfiguration"/>.
            </summary>
            <returns>A <see cref="T:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder"/> for building a new <see cref="T:Remotion.Mixins.MixinConfiguration"/> with a fluent interface.</returns>
            <remarks>
            <para>
            Use this method to build a new <see cref="T:Remotion.Mixins.MixinConfiguration"/> from scratch.
            </para>
            <para>
            If you want to temporarily make the built
            <see cref="T:Remotion.Mixins.MixinConfiguration"/> the <see cref="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration"/>, call the builder's <see cref="M:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder.EnterScope"/>
            method from within a <c>using</c> statement.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.MixinConfiguration.BuildFrom(Remotion.Mixins.MixinConfiguration)">
            <summary>
            Returns a <see cref="T:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder"/> object to build a new <see cref="T:Remotion.Mixins.MixinConfiguration"/> which inherits data from a 
            <paramref name="parentConfiguration"/>.
            </summary>
            <param name="parentConfiguration">A <see cref="T:Remotion.Mixins.MixinConfiguration"/> whose data should be inherited from the built
            <see cref="T:Remotion.Mixins.MixinConfiguration"/>.</param>
            <returns>A <see cref="T:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder"/> for building a new <see cref="T:Remotion.Mixins.MixinConfiguration"/> with a fluent interface.</returns>
            <remarks>
            <para>
            Use this method to build a new <see cref="T:Remotion.Mixins.MixinConfiguration"/> while taking over the class-mixin bindings from an existing
            <see cref="T:Remotion.Mixins.MixinConfiguration"/> object.
            </para>
            <para>
            If you want to temporarily make the built
            <see cref="T:Remotion.Mixins.MixinConfiguration"/> the <see cref="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration"/>, call the builder's <see cref="M:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder.EnterScope"/>
            method from within a <c>using</c> statement.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.MixinConfiguration.BuildFromActive">
            <summary>
            Returns a <see cref="T:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder"/> object to build a new <see cref="T:Remotion.Mixins.MixinConfiguration"/> which inherits data from the
            <see cref="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration"/>.
            </summary>
            <returns>A <see cref="T:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder"/> for building a new <see cref="T:Remotion.Mixins.MixinConfiguration"/> with a fluent interface.</returns>
            <remarks>
            <para>
            Use this method to build a new <see cref="T:Remotion.Mixins.MixinConfiguration"/> while taking over the class-mixin bindings from the
            <see cref="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration"/>.
            </para>
            <para>
            If you want to temporarily make the built
            <see cref="T:Remotion.Mixins.MixinConfiguration"/> the <see cref="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration"/>, call the builder's <see cref="M:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder.EnterScope"/>
            method from within a <c>using</c> statement.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.MixinConfiguration.SetActiveConfiguration(Remotion.Mixins.MixinConfiguration)">
            <summary>
            Sets the active mixin configuration configuration for the current thread.
            </summary>
            <param name="configuration">The configuration to be set, can be <see langword="null"/>.</param>
        </member>
        <member name="P:Remotion.Mixins.MixinConfiguration.ClassContexts">
            <summary>
            Gets the class contexts currently stored in this <see cref="T:Remotion.Mixins.MixinConfiguration"/>. Only contexts that have been explicitly added for classes
            are returned.
            </summary>
            <value>The class contexts currently sotred in this configuration.</value>
            <remarks>
            Note that the collection returned cannot be used to enumerate all mixed classes, only
            those which are explicitly configured for mixins. If, for example, a base class is configured to have a mixin, its subclasses will not be
            enumerated by the collection even though they inherit the mixin from the base class.
            </remarks>
        </member>
        <member name="P:Remotion.Mixins.MixinConfiguration.HasActiveConfiguration">
            <summary>
            Gets a value indicating whether this thread has an active mixin configuration.
            </summary>
            <value>
              True if there is an active configuration for the current thread (actually <see cref="T:Remotion.Context.SafeContext"/>); otherwise, false.
            </value>
            <remarks>
            The <see cref="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration"/> property will always return a non-<see langword="null"/> configuration, no matter whether one was
            set for the current thread or not. If none was set, a default one is built using <see cref="M:Remotion.Mixins.Context.DeclarativeConfigurationBuilder.BuildDefaultConfiguration"/>.
            In order to check whether a configuration has been set (or a default one has been built), use this property.
            </remarks>
        </member>
        <member name="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration">
            <summary>
            Gets the active mixin configuration for the current thread (actually <see cref="T:Remotion.Context.SafeContext"/>).
            </summary>
            <value>The active mixin configuration for the current thread (<see cref="T:Remotion.Context.SafeContext"/>).</value>
            <remarks>
            The <see cref="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration"/> property will always return a non-<see langword="null"/> configuration, no matter whether one was
            set for the current thread or not. If none was set, a default one is built using <see cref="M:Remotion.Mixins.Context.DeclarativeConfigurationBuilder.BuildDefaultConfiguration"/>.
            In order to check whether a configuration has been set (or a default one has been built), use the <see cref="P:Remotion.Mixins.MixinConfiguration.HasActiveConfiguration"/> property.
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.Context.MixinContextCollection.ContainsAssignableMixin(System.Type)">
            <summary>
            Determines whether this <see cref="T:Remotion.Mixins.Context.ClassContext"/> contains a mixin type assignable to the specified type.
            </summary>
            <param name="baseMixinType">The mixin type to check for.</param>
            <returns>
            True if the <see cref="T:Remotion.Mixins.Context.ClassContext"/> contains a type assignable to the specified type; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="baseMixinType"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Mixins.Context.MixinContextCollection.ContainsOverrideForMixin(System.Type)">
            <summary>
            Determines whether a mixin configured with this <see cref="T:Remotion.Mixins.Context.ClassContext"/> overrides the given <paramref name="mixinType"/>.
            </summary>
            <param name="mixinType">The mixin type which is to be checked for overriders.</param>
            <returns>
            True if the specified mixin type is overridden in this class context; otherwise, false.
            </returns>
        </member>
        <member name="T:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder">
            <summary>
            Provides a fluent interface for building <see cref="T:Remotion.Mixins.MixinConfiguration"/> objects.
            </summary>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder.ForClass(System.Type)">
            <summary>
            Begins configuration of a target class.
            </summary>
            <param name="targetType">The class to be configured.</param>
            <returns>A fluent interface object for configuring the given <paramref name="targetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder.ForClass``1">
            <summary>
            Begins configuration of a target class.
            </summary>
            <typeparam name="TTargetType">The class to be configured.</typeparam>
            <returns>A fluent interface object for configuring the given <typeparamref name="TTargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder.AddMixinToClass(Remotion.Mixins.MixinKind,System.Type,System.Type,Remotion.Mixins.MemberVisibility,System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds the given mixin to the given target type with a number of explicit dependencies and suppressed mixins. This is a shortcut
            method for calling <see cref="M:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder.ForClass(System.Type)"/>, <see cref="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.AddMixin(System.Type)"/>, <see cref="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.WithDependencies(System.Type[])"/>,
            and <see cref="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.SuppressMixins(System.Type[])"/> in a row.
            </summary>
            <param name="mixinKind">The kind of relationship the mixin has with its target class.</param>
            <param name="targetType">The target type to add a mixin for.</param>
            <param name="mixinType">The mixin type to add.</param>
            <param name="introducedMemberVisibility">The default visibility to be used for introduced members.</param>
            <param name="explicitDependencies">The explicit dependencies of the mixin in the context of the target type.</param>
            <param name="suppressedMixins">The mixins suppressed by this mixin in the context of the target type.</param>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder.BuildConfiguration">
            <summary>
            Builds a configuration object with the data gathered so far.
            </summary>
            <returns>A new <see cref="T:Remotion.Mixins.MixinConfiguration"/> instance incorporating all the data acquired so far.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder.EnterScope">
            <summary>
            Builds a configuration object and calls the <see cref="M:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder.EnterScope"/> method on it, thus activating the configuration for the current
            thread. The previous configuration is restored when the returned object's <see cref="M:System.IDisposable.Dispose"/> method is called (e.g. by a
            using statement).
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> object for restoring the original configuration.</returns>
        </member>
        <member name="P:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder.ParentConfiguration">
            <summary>
            Gets the parent configuration used as a base for the newly built mixin configuration.
            </summary>
            <value>The parent configuration.</value>
        </member>
        <member name="P:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder.ClassContextBuilders">
            <summary>
            Gets the class context builders collected so far via the fluent interfaces.
            </summary>
            <value>The class context builders collected so far.</value>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderLinqHandler">
            <summary>
            Handles types typically encountered when using Linq (e.g. <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderEnumerableHandler">
            <summary>
            Handles instances implementing the <see cref="T:System.Collections.IEnumerable"/> interface in <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>'s <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToText(System.Object,Remotion.Diagnostics.ToText.IToTextBuilder)"/> fallback cascade.
            </summary>
        </member>
        <member name="T:Remotion.Collections.SetBasedCacheKey`1">
            <summary>
            Takes a set of objects and provides value-type semantics to the set, so that it can be used as a cache key.
            </summary>
            <remarks>
            <para>
            This type implements <see cref="M:Remotion.Collections.SetBasedCacheKey`1.GetHashCode"/> by calculating the hash codes of all elements in the set wrapped by this collection
            and combining them in an (order-independent) way. Therefore, two instances of this type give the same hash codes if the elements wrapped
            by them give the same hash codes. It is not guaranteed that two instances of this type give different hash codes if the elements give
            different hash codes.
            </para>
            <para>
            Similarly, <see cref="M:Remotion.Collections.SetBasedCacheKey`1.Equals(System.Object)"/> is implemented by comparing the elements of the sets with each other. Two instances of this type
            compare equal if and only if they contain equal objects (without considering order).
            </para>
            <para>
            For efficiency, the hash codes of instances of this type are cached. Changes to the objects wrapped by an instance do not
            influance the hash code and should therefore be avoided.
            </para>
            <para>
            Note that, because this type is based on <see cref="T:Remotion.Collections.Set`1"/>, equal elements are regarded as one. This is, a set (1, 1, 2, 2) is equivalent to 
            a set (1, 2).
            </para>
            </remarks>
        </member>
        <member name="T:Remotion.Xml.XmlSerializationUtility">
            <summary>
            Use this class to easily serialize and deserialize objects to or from XML.
            </summary>
        </member>
        <member name="M:Remotion.Xml.XmlSerializationUtility.GetNamespace(System.Type)">
            <summary>
            Get the Namespace from a type's <see cref="T:System.Xml.Serialization.XmlRootAttribute"/> (preferred) or <see cref="T:System.Xml.Serialization.XmlTypeAttribute"/>.
            </summary>
            <exception cref="T:System.ArgumentException"> Thrown if no namespace is specified through at least one of the possible attributes. </exception>
        </member>
        <member name="T:Remotion.Utilities.TypeConverterType">
            <summary>
            The <see cref="T:Remotion.Utilities.TypeConverterType"/> enum describes whether a <see cref="T:System.ComponentModel.TypeConverter"/> is to be used fro mthe source or the destination type.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.FileUtility.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the complete content of one stream into another.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:Remotion.Utilities.FileUtility.WriteEmbeddedStringResourceToFile(System.Type,System.String,System.String)">
            <summary>
            Writes a string resource embedded in an assemby into a file with the passed filename.
            </summary>
            <param name="typeWhoseNamespaceTheStringResourceResidesIn"><see cref="T:System.Type"/> in whose assembly and namespace the string resource is located.</param>
            <param name="stringResourceName">Name of the string resource, relative to namespace of the passed <see cref="T:System.Type"/>.</param>
            <param name="filePath">The path of the file the string resource will be written into.</param>
        </member>
        <member name="T:Remotion.Utilities.CultureScope">
            <summary>
            Represents a scope with a specific culture and UI-culture (see <see cref="T:System.Globalization.CultureInfo"/>). 
            </summary>
            <example>
            Set German culture and Russian user-interface-culture for
            for current thread within using-block, automatically restore previously set cultures
            after using-block:
            <code><![CDATA[
            using (new CultureScope ("de","ru"))
            {
              // Do something with German Culture and Russian UI-Culture here
            }
            ]]></code></example>
        </member>
        <member name="M:Remotion.Utilities.CultureScope.CreateInvariantCultureScope">
            <summary>
            Returns an invariant culture scope, i.e. initialized with <see cref="T:System.Globalization.CultureInfo"/> = <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.CultureScope.#ctor(System.String,System.String)">
            <summary>
            Intialize <see cref="T:Remotion.Utilities.CultureScope"/> with culture-names-strings, e.g. "de-AT", "en-GB".
            </summary>
            <param name="cultureName">Culture name string. null to not switch culture.</param>
            <param name="uiCultureName">User interface culture name string. null to not switch UI-culture.</param>
        </member>
        <member name="M:Remotion.Utilities.CultureScope.#ctor(System.String)">
            <summary>
            Intialize both the culture and UI-culture with the same culture-name
            </summary>
            <param name="cultureAndUiCultureName">Culture and User interface culture name string.</param>
        </member>
        <member name="M:Remotion.Utilities.CultureScope.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Intialize <see cref="T:Remotion.Utilities.CultureScope"/> from <see cref="T:System.Globalization.CultureInfo"/> instances.
            </summary>
            <param name="cultureInfo">Culture to use.</param>
            <param name="uiCultureInfo">User interface culture to use.</param>
        </member>
        <member name="T:Remotion.Utilities.ConsoleApplication.ConsoleKeypressWaiter">
            <summary>
            Class implementing <see cref="M:Remotion.Utilities.ConsoleApplication.ConsoleKeypressWaiter.Wait"/> to wait for a keypress on the console.
            The <see cref="T:Remotion.Utilities.ConsoleApplication.IWaiter"/>-method returns after a console key has been pressed.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.ConsoleApplication.IWaiter">
            <summary>
            Interface for classes that support some sort of wait functionality. The <see cref="M:Remotion.Utilities.ConsoleApplication.IWaiter.Wait"/>-method 
            returns when the event the class implementing <see cref="T:Remotion.Utilities.ConsoleApplication.IWaiter"/> occured (e.g. see <see cref="T:Remotion.Utilities.ConsoleApplication.ConsoleKeypressWaiter"/>).
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.OuterProductIndexGenerator">
            <summary>
            Allows a class implementing the IOuterProductProcessor interface to visit each member of an outer product of a variable number of independently sized tuples.
            From a programmer's view the class supplies "variable number of nested for loops"-functionality.
            For convenience derive you processor class from <see cref="T:Remotion.Diagnostics.OuterProductProcessorBase"/> (see examples below).
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="doc\include\Diagnostics\OuterProduct.xml" path="OuterProductIndexGenerator/ClassExample1/*"/>
            <!-- No matching elements were found for the following include tag --><include file="doc\include\Diagnostics\OuterProduct.xml" path="OuterProductIndexGenerator/ClassExample2/*"/>
        </member>
        <member name="M:Remotion.Diagnostics.OuterProductIndexGenerator.#ctor(System.Int32[])">
            <overloads>
            OuterProductIndexGenerator can be initialized in a general way by passing the number of elements
            along each dimension in an integer array, or specialized by passing a rectangular array whose
            dimensions shall be used by the outer product.
            </overloads>
             <summary>
             Initializes OuterProductIndexGenerator from an integer array, where each array entry gives the number of elements along its
             corresponding dimension. In programers terms: The number of times each nested for-loop will loop.
             </summary>
             <param name="numberElementsPerDimension">"Number of loops for each for"-loop array</param>
        </member>
        <member name="M:Remotion.Diagnostics.OuterProductIndexGenerator.#ctor(System.Array)">
            <summary>
            Initializes OuterProductIndexGenerator from a (rectangular) array. Use to iterate over a rectangular array and access
            its members with <c>rectangularArray.GetValue(ProcessingState.DimensionIndices)</c> in the
            <see cref="T:Remotion.Diagnostics.IOuterProductProcessor"/> implementation.
            </summary>
            <param name="array">Array from whose dimensions the dimensions of the outer product will be initialized.</param>
        </member>
        <member name="M:Remotion.Diagnostics.OuterProductIndexGenerator.CalculateOuterProductNumberElementsOverall(System.Int32[])">
            <summary>
            Calcs the number of elements in an outer product. 
            </summary>
            <param name="numberElementsPerDimension">The array giving the number of elements along each dimension of the outer product.</param>
            <returns>The product of the numbers in the passed array of integers.</returns>
        </member>
        <member name="M:Remotion.Diagnostics.OuterProductIndexGenerator.ProcessOuterProductRecursive(System.Int32,Remotion.Diagnostics.IOuterProductProcessor)">
            <summary>
            The recursive method which implements the variable number of for-loops together with processing callbacks to the outerProductProcessor.
            </summary>
            <param name="dimensionIndex"></param>
            <param name="outerProductProcessor"></param>
        </member>
        <member name="M:Remotion.Diagnostics.OuterProductIndexGenerator.ProcessOuterProduct(Remotion.Diagnostics.IOuterProductProcessor)">
            <summary>
            Call to start the processing of each OuterProductIndexGenerator-element.
            </summary>
            <param name="outerProductProcessor">An OuterProductIndexGenerator-processor which needs to implement the IOuterProductProcessor interface.</param>
        </member>
        <member name="P:Remotion.Diagnostics.OuterProductIndexGenerator.NumberElementsProcessed">
            <summary>
            The total number of outer product elements that have been visited by the processor.
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.OuterProductIndexGenerator.NumberElementsPerDimension">
            <summary>
            The number of elements in each outer product dimension.
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.OuterProductIndexGenerator.NumberElementsOverall">
            <summary>
            The total number of elements in the outer product (= the product of all NumberElementsPerDimension entries).
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.OuterProductIndexGenerator.DimensionIndices">
            <summary>
            The dimension indices representing the current outer product permutation.
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.OuterProductIndexGenerator.Length">
            <summary>
            The total number of combinations in the outer product.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.EmitUtility">
            <summary>
            Provides helper methods for Reflection.Emit.
            </summary>
        </member>
        <member name="T:Remotion.Globalization.NullResourceManager">
            <summary> A <b>Null Object</b> implementation of <see cref="T:Remotion.Globalization.IResourceManager"/>. </summary>
            <remarks> 
              Use <see cref="F:Remotion.Globalization.NullResourceManager.Instance"/> to access the well defined instance of the <see cref="T:Remotion.Globalization.NullResourceManager"/>.
            </remarks>
        </member>
        <member name="T:Remotion.Globalization.IResourceManager">
            <summary>
              An interface for defining a string resource manager.
            </summary>
        </member>
        <member name="M:Remotion.Globalization.IResourceManager.GetAllStrings">
            <summary>
              Returns all string resources inside the resource manager.
            </summary>
            <returns>
              A collection of string pairs, the key being the resource's ID, the value being the string.
            </returns>
        </member>
        <member name="M:Remotion.Globalization.IResourceManager.GetAllStrings(System.String)">
            <summary>
              Searches for all string resources inside the resource manager whose name is prefixed 
              with a matching tag.
            </summary>
            <param name="prefix"> The prefix all returned string resources must have. </param>
            <returns>
              A collection of string pairs, the key being the resource's ID, the value being the string.
            </returns>
        </member>
        <member name="M:Remotion.Globalization.IResourceManager.GetString(System.String)">
            <summary>
              Gets the value of the specified String resource.
            </summary>
            <param name="id">The ID of the resource to get. </param>
            <returns>
              The value of the resource. If no match is possible, the identifier is returned.
            </returns>
        </member>
        <member name="M:Remotion.Globalization.IResourceManager.GetString(System.Enum)">
            <summary>
              Gets the value of the specified string resource. The resource is identified by
              concatenating type and value name.
            </summary>
            <remarks> See <see cref="M:Remotion.Globalization.ResourceIdentifiersAttribute.GetResourceIdentifier(System.Enum)"/> for resource identifier syntax. </remarks>
            <returns>
              The value of the resource. If no match is possible, the identifier is returned.
            </returns>
        </member>
        <member name="M:Remotion.Globalization.IResourceManager.ContainsResource(System.String)">
            <summary>Tests whether the <see cref="T:Remotion.Globalization.IResourceManager"/> contains the specified resource.</summary>
            <param name="id">The ID of the resource to look for.</param>
            <returns><see langword="true"/> if the <see cref="T:Remotion.Globalization.IResourceManager"/> contains the specified resource.</returns>
        </member>
        <member name="M:Remotion.Globalization.IResourceManager.ContainsResource(System.Enum)">
            <summary>Tests whether the <see cref="T:Remotion.Globalization.IResourceManager"/> contains the specified resource.</summary>
            <param name="enumValue">The ID of the resource to look for.</param>
            <returns><see langword="true"/> if the <see cref="T:Remotion.Globalization.IResourceManager"/> contains the specified resource.</returns>
        </member>
        <member name="T:Remotion.Collections.NameObjectCollection">
            <summary>
            Case-sensitive name/object dictionary.
            </summary>
        </member>
        <member name="M:Remotion.Collections.NameObjectCollection.Merge(Remotion.Collections.NameObjectCollection,Remotion.Collections.NameObjectCollection)">
            <summary>
            Merges two collections. If a key occurs in both collections, the value of the second collection is taken.
            </summary>
        </member>
        <member name="M:Remotion.Mixins.TargetClassDefinitionUtility.GetActiveConfiguration(System.Type)">
            <summary>
            Returns a <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> for the a given target type, or <see langword="null"/> if no mixin configuration exists for
            this type.
            </summary>
            <param name="targetOrConcreteType">Base type for which an analyzed mixin configuration should be returned or a concrete mixed type.</param>
            <returns>A non-null <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> for the a given target type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetOrConcreteType"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Mixins.ConfigurationException">The current mixin configuration for the <paramref name="targetOrConcreteType"/> contains severe problems that
            make generation of a <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> object impossible.</exception>
            <exception cref="T:Remotion.Mixins.Validation.ValidationException">The current mixin configuration for the <paramref name="targetOrConcreteType"/> violates at least one validation
            rule, which would make code generation impossible. </exception>
            <remarks>
            <para>
            Use this to retrieve a cached analyzed mixin configuration object for the given target type. The cache is actually maintained by
            <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinitionCache"/>, but this is the public API that should be used instead of directly accessing the cache.
            </para>
            <para>
            Use <see cref="M:Remotion.Mixins.TargetClassDefinitionUtility.GetActiveConfiguration(System.Type,Remotion.Mixins.GenerationPolicy)"/> to force generation of an empty configuration if none currently
            exists for the given type in <see cref="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration"/>.
            </para>
            <para>
            If <paramref name="targetOrConcreteType"/> is already a generated type, no new <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> is created for it.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.TargetClassDefinitionUtility.GetActiveConfiguration(System.Type,Remotion.Mixins.GenerationPolicy)">
            <summary>
            Returns a <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> for the a given target type.
            </summary>
            <param name="targetOrConcreteType">Base type for which an analyzed mixin configuration should be returned or a concrete mixed type.</param>
            <param name="generationPolicy">Defines whether to return <see langword="null"/> or generate an empty default configuration if no mixin
            configuration is available for the given <paramref name="targetOrConcreteType"/>.</param>
            <returns>A <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> for the a given target type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetOrConcreteType"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Mixins.ConfigurationException">The current mixin configuration for the <paramref name="targetOrConcreteType"/> contains severe problems that
            make generation of a <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> object impossible.</exception>
            <exception cref="T:Remotion.Mixins.Validation.ValidationException">The current mixin configuration for the <paramref name="targetOrConcreteType"/> violates at least one validation
            rule, which would make code generation impossible. </exception>
            <remarks>
            <para>
            Use this to retrieve a cached analyzed mixin configuration object for the given target type. The cache is actually maintained by
            <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinitionCache"/>, but this is the public API that should be used instead of directly accessing the cache.
            </para>
            <para>
            Use the <paramref name="generationPolicy"/> parameter to configure whether this method should return an empty but valid
            <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> for types that do not have a mixin configuration in <see cref="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration"/>.
            </para>
            <para>
            If <paramref name="targetOrConcreteType"/> is already a generated type, no new <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> is created for it unless
            <see cref="F:Remotion.Mixins.GenerationPolicy.ForceGeneration"/> is specified.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.TargetClassDefinitionUtility.GetConfiguration(System.Type,Remotion.Mixins.MixinConfiguration)">
            <summary>
            Returns a <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> for the a given target type, or <see langword="null"/> if no mixin configuration exists for
            this type.
            </summary>
            <param name="targetOrConcreteType">Base type for which an analyzed mixin configuration should be returned or a concrete mixed type.</param>
            <param name="mixinConfiguration">The <see cref="T:Remotion.Mixins.MixinConfiguration"/> to use.</param>
            <returns>A <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> for the a given target type, or <see langword="null"/> if no mixin configuration exists for
            the given type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetOrConcreteType"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Mixins.ConfigurationException">The current mixin configuration for the <paramref name="targetOrConcreteType"/> contains severe problems that
            make generation of a <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> object impossible.</exception>
            <exception cref="T:Remotion.Mixins.Validation.ValidationException">The current mixin configuration for the <paramref name="targetOrConcreteType"/> violates at least one validation
            rule, which would make code generation impossible. </exception>
            <remarks>
            <para>
            Use this to retrieve a cached analyzed mixin configuration object for the given target type. The cache is actually maintained by
            <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinitionCache"/>, but this is the public API that should be used instead of directly accessing the cache.
            </para>
            <para>
            Use <see cref="M:Remotion.Mixins.TargetClassDefinitionUtility.GetConfiguration(System.Type,Remotion.Mixins.MixinConfiguration,Remotion.Mixins.GenerationPolicy)"/> to force generation of an empty configuration if none currently
            exists for the given type.
            </para>
            <para>
            If <paramref name="targetOrConcreteType"/> is already a generated type, no new <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> is created for it.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.TargetClassDefinitionUtility.GetConfiguration(System.Type,Remotion.Mixins.MixinConfiguration,Remotion.Mixins.GenerationPolicy)">
            <summary>
            Returns a <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> for the a given target type.
            </summary>
            <param name="targetOrConcreteType">Base type for which an analyzed mixin configuration should be returned or a concrete mixed type.</param>
            <param name="mixinConfiguration">The <see cref="T:Remotion.Mixins.MixinConfiguration"/> to use.</param>
            <param name="generationPolicy">Defines whether to return <see langword="null"/> or generate an empty default configuration if no mixin
            configuration is available for the given <paramref name="targetOrConcreteType"/>.</param>
            <returns>A <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> for the a given target type, or <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetOrConcreteType"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Mixins.ConfigurationException">The current mixin configuration for the <paramref name="targetOrConcreteType"/> contains severe problems that
            make generation of a <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> object impossible.</exception>
            <exception cref="T:Remotion.Mixins.Validation.ValidationException">The current mixin configuration for the <paramref name="targetOrConcreteType"/> violates at least one validation
            rule, which would make code generation impossible. </exception>
            <remarks>
            <para>
            Use this to retrieve a cached analyzed mixin configuration object for the given target type. The cache is actually maintained by
            <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinitionCache"/>, but this is the public API that should be used instead of directly accessing the cache.
            </para>
            <para>
            Use the <paramref name="generationPolicy"/> parameter to configure whether this method should return an empty but valid
            <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> for types that do not have a mixin configuration in <paramref name="mixinConfiguration"/>.
            </para>
            <para>
            If <paramref name="targetOrConcreteType"/> is already a generated type, no new <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> is created for it unless
            <see cref="F:Remotion.Mixins.GenerationPolicy.ForceGeneration"/> is specified.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.TargetClassDefinitionUtility.GetContext(System.Type,Remotion.Mixins.MixinConfiguration,Remotion.Mixins.GenerationPolicy)">
            <summary>
            Returns a <see cref="T:Remotion.Mixins.Context.ClassContext"/> for the a given target type.
            </summary>
            <param name="targetOrConcreteType">Base type for which a context should be returned or a concrete mixed type.</param>
            <param name="mixinConfiguration">The <see cref="T:Remotion.Mixins.MixinConfiguration"/> to use.</param>
            <param name="generationPolicy">Defines whether to return <see langword="null"/> or generate an empty default configuration if no mixin
            configuration is available for the given <paramref name="targetOrConcreteType"/>.</param>
            <returns>A <see cref="T:Remotion.Mixins.Context.ClassContext"/> for the a given target type, or <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetOrConcreteType"/> parameter is <see langword="null"/>.</exception>
            <remarks>
            <para>
            Use this to extract a class context for a given target type from an <see cref="T:Remotion.Mixins.MixinConfiguration"/> as it would be used to create the
            <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> object for the target type. Besides looking up the target type in the given mixin configuration, this
            includes generating a default context if <see cref="F:Remotion.Mixins.GenerationPolicy.ForceGeneration"/> is specified and the specialization of generic
            arguments in the class context, if any.
            </para>
            <para>
            Use the <paramref name="generationPolicy"/> parameter to configure whether this method should return an empty but valid
            <see cref="T:Remotion.Mixins.Context.ClassContext"/> for types that do not have a mixin configuration in the <paramref name="mixinConfiguration"/>.
            </para>
            <para>
            If <paramref name="targetOrConcreteType"/> is already a generated type, the <see cref="T:Remotion.Mixins.Context.ClassContext"/> used for its generation is returned unless
            <see cref="F:Remotion.Mixins.GenerationPolicy.ForceGeneration"/> is specified.
            </para>
            </remarks>
        </member>
        <member name="T:Remotion.Globalization.ResourceManagerResolverUtility">
            <summary>
            Encapsulates the algorithms used to access resource containers defined by resource attributes.
            </summary>
            <remarks>
            This class is an attribute type-agnostic encapsulation of the algorithms used by <see cref="T:Remotion.Globalization.MultiLingualResources"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Globalization.IResourceManagerResolverUtility.GetResourceText``1(Remotion.Globalization.ResourceManagerResolver{``0},System.Type,System.String)">
            <summary>
              Loads a string resource for a given type, identified by ID.
            </summary>
            <param name="resolver">The resolver to use.</param>
            <param name="objectTypeToGetResourceFor">
              The type for which to get the resource.
            </param>
            <param name="name"> The ID of the resource. </param>
            <returns> The found string resource or an empty string. </returns>
        </member>
        <member name="M:Remotion.Globalization.IResourceManagerResolverUtility.ExistsResourceText``1(Remotion.Globalization.ResourceManagerResolver{``0},System.Type,System.String)">
            <summary>
              Checks for the existence of a string resource for the specified type, identified by ID.
            </summary>
            <param name="resolver">The resolver to use.</param>
            <param name="objectTypeToGetResourceFor">
              The <see cref="T:System.Type"/> for which to check the resource.
            </param>
            <param name="name"> The ID of the resource. </param>
            <returns> <see langword="true"/> if the resource can be found. </returns>
        </member>
        <member name="M:Remotion.Globalization.IResourceManagerResolverUtility.ExistsResource``1(Remotion.Globalization.ResourceManagerResolver{``0},System.Type)">
            <summary>
              Checks for the existence of a resource set for the specified type.
            </summary>
            <param name="resolver">The resolver to use.</param>
            <param name="objectTypeToGetResourceFor">
              The <see cref="T:System.Type"/> for which to check for the resource set.
            </param>
            <returns> <see langword="true"/> if the resource ser can be found. </returns>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerResolverUtility.GetResourceText``1(Remotion.Globalization.ResourceManagerResolver{``0},System.Type,System.String)">
            <summary>
              Loads a string resource for a given type, identified by ID.
            </summary>
            <param name="resolver">The resolver to use.</param>
            <param name="objectTypeToGetResourceFor">
              The type for which to get the resource.
            </param>
            <param name="name"> The ID of the resource. </param>
            <returns> The found string resource or an empty string. </returns>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerResolverUtility.ExistsResourceText``1(Remotion.Globalization.ResourceManagerResolver{``0},System.Type,System.String)">
            <summary>
              Checks for the existence of a string resource for the specified type, identified by ID.
            </summary>
            <param name="resolver">The resolver to use.</param>
            <param name="objectTypeToGetResourceFor">
              The <see cref="T:System.Type"/> for which to check the resource.
            </param>
            <param name="name"> The ID of the resource. </param>
            <returns> <see langword="true"/> if the resource can be found. </returns>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerResolverUtility.ExistsResource``1(Remotion.Globalization.ResourceManagerResolver{``0},System.Type)">
            <summary>
              Checks for the existence of a resource set for the specified type.
            </summary>
            <param name="resolver">The resolver to use.</param>
            <param name="objectTypeToGetResourceFor">
              The <see cref="T:System.Type"/> for which to check for the resource set.
            </param>
            <returns> <see langword="true"/> if the resource ser can be found. </returns>
        </member>
        <member name="T:Remotion.DoubleCheckedLockingContainer`1">
            <summary>Provides a standard implementation of the double checked locking pattern.</summary>
            <typeparam name="T">The type encapsulated by the <see cref="T:Remotion.DoubleCheckedLockingContainer`1"/>.</typeparam>
            <remarks>Initialize the container during the construction of the parent object and assign the value using the <see cref="P:Remotion.DoubleCheckedLockingContainer`1.Value"/> property.</remarks>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Remotion.DoubleCheckedLockingContainer`1.#ctor(System.Func{`0})">
            <summary>Initializes a new instance of the <see cref="T:Remotion.DoubleCheckedLockingContainer`1"/> type.</summary>
            <param name="defaultFactory">The delegate used to create the default value in case the value is <see langword="null"/>.</param>
        </member>
        <member name="P:Remotion.DoubleCheckedLockingContainer`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has already gotten a value.
            </summary>
            <value>true if this instance has a value; otherwise, false.</value>
        </member>
        <member name="P:Remotion.DoubleCheckedLockingContainer`1.Value">
            <summary>Gets or sets the object encapsulated by the <see cref="T:Remotion.DoubleCheckedLockingContainer`1"/>.</summary>
            <value>
            The object assigned via the set accessor<br/>or,<br/>
            if the value is <see langword="null"/>, the object created by the <b>defaultFactory</b> assigned during the initialization of the container.
            </value>
        </member>
        <member name="T:Remotion.Design.EnvDteDesignModeHelper">
            <summary>
            Implementation of the <see cref="T:Remotion.Design.IDesignModeHelper"/> interface for the <b>EnvDTE</b> (i.e. Visual Studio) designer.
            </summary>
            <remarks>
            <see cref="M:Remotion.Design.EnvDteDesignModeHelper.GetConfiguration"/> is hard coded to look up a configuration file named <c>app.config</c>.
            </remarks>
        </member>
        <member name="T:Remotion.Design.DesignModeHelperBase">
            <summary>
            Base implementation of the <see cref="T:Remotion.Design.IDesignModeHelper"/> interface.
            </summary>
        </member>
        <member name="T:Remotion.Collections.InterlockedCache`2">
            <summary>
            A simple thread-safe cache.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.CodeGeneration.GeneratedMethodWrapperAttribute">
            <summary>
            Marks a generated method as a public wrapper for another method.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.BidirectionalStringConverter">
            <summary> Specialization of <see cref="T:System.ComponentModel.TypeConverter"/> for conversions from and to <see cref="T:System.String"/>. </summary>
            <remarks>
              <para>
                Conversions from <see cref="T:System.Single"/> and <see cref="T:System.Double"/> are done using "R" as format string. 
              </para><para>
                Conversion is possible under the following conditions:
              </para>
              <list type="bullet">
                <item>
                  The <see cref="T:System.Type"/> is <see cref="T:System.Guid"/> or <see cref="T:System.DBNull"/>
                </item>
                <item>
                  The <see cref="T:System.Type"/> is an array of scalar values.
                </item>
                <item>
                  A <see cref="T:System.Type"/> implements either a 
                  public <see langword="static"/> &lt;DestinationType&gt; Parse (string) or a 
                  public <see langword="static"/> &lt;DestinationType&gt; Parse (string, IFormatProvider) method.
                </item>
              </list>
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.BidirectionalStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> Test: Can convert from <paramref name="sourceType"/> to <see cref="T:System.String"/>? </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="sourceType"> 
              The <see cref="T:System.Type"/> of the value to be converted into a <see cref="T:System.String"/>.
            </param>
            <returns> <see langword="true"/> if the conversion is supported. </returns>
        </member>
        <member name="M:Remotion.Utilities.BidirectionalStringConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> Test: Can convert from <see cref="T:System.String"/> to <paramref name="destinationType"/>? </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="destinationType"> The <see cref="T:System.Type"/>  to convert a <see cref="T:System.String"/> value to. </param>
            <returns> <see langword="true"/> if the conversion is supported. </returns>
        </member>
        <member name="M:Remotion.Utilities.BidirectionalStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary> Converts <paramref name="value"/> into a <see cref="T:System.String"/>. </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="culture"> The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param>
            <param name="value">  The source value. </param>
            <returns> A <see cref="T:System.String"/>.  </returns>
            <exception cref="T:System.NotSupportedException"> The conversion could not be performed. </exception>
            <remarks>
              Conversions from <see cref="T:System.Single"/> and <see cref="T:System.Double"/> are done using "R" as format string. 
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.BidirectionalStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary> Convertes a <see cref="T:System.String"/> into the <paramref name="destinationType"/>. </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="culture"> The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param>
            <param name="value"> The <see cref="T:System.String"/> to be converted. </param>
            <param name="destinationType"> The destination <see cref="T:System.Type"/>. Must not be <see langword="null"/>. </param>
            <returns> An <see cref="T:System.Object"/> that represents the converted value. </returns>
            <exception cref="T:System.NotSupportedException"> The conversion could not be performed. </exception>
        </member>
        <member name="M:Remotion.Utilities.BidirectionalStringConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              Returns whether the collection of standard values returned by 
              <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exclusive list.
            </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <returns> <see langword="false"/>. </returns>
        </member>
        <member name="M:Remotion.Utilities.BidirectionalStringConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary> Returns whether this object supports a standard set of values that can be picked from a list. </summary>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <returns> <see langword="false"/>. </returns>
        </member>
        <member name="T:Remotion.Utilities.EqualityUtility">
            <summary>
            Provides methods for determining equality and hash codes.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.SafeGetHashCode``1(``0)">
            <summary>
            Gets an object's hash code or null, if the object is <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``2(``0,``1)">
            <summary>
      Gets the hash code of the individual arguments, XOR'd with bits rotated.
    </summary><remarks>
      <para>
        This method XOR's the hash codes of all individual arguments in order to create a compound hash code
        for the entire set of arguments. Between XOR's, the compound hash code is rotated by 11 bits in order
        to better distribute hash codes of types that aggregate their hash results toward the least-significant
        side of the result (small numbers, booleans).
      </para>
      <para>
        Overloads with type arguments are identical to the object-array version, they only reduce the amount
        of boxing going on (better performance).
      </para>
    </remarks>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``3(``0,``1,``2)">
            <summary>
      Gets the hash code of the individual arguments, XOR'd with bits rotated.
    </summary><remarks>
      <para>
        This method XOR's the hash codes of all individual arguments in order to create a compound hash code
        for the entire set of arguments. Between XOR's, the compound hash code is rotated by 11 bits in order
        to better distribute hash codes of types that aggregate their hash results toward the least-significant
        side of the result (small numbers, booleans).
      </para>
      <para>
        Overloads with type arguments are identical to the object-array version, they only reduce the amount
        of boxing going on (better performance).
      </para>
    </remarks>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``4(``0,``1,``2,``3)">
            <summary>
      Gets the hash code of the individual arguments, XOR'd with bits rotated.
    </summary><remarks>
      <para>
        This method XOR's the hash codes of all individual arguments in order to create a compound hash code
        for the entire set of arguments. Between XOR's, the compound hash code is rotated by 11 bits in order
        to better distribute hash codes of types that aggregate their hash results toward the least-significant
        side of the result (small numbers, booleans).
      </para>
      <para>
        Overloads with type arguments are identical to the object-array version, they only reduce the amount
        of boxing going on (better performance).
      </para>
    </remarks>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``5(``0,``1,``2,``3,``4)">
            <summary>
      Gets the hash code of the individual arguments, XOR'd with bits rotated.
    </summary><remarks>
      <para>
        This method XOR's the hash codes of all individual arguments in order to create a compound hash code
        for the entire set of arguments. Between XOR's, the compound hash code is rotated by 11 bits in order
        to better distribute hash codes of types that aggregate their hash results toward the least-significant
        side of the result (small numbers, booleans).
      </para>
      <para>
        Overloads with type arguments are identical to the object-array version, they only reduce the amount
        of boxing going on (better performance).
      </para>
    </remarks>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``6(``0,``1,``2,``3,``4,``5)">
            <summary>
      Gets the hash code of the individual arguments, XOR'd with bits rotated.
    </summary><remarks>
      <para>
        This method XOR's the hash codes of all individual arguments in order to create a compound hash code
        for the entire set of arguments. Between XOR's, the compound hash code is rotated by 11 bits in order
        to better distribute hash codes of types that aggregate their hash results toward the least-significant
        side of the result (small numbers, booleans).
      </para>
      <para>
        Overloads with type arguments are identical to the object-array version, they only reduce the amount
        of boxing going on (better performance).
      </para>
    </remarks>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
      Gets the hash code of the individual arguments, XOR'd with bits rotated.
    </summary><remarks>
      <para>
        This method XOR's the hash codes of all individual arguments in order to create a compound hash code
        for the entire set of arguments. Between XOR's, the compound hash code is rotated by 11 bits in order
        to better distribute hash codes of types that aggregate their hash results toward the least-significant
        side of the result (small numbers, booleans).
      </para>
      <para>
        Overloads with type arguments are identical to the object-array version, they only reduce the amount
        of boxing going on (better performance).
      </para>
    </remarks>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode(System.Object[])">
            <summary>
      Gets the hash code of the individual arguments, XOR'd with bits rotated.
    </summary><remarks>
      <para>
        This method XOR's the hash codes of all individual arguments in order to create a compound hash code
        for the entire set of arguments. Between XOR's, the compound hash code is rotated by 11 bits in order
        to better distribute hash codes of types that aggregate their hash results toward the least-significant
        side of the result (small numbers, booleans).
      </para>
      <para>
        Overloads with type arguments are identical to the object-array version, they only reduce the amount
        of boxing going on (better performance).
      </para>
    </remarks>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode(System.Collections.IEnumerable)">
            <summary>
            Gets the rotated hash code for an enumeration of objects.
            </summary>
            <param name="objects">The objects whose combined hash code should be calculated.</param>
            <returns>The rotate-combined hash codes of the <paramref name="objects"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="objects"/> parameter was <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetXorHashCode(System.Collections.IEnumerable)">
            <summary>
            Gets a hash code for the given enumerable. The hash code is calculated by combining the hash codes of the enumerated objects using the
            XOR operation. This is usually suboptimal to <see cref="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode(System.Collections.IEnumerable)"/> unless the ordering of enumerated objects
            should explicitly be ignored.
            </summary>
            <param name="objects">The object enumeration for which a hash code should be calculated.</param>
            <returns>The combined hash code of all objects in the enumeration.</returns>
            <remarks>For a given set of objects, this method will always return the same value, regardless of the objects' order.</remarks>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.EqualsEquatable``1(``0,``0)">
            <summary>
            Returns whether two equatable objects are equal.
            </summary>
            <remarks>
            Similar to <see cref="M:Remotion.Utilities.EqualityUtility.Equals``1(``0,``0)"/>, but without any boxing (better performance). 
            Equatable objects implement the <see cref="T:System.IEquatable`1"/> interface. 
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.EqualsEquatable``1(``0,System.Object)">
            <summary>
            Returns whether an equatable object equals another object.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.EqualsEquatableValue``1(``0,System.Object)">
            <summary>
            Returns whether an equatable value-type object equals another object.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.Equals``1(``0,``0)">
            <summary>
            Returns whether two objects are equal.
            </summary>
            <remarks>
            Similar to <see cref="M:System.Object.Equals(System.Object,System.Object)"/>, only with less boxing going on (better performance).
            </remarks>
        </member>
        <member name="T:Remotion.Utilities.ConsoleApplication.IApplicationRunner`1">
            <summary>
            Interface for application classes turned into console applications by "wrapping" them in a 
            <see cref="T:Remotion.Utilities.ConsoleApplication.ConsoleApplicationSettings"/>.
            </summary>
            <typeparam name="TApplicationSettings">The settings-class for the for the application. 
            Needs to derive from <see cref="T:Remotion.Utilities.ConsoleApplication.ConsoleApplication`2"/>.</typeparam>
        </member>
        <member name="T:Remotion.Utilities.AppDomainRunnerBase">
            <summary>
            Base class for executing code in a separate <see cref="T:System.AppDomain"/>.
            </summary>
        </member>
        <member name="T:Remotion.Configuration.ConfigurationWrapperFromConfigurationManager">
            <summary>
            Concrete implementation of <see cref="T:Remotion.Configuration.ConfigurationWrapper"/> that uses the <see cref="T:System.Configuration.ConfigurationManager"/>. Create the instance by
            invoking <see cref="M:Remotion.Configuration.ConfigurationWrapper.CreateFromConfigurationManager"/>.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.Property`2">
            <summary>
            Wrapper around the property of a class, which allows the property to exist indepently of any
            concrete instance of the class.
            </summary>
            <remarks>For an application example see <see cref="T:Remotion.Reflection.Property`2"/>.</remarks>
            <typeparam name="TClass">The class for which we want to create the <see cref="T:Remotion.Reflection.Properties`1"/> object.</typeparam>
            <typeparam name="TProperty">The return value of the property.</typeparam>
            <example>
            <code>
            <![CDATA[
            var userNameProperty = new Property<User, string> (x => x.UserName);
            var userName = userNameProperty.Get(user);
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderArrayHandler">
            <summary>
            Handles <see cref="T:System.Array"/> instances in <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>'s <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToText(System.Object,Remotion.Diagnostics.ToText.IToTextBuilder)"/> fallback cascade.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.WorkContext">
            <summary>
              Provides context information for error messages.
            </summary>
            <remarks>
      <para>
        Exceptions contain a stack trace of the time the exception was thrown, so it is easy to identify the code that 
        caused the exception. However, there is no information as to which data this code was processing, or which 
        iteration
        of a certain loop caused a problem. For programs that process large amount of data and fail for specific data, 
        it 
        can be tedious to find the state or data that caused an error. 
      <para></para>
        WorkContexts provide an easy way to specify which data is currently being processed. In an exception handling 
        block,
        the current context stack can be used to get diagnostic information about the state of the application when the
        exception occured. 
      </para>
    </remarks><example>
      The following example demonstrates the use of WorkContexts to provide information about the data that is currently
       being
      processed. Note the <c>using</c> statement and the call to <see cref="M:Remotion.Utilities.WorkContext.Done"/>. 
      <code><![CDATA[
void f (string[] document)
{
  try
  {
    for (int i = 0; i < document.Lenght; ++i)
    {
      using (WorkContext ctxLine = WorkContext.EnterNew ("Processing line {0}: \"{1}\".", i, line[i]))
      {
        Console.WriteLine (line[i].Trim()); // this causes a NullReferenceException if line[i] is a null reference
        ctxLine.Done();
      }
    }
}
catch (Exception e)
{
  Console.WriteLine ("Error \"{0}\" occured during:\n{1}", e.Message, WorkContext.Stack);
}
      ]]></code>
    </example>
        </member>
        <member name="F:Remotion.Utilities.WorkContext.s_stack">
            <summary> Stack&lt;WorkContext&gt; </summary>
        </member>
        <member name="M:Remotion.Utilities.WorkContext.EnterNew(System.String)">
            <summary>
            Creates a new context and puts it on the stack.
            </summary>
            <param name="text">The description of the context.</param>
        </member>
        <member name="M:Remotion.Utilities.WorkContext.EnterNew(System.String,System.Object[])">
            <summary>
            Creates a new context and puts it on the stack.
            </summary>
            <param name="format">A string containing zero or more format items for the description of the context.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Remotion.Utilities.WorkContext.Enter(System.String)">
            <summary>
            Enters a context.
            </summary>
            <remarks>
        Instead of creating a new <see cref="T:Remotion.Utilities.WorkContext"/> and entering it using this method, you can use the 
        <see langword="static"/> method <see cref="M:Remotion.Utilities.WorkContext.EnterNew(System.String)"/>. Using <see cref="M:Remotion.Utilities.WorkContext.Enter(System.String)"/> makes sense if the call is 
        conditional, especially if you use the methods <see cref="M:Remotion.Utilities.WorkContext.EnterIfDebug(System.String)"/> or <see cref="M:Remotion.Utilities.WorkContext.EnterIfTrace(System.String)"/>.
      </remarks>
            <param name="text">The description of the context.</param>
        </member>
        <member name="M:Remotion.Utilities.WorkContext.Enter(System.String,System.Object[])">
            <summary>
            Enters a context.
            </summary>
            <remarks>
        Instead of creating a new <see cref="T:Remotion.Utilities.WorkContext"/> and entering it using this method, you can use the 
        <see langword="static"/> method <see cref="M:Remotion.Utilities.WorkContext.EnterNew(System.String)"/>. Using <see cref="M:Remotion.Utilities.WorkContext.Enter(System.String)"/> makes sense if the call is 
        conditional, especially if you use the methods <see cref="M:Remotion.Utilities.WorkContext.EnterIfDebug(System.String)"/> or <see cref="M:Remotion.Utilities.WorkContext.EnterIfTrace(System.String)"/>.
      </remarks>
            <param name="format">A string containing zero or more format items for the description of the context.</param><param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Remotion.Utilities.WorkContext.EnterIfDebug(System.String)">
            <summary>
            Enters a context. Calls to this method are only compiled if the symbol DEBUG is defined.
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>
            </summary>
            <remarks>
        Instead of creating a new <see cref="T:Remotion.Utilities.WorkContext"/> and entering it using this method, you can use the 
        <see langword="static"/> method <see cref="M:Remotion.Utilities.WorkContext.EnterNew(System.String)"/>. Using <see cref="M:Remotion.Utilities.WorkContext.Enter(System.String)"/> makes sense if the call is 
        conditional, especially if you use the methods <see cref="M:Remotion.Utilities.WorkContext.EnterIfDebug(System.String)"/> or <see cref="M:Remotion.Utilities.WorkContext.EnterIfTrace(System.String)"/>.
      </remarks>
            <param name="text">The description of the context.</param>
        </member>
        <member name="M:Remotion.Utilities.WorkContext.EnterIfDebug(System.String,System.Object[])">
            <summary>
            Enters a context. Calls to this method are only compiled if the symbol DEBUG is defined.
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>
            </summary>
            <remarks>
        Instead of creating a new <see cref="T:Remotion.Utilities.WorkContext"/> and entering it using this method, you can use the 
        <see langword="static"/> method <see cref="M:Remotion.Utilities.WorkContext.EnterNew(System.String)"/>. Using <see cref="M:Remotion.Utilities.WorkContext.Enter(System.String)"/> makes sense if the call is 
        conditional, especially if you use the methods <see cref="M:Remotion.Utilities.WorkContext.EnterIfDebug(System.String)"/> or <see cref="M:Remotion.Utilities.WorkContext.EnterIfTrace(System.String)"/>.
      </remarks>
            <param name="format">A string containing zero or more format items for the description of the context.</param><param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Remotion.Utilities.WorkContext.EnterIfTrace(System.String)">
            <summary>
            Enters a context. Calls to this method are only compiled if the symbol TRACE is defined.
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>
            </summary>
            <remarks>
        Instead of creating a new <see cref="T:Remotion.Utilities.WorkContext"/> and entering it using this method, you can use the 
        <see langword="static"/> method <see cref="M:Remotion.Utilities.WorkContext.EnterNew(System.String)"/>. Using <see cref="M:Remotion.Utilities.WorkContext.Enter(System.String)"/> makes sense if the call is 
        conditional, especially if you use the methods <see cref="M:Remotion.Utilities.WorkContext.EnterIfDebug(System.String)"/> or <see cref="M:Remotion.Utilities.WorkContext.EnterIfTrace(System.String)"/>.
      </remarks>
            <param name="text">The description of the context.</param>
        </member>
        <member name="M:Remotion.Utilities.WorkContext.EnterIfTrace(System.String,System.Object[])">
            <summary>
            Enters a context. Calls to this method are only compiled if the symbol TRACE is defined.
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>
            </summary>
            <remarks>
        Instead of creating a new <see cref="T:Remotion.Utilities.WorkContext"/> and entering it using this method, you can use the 
        <see langword="static"/> method <see cref="M:Remotion.Utilities.WorkContext.EnterNew(System.String)"/>. Using <see cref="M:Remotion.Utilities.WorkContext.Enter(System.String)"/> makes sense if the call is 
        conditional, especially if you use the methods <see cref="M:Remotion.Utilities.WorkContext.EnterIfDebug(System.String)"/> or <see cref="M:Remotion.Utilities.WorkContext.EnterIfTrace(System.String)"/>.
      </remarks>
            <param name="format">A string containing zero or more format items for the description of the context.</param><param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Remotion.Utilities.WorkContext.EnterIfWorkContext(System.String)">
            <summary>
            Enters a context. Calls to this method are only compiled if the symbol WORKCONTEXT is defined.
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>
            </summary>
            <remarks>
        Instead of creating a new <see cref="T:Remotion.Utilities.WorkContext"/> and entering it using this method, you can use the 
        <see langword="static"/> method <see cref="M:Remotion.Utilities.WorkContext.EnterNew(System.String)"/>. Using <see cref="M:Remotion.Utilities.WorkContext.Enter(System.String)"/> makes sense if the call is 
        conditional, especially if you use the methods <see cref="M:Remotion.Utilities.WorkContext.EnterIfDebug(System.String)"/> or <see cref="M:Remotion.Utilities.WorkContext.EnterIfTrace(System.String)"/>.
      </remarks>
            <param name="text">The description of the context.</param>
        </member>
        <member name="M:Remotion.Utilities.WorkContext.EnterIfWorkContext(System.String,System.Object[])">
            <summary>
            Enters a context. Calls to this method are only compiled if the symbol WORKCONTEXT is defined.
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>
            </summary>
            <remarks>
        Instead of creating a new <see cref="T:Remotion.Utilities.WorkContext"/> and entering it using this method, you can use the 
        <see langword="static"/> method <see cref="M:Remotion.Utilities.WorkContext.EnterNew(System.String)"/>. Using <see cref="M:Remotion.Utilities.WorkContext.Enter(System.String)"/> makes sense if the call is 
        conditional, especially if you use the methods <see cref="M:Remotion.Utilities.WorkContext.EnterIfDebug(System.String)"/> or <see cref="M:Remotion.Utilities.WorkContext.EnterIfTrace(System.String)"/>.
      </remarks>
            <param name="format">A string containing zero or more format items for the description of the context.</param><param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Remotion.Utilities.WorkContext.System#IDisposable#Dispose">
            <summary>
            Leaves the context.
            <seealso cref="M:Remotion.Utilities.WorkContext.Leave"/>.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.WorkContext.Leave">
            <summary>
              Leaves the context.
            </summary>
            <remarks>
              <para>
              The context is left, but remains on the stack until the method <see cref="M:Remotion.Utilities.WorkContext.Done"/> is called, or a new context is 
              entered. Therefore, the left context is still available for inspection (e.g. in an exception handling block).
              </para><para>
              A context that is left, but not done, is prefixed with a question mark in the context stack output. Use this 
              information if you are not sure whether all calls to <see cref="M:Remotion.Utilities.WorkContext.Done"/> were coded correctly.
              </para><para>
              In C# it is generally recommended to use a <c>using</c> statement rather than calling <c>Leave</c> explicitly.
              </para>
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.WorkContext.Done">
            <summary>
              Marks the context as done.
            </summary>
            <remarks>
              <para>
                Call this method if the work within a context has been processed successfully (i.e., no uncaught exception has been 
                raised).
              <para></para>
                For C# users, it is recommended to call this method at the end of the <c>using</c> block that contains the context.
              </para>
            </remarks>
        </member>
        <member name="P:Remotion.Utilities.WorkContext.EnableTracing">
            <summary>
            Use this flag to specify (or learn) whether trace output should be generated when contexts are entered, left or done.
            </summary>
            <remarks>
      The default value is <see langword="false"/>. You can change this value in your code, or use the 
      "Remotion.WorkContext.EnableTracing" 
      appSettings key in your application's configuration file to set it to <see langword="true"/>.
    </remarks><example>
      <code><![CDATA[
<configuration>
  <appSettings>
    <add key="Remotion.WorkContext.EnableTracing" value="true" />
  </appSettings>
</configuration>
      ]]></code>
    </example>
        </member>
        <member name="P:Remotion.Utilities.WorkContext.Stack">
            <summary>
              Gets the work context stack of the current thread.
            </summary>
            <remarks>
              The stack provides diagnostic information about the current execution context.
            </remarks>
        </member>
        <member name="P:Remotion.Utilities.WorkContext.Text">
            <summary>
            The description of the context.
            </summary>
        </member>
        <member name="F:Remotion.Utilities.WorkContext.ContextStack._stack">
            <summary> ArrayList &lt;WorkContext&gt; </summary>
        </member>
        <member name="M:Remotion.Utilities.WorkContext.ContextStack.ToArray">
            <summary>
              Returns the context stack as an array of WorkContext objects.
            </summary>
            <returns>
              The items on the context thread, with the top-level stack items first.
            </returns>
        </member>
        <member name="M:Remotion.Utilities.WorkContext.ContextStack.ToString">
            <summary>
              Returns a string representation of the context stack.
            </summary>
            <returns>
              An string with the description of each context on the stack on a separate line. Top-level contexts appear first.
              Contexts that are already left, but not done, are marked with a question mark. See <see cref="M:Remotion.Utilities.WorkContext.ContextStack.Leave(Remotion.Utilities.WorkContext)"/> and 
              <see cref="M:Remotion.Utilities.WorkContext.Done"/>.
            </returns>
        </member>
        <member name="P:Remotion.Utilities.WorkContext.ContextStack.LastLeft">
            <summary>
              The last WorkContext on the stack that was left by calling <see cref="M:Remotion.Utilities.WorkContext.ContextStack.Leave(Remotion.Utilities.WorkContext)"/>.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.TypeUtility">
            <summary>
            Utility methods for handling types.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.TypeUtility.ParseAbbreviatedTypeName(System.String)">
            <summary>
              Converts abbreviated qualified type names into standard qualified type names.
            </summary>
            <remarks>
              Abbreviated type names use the format <c>assemblyname::subnamespace.type</c>. For instance, the
              abbreviated type name <c>"Remotion.Web::Utilities.ControlHelper"</c> would result in the standard
              type name <c>"Remotion.Web.Utilities.ControlHelper, Remotion.Web"</c>.
            </remarks>
            <param name="abbreviatedTypeName"> A standard or abbreviated type name. </param>
            <returns> A standard type name as expected by <see cref="M:System.Type.GetType(System.String)"/>. </returns>
        </member>
        <member name="M:Remotion.Utilities.TypeUtility.GetType(System.String)">
            <summary>
              Loads a type, optionally using an abbreviated type name as defined in <see cref="M:Remotion.Utilities.TypeUtility.ParseAbbreviatedTypeName(System.String)"/>.
            </summary>
            <remarks>
            This method uses <see cref="T:Remotion.Reflection.ContextAwareTypeDiscoveryUtility"/>. By default, it will search all assemblies for the requested type.
            In the designer context, <see cref="T:System.ComponentModel.Design.IDesignerHost"/> is used for the lookup.
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.TypeUtility.GetType(System.String,System.Boolean)">
            <summary>
              Loads a type, optionally using an abbreviated type name as defined in <see cref="M:Remotion.Utilities.TypeUtility.ParseAbbreviatedTypeName(System.String)"/>.
            </summary>
            <remarks>
            This method uses <see cref="T:Remotion.Reflection.ContextAwareTypeDiscoveryUtility"/>. By default, it will search all assemblies for the requested type.
            In the designer context, <see cref="T:System.ComponentModel.Design.IDesignerHost"/> is used for the lookup.
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.TypeUtility.GetType(System.String,System.Boolean,System.Boolean)">
            <summary>
              Loads a type, optionally using an abbreviated type name as defined in <see cref="M:Remotion.Utilities.TypeUtility.ParseAbbreviatedTypeName(System.String)"/>.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.TypeUtility.GetAbbreviatedTypeName(System.Type,System.Boolean)">
            <summary>
            Gets the type name in abbreviated syntax (<see cref="M:Remotion.Utilities.TypeUtility.ParseAbbreviatedTypeName(System.String)"/>).
            </summary>
        </member>
        <member name="T:Remotion.Utilities.TypeUtility.AbbreviationParser">
            <summary>
            The implementation of <see cref="M:Remotion.Utilities.TypeUtility.ParseAbbreviatedTypeName(System.String)"/>, implemented in a nested class in order to prevent unnecessary
            initialization of pre-compiled regular expressions.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.AdvancedEnumConverter">
            <summary> Specialization of <see cref="T:System.ComponentModel.TypeConverter"/> for conversions from and to <see cref="T:System.Enum"/> types. </summary>
        </member>
        <member name="M:Remotion.Utilities.AdvancedEnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> Test: Can convert from <paramref name="sourceType"/> to <see cref="T:System.String"/>? </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="sourceType"> The <see cref="T:System.Type"/> of the value to be converted into an <see cref="T:System.Enum"/> type. </param>
            <returns> <see langword="true"/> if the conversion is supported. </returns>
        </member>
        <member name="M:Remotion.Utilities.AdvancedEnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> Test: Can convert from <see cref="T:System.String"/> to <paramref name="destinationType"/>? </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="destinationType"> The <see cref="T:System.Type"/> to convert an <see cref="T:System.Enum"/> value to. </param>
            <returns> <see langword="true"/> if the conversion is supported. </returns>
        </member>
        <member name="M:Remotion.Utilities.AdvancedEnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary> Converts <paramref name="value"/> into an <see cref="T:System.Enum"/> value. </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="culture"> The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param>
            <param name="value"> The source value. </param>
            <returns> An <see cref="T:System.Enum"/> value.  </returns>
            <exception cref="T:System.NotSupportedException"> The conversion could not be performed. </exception>
        </member>
        <member name="M:Remotion.Utilities.AdvancedEnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary> Convertes an <see cref="T:System.Enum"/> value into the <paramref name="destinationType"/>. </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="culture"> The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param>
            <param name="value"> The <see cref="T:System.Enum"/> value to be converted. </param>
            <param name="destinationType"> The destination <see cref="T:System.Type"/>. Must not be <see langword="null"/>. </param>
            <returns> An <see cref="T:System.Object"/> that represents the converted value. </returns>
            <exception cref="T:System.NotSupportedException"> The conversion could not be performed. </exception>
        </member>
        <member name="T:Remotion.Text.CommandLine.CommandLineArgumentCollection">
            <summary>
            A collection of <see cref="T:Remotion.Text.CommandLine.CommandLineArgument"/> objects.
            </summary>
        </member>
        <member name="T:Remotion.Mixins.Context.ClassContext">
            <summary>
            Holds the mixin configuration information for a single mixin target class.
            </summary>
            <threadsafety static="true" instance="true"/>
            <remarks>
            Instances of this class are immutable.
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.Context.ClassContext.#ctor(System.Type,System.Collections.Generic.IEnumerable{Remotion.Mixins.Context.MixinContext},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new <see cref="T:Remotion.Mixins.Context.ClassContext"/> for a given mixin target type.
            </summary>
            <param name="type">The mixin target type to be represented by this context.</param>
            <param name="mixins">A list of <see cref="T:Remotion.Mixins.Context.MixinContext"/> objects representing the mixins applied to this class.</param>
            <param name="completeInterfaces">The complete interfaces supported by the class.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Mixins.Context.ClassContext.#ctor(System.Type)">
            <summary>
            Initializes a new <see cref="T:Remotion.Mixins.Context.ClassContext"/> for a given target type without mixins.
            </summary>
            <param name="type">The mixin target type to be represented by this context.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Mixins.Context.ClassContext.#ctor(System.Type,Remotion.Mixins.Context.MixinContext[])">
            <summary>
            Initializes a new <see cref="T:Remotion.Mixins.Context.ClassContext"/> for a given mixin target type.
            </summary>
            <param name="type">The mixin target type to be represented by this context.</param>
            <param name="mixins">A list of <see cref="T:Remotion.Mixins.Context.MixinContext"/> objects representing the mixins applied to this class.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Mixins.Context.ClassContext.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new <see cref="T:Remotion.Mixins.Context.ClassContext"/> for a given mixin target type and initializes it to be associated with the given
            mixin types.
            </summary>
            <param name="type">The mixin target type to be represented by this context.</param>
            <param name="mixinTypes">The mixin types to be associated with this context.</param>
            <exception cref="T:System.ArgumentNullException">One of the parameters passed to this method is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="mixinTypes"/> parameter contains duplicates.</exception>
        </member>
        <member name="M:Remotion.Mixins.Context.ClassContext.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:Remotion.Mixins.Context.ClassContext"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with this <see cref="T:Remotion.Mixins.Context.ClassContext"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"></see> is a <see cref="T:Remotion.Mixins.Context.ClassContext"/> for the same type with equal mixin 
            and complete interfaces configuration; otherwise, false.
            </returns>
        </member>
        <member name="M:Remotion.Mixins.Context.ClassContext.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:Remotion.Mixins.Context.ClassContext"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Remotion.Mixins.Context.ClassContext"/> which includes the hash codes of this object's complete interfaces and mixin ocntexts.
            </returns>
        </member>
        <member name="M:Remotion.Mixins.Context.ClassContext.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:Remotion.Mixins.Context.ClassContext"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing the type names of this context's associated <see cref="P:Remotion.Mixins.Context.ClassContext.Type"/>, all its mixin types, and
            complete interfaces.
            </returns>
        </member>
        <member name="M:Remotion.Mixins.Context.ClassContext.CloneForSpecificType(System.Type)">
            <summary>
            Returns a new <see cref="T:Remotion.Mixins.Context.ClassContext"/> with the same mixins and complete interfaces as this object, but a different target type.
            </summary>
            <param name="type">The target type to create the new <see cref="T:Remotion.Mixins.Context.ClassContext"/> for.</param>
            <returns>A clone of this <see cref="T:Remotion.Mixins.Context.ClassContext"/> for a different target type.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.ClassContext.SpecializeWithTypeArguments(System.Type[])">
            <summary>
            Creates a clone of the current class context, replacing its generic parameters with type arguments. This method is only allowed on
            class contexts representing a generic type definition.
            </summary>
            <param name="genericArguments">The type arguments to specialize this context's <see cref="P:Remotion.Mixins.Context.ClassContext.Type"/> with.</param>
            <returns>A <see cref="T:Remotion.Mixins.Context.ClassContext"/> which is identical to this one except its <see cref="P:Remotion.Mixins.Context.ClassContext.Type"/> being specialized with the
            given <paramref name="genericArguments"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="genericArguments"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Remotion.Mixins.Context.ClassContext.Type"/> is not a generic type definition.</exception>
        </member>
        <member name="M:Remotion.Mixins.Context.ClassContext.InheritFrom(Remotion.Mixins.Context.ClassContext)">
            <summary>
            Creates a new <see cref="T:Remotion.Mixins.Context.ClassContext"/> inheriting all data from the given <paramref name="baseContext"/> and applying overriding rules for
            mixins and concrete interfaces already defined for this <see cref="T:Remotion.Mixins.Context.ClassContext"/>.
            </summary>
            <param name="baseContext">The base context to inherit data from.</param>
            <returns>A new <see cref="T:Remotion.Mixins.Context.ClassContext"/> combining the mixins of this object with those from the <paramref name="baseContext"/>.</returns>
            <exception cref="T:Remotion.Mixins.ConfigurationException">The <paramref name="baseContext"/> contains mixins whose base types or generic
            type definitions are already defined on this mixin. The derived context cannot have concrete mixins whose base types
            are defined on the parent context.
            </exception>
        </member>
        <member name="M:Remotion.Mixins.Context.ClassContext.InheritFrom(System.Collections.Generic.IEnumerable{Remotion.Mixins.Context.ClassContext})">
            <summary>
            Creates a new <see cref="T:Remotion.Mixins.Context.ClassContext"/> inheriting all data from the given <paramref name="baseContexts"/> and applying overriding rules for
            mixins and concrete interfaces already defined for this <see cref="T:Remotion.Mixins.Context.ClassContext"/>.
            </summary>
            <param name="baseContexts">The base contexts to inherit data from.</param>
            <returns>A new <see cref="T:Remotion.Mixins.Context.ClassContext"/> combining the mixins of this object with those from the <paramref name="baseContexts"/>.</returns>
            <exception cref="T:Remotion.Mixins.ConfigurationException">The <paramref name="baseContexts"/> contain mixins whose base types or generic
            type definitions are already defined on this mixin. The derived context cannot have concrete mixins whose base types
            are defined on the parent context.
            </exception>
        </member>
        <member name="M:Remotion.Mixins.Context.ClassContext.SuppressMixins(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Returns a new <see cref="T:Remotion.Mixins.Context.ClassContext"/> equivalent to this object but with all mixins ascribable from the given
            <paramref name="mixinTypesToSuppress"/> removed.
            </summary>
            <param name="mixinTypesToSuppress">The mixin types to suppress.</param>
            <returns>A copy of this <see cref="T:Remotion.Mixins.Context.ClassContext"/> without any mixins that can be ascribed to the given mixin types.</returns>
        </member>
        <member name="P:Remotion.Mixins.Context.ClassContext.Type">
            <summary>
            Gets the type represented by this <see cref="T:Remotion.Mixins.Context.ClassContext"/>.
            </summary>
            <value>The type represented by this context.</value>
        </member>
        <member name="P:Remotion.Mixins.Context.ClassContext.Mixins">
            <summary>
            Gets the mixins associated with this <see cref="T:Remotion.Mixins.Context.ClassContext"/>.
            </summary>
            <value>The mixins associated with this context.</value>
        </member>
        <member name="P:Remotion.Mixins.Context.ClassContext.CompleteInterfaces">
            <summary>
            Gets the complete interfaces associated with this <see cref="T:Remotion.Mixins.Context.ClassContext"/>.
            </summary>
            <value>The complete interfaces associated with this context (for an explanation, see <see cref="T:Remotion.Mixins.CompleteInterfaceAttribute"/>).</value>
        </member>
        <member name="T:Remotion.Mixins.IMixinTarget">
            <summary>
            This interface is implicitly implemented by all mixed types and objects returned by <see cref="T:Remotion.Mixins.TypeFactory"/> and <see cref="T:Remotion.Mixins.ObjectFactory"/>.
            </summary>
        </member>
        <member name="P:Remotion.Mixins.IMixinTarget.Configuration">
            <summary>
            Gets the mixin target's configuration data.
            </summary>
            <value>A <see cref="T:Remotion.Mixins.Definitions.TargetClassDefinition"/> object holding the configuration data used to create the mixin target.</value>
        </member>
        <member name="P:Remotion.Mixins.IMixinTarget.Mixins">
            <summary>
            Gets the mixins associated with the mixed object.
            </summary>
            <value>The mixin instances associated with the mixed object.</value>
        </member>
        <member name="P:Remotion.Mixins.IMixinTarget.FirstBaseCallProxy">
            <summary>
            Gets the first base call proxy.
            </summary>
            <value>An object the mixin type uses to call overridden methods. This is an instance of a generated type with no defined public API, so
            it is only useful for internal purposes.</value>
        </member>
        <member name="T:Remotion.Mixins.CodeGeneration.CodeGenerationCache">
            <summary>
            Implements caching of the types generated by <see cref="T:Remotion.Mixins.CodeGeneration.IModuleManager"/> instances, triggered by <see cref="T:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder"/>.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.OuterProductProcessingState">
            <summary>
            The current state of the outer product / nested for loops traversal.
            DimensionIndices supplies the current permutation of indices (array with an entry for each for-loop).
            DimensionIndex is the currently running for-loop; ElementIndex (=DimensionIndices[DimensionIndex]) is the value of the loop-variable of the currently running for-loop.
            IsInnermostLoop, IsOutermostLoop can be queried to treat the innermost and outermost loop differently, if so required.
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.OuterProductProcessingState.#ctor(Remotion.Diagnostics.OuterProductIndexGenerator,System.Int32)">
            <summary>
            Initializes a ProcessingState with an OuterProductIndexGenerator reference and the current dimension index 
            (= nested-for-loop loop-variable index).
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.OuterProductProcessingState.GetDimensionIndicesCopy">
            <summary>
            Returns a copy of the current <see cref="P:Remotion.Diagnostics.OuterProductProcessingState.DimensionIndices"/>-array.
            Use if you want to e.g. store the generated dimension indices permutations in your own collection.
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.OuterProductProcessingState.DimensionIndex">
            <summary>
            The outer product dimension which is currently processed (i.e. the index of the currently running for-loop).
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.OuterProductProcessingState.NumberElementsPerDimension">
            <summary>
            Integer array containing the number of elements in each outer product dimension.
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.OuterProductProcessingState.DimensionIndices">
            <summary>
            Integer array containing the current permutation of outer product indices (i.e. each array entry is the current value of each for-loop variable;
            <see cref="P:Remotion.Diagnostics.OuterProductProcessingState.ElementIndex"/>).
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.OuterProductProcessingState.NumberElementsOverall">
            <summary>
            The overall number of elements in the outer product.
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.OuterProductProcessingState.ElementIndex">
            <summary>
            ElementIndex (=DimensionIndices[DimensionIndex]) is the value of the loop-variable of the currently running for-loop.
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.OuterProductProcessingState.IsFirstLoopElement">
            <summary>
            Whether the element is the first element in the current for-loop.
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.OuterProductProcessingState.IsLastLoopElement">
            <summary>
            Whether the element is the last element in the current for-loop.
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.OuterProductProcessingState.IsInnermostLoop">
            <summary>
            Whether the current for-loop is the innermost loop.
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.OuterProductProcessingState.IsOutermostLoop">
            <summary>
            Whether the current for-loop is the outermost loop.
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.OuterProductProcessingState.NumberElementsProcessed">
            <summary>
            The overall elements of the outer product which have already been processed.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderTypeHandler">
            <summary>
            Handles <see cref="T:System.Type"/> instances in <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>'s <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToText(System.Object,Remotion.Diagnostics.ToText.IToTextBuilder)"/> fallback cascade.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderNullHandler">
            <summary>
            Handles null-references in <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>'s <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToText(System.Object,Remotion.Diagnostics.ToText.IToTextBuilder)"/> fallback cascade.
            </summary>
        </member>
        <member name="T:Remotion.Text.CommandLine.CommandLineArgumentAttribute">
            <summary>
            Use descendants of <see cref="T:Remotion.Text.CommandLine.CommandLineArgumentAttribute"/> (<see cref="T:Remotion.Text.CommandLine.CommandLineStringArgument"/>, <see cref="T:Remotion.Text.CommandLine.CommandLineFlagArgument"/>,...)
            to qualify class properties as command line arguments, to be able to be
            filled from a <c>string[] args</c> by a <see cref="T:Remotion.Text.CommandLine.CommandLineClassParser"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            // [CommandLineStringArgument (argumentName, isOptional, Placeholder = argumentExample, Description = argumentHelpDescription)]
            [CommandLineStringArgument ("user", true, Placeholder = "accountants/john.doe", Description = "Fully qualified name of user(s) to query access types for.")]
            public string UserName;
            ]]>
            </code>
            </example>
            <example>
            <code>
            <![CDATA[
            [CommandLineFlagArgument ("keepTypeNames", false,
            Description = "Specifies that the mixer should not use GUIDs to name the generated types.")]
            public bool KeepTypeNames;
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Remotion.Text.CommandLine.CommandLineArgumentAttribute.#ctor(System.Int32)">
            <summary> do not use this constructor </summary>
            <remarks> 
              This constructor is necessary because, even in <see langword="abstract"/> attribute classes, one constructor 
              must have arguments that meet the constraints of attribute declarations. 
            </remarks>
        </member>
        <member name="T:Remotion.Text.CommandLine.CommandLineStringArgumentAttribute">
            <summary>
            Use <see cref="T:Remotion.Text.CommandLine.CommandLineStringArgumentAttribute"/> to qualify positional or named string command line arguments.
            </summary>
            <remarks>
            <para>Pass named arguments using e.g. <c>app.exe /user:john.doe</c>.</para>
            <para>Pass positional arguments using e.g. <c>app.exe input.csv output.xml</c>.</para>
            <para>
            <example>
            Named argument example:
            <code>
            <![CDATA[
            // [CommandLineStringArgument (argumentName, isOptional, Placeholder = argumentExample, Description = argumentHelpDescription)]
            [CommandLineStringArgument ("user", true, Placeholder = "accountants/john.doe", Description = "Fully qualified name of user(s) to query access types for.")]
            public string UserName;
            ]]>
            </code>
            </example>
            </para>
            <para>
            <example>
            Positional argument example.
            Argument order corresponds to the order of 
            <see cref="T:Remotion.Text.CommandLine.CommandLineArgument"/> qualified properties in the C# sourcefile:
            <code>
            <![CDATA[
            // [CommandLineStringArgument (isOptional, Placeholder = argumentExample, Description = argumentHelpDescription)]
            [CommandLineStringArgument (false, Placeholder = "input.csv", Description = "The input CSV file to be transformed to XML.")]
            public string InputFileName;
            [CommandLineStringArgument (false, Placeholder = "output.xml", Description = "The resulting XML file.")]
            public string OutputFileName;
            ]]>
            </code>
            </example>
            </para>
            </remarks>
        </member>
        <member name="T:Remotion.Mixins.MixinTargetMockUtility">
            <summary>
            Provides methods that support isolated testing of mixins by initializing them with mock versions of their TThis and TBase parameters.
            </summary>
        </member>
        <member name="M:Remotion.Mixins.MixinTargetMockUtility.MockMixinTarget``2(Remotion.Mixins.Mixin{``0,``1},``0,``1)">
            <summary>
            Mocks the target of the given mixin instance by setting or replacing its <see cref="P:Remotion.Mixins.Mixin`1.This"/> and
            <see cref="P:Remotion.Mixins.Mixin`2.Base"/> properties to/with the given mocks.
            </summary>
            <typeparam name="TThis">The type of the mixin's TThis parameter.</typeparam>
            <typeparam name="TBase">The type of the mixin's TBase parameter.</typeparam>
            <param name="mixin">The mixin whose target is to be mocked.</param>
            <param name="thisMock">The mock object to use for the mixin's <see cref="P:Remotion.Mixins.Mixin`1.This"/> property.</param>
            <param name="baseMock">The mock object to use for the mixin's <see cref="P:Remotion.Mixins.Mixin`2.Base"/> property.</param>
            <remarks>
            Use this method if you already have a mixin instance. To mock the target of an abstract mixin which can't be instantiated in isolation,
            use the <see cref="M:Remotion.Mixins.MixinTargetMockUtility.CreateMixinWithMockedTarget``3(``1,``2,System.Object[])"/> method.
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.MixinTargetMockUtility.MockMixinTarget``1(Remotion.Mixins.Mixin{``0},``0)">
            <summary>
            Mocks the target of the given mixin instance by setting or replacing its <see cref="P:Remotion.Mixins.Mixin`1.This"/> property to/with the given mocks.
            </summary>
            <typeparam name="TThis">The type of the mixin's TThis parameter.</typeparam>
            <param name="mixin">The mixin whose target is to be mocked.</param>
            <param name="thisMock">The mock object to use for the mixin's <see cref="P:Remotion.Mixins.Mixin`1.This"/> property.</param>
            <remarks>
            Use this method if you already have a mixin instance. To mock the target of an abstract mixin which can't be instantiated in isolation,
            use the <see cref="M:Remotion.Mixins.MixinTargetMockUtility.CreateMixinWithMockedTarget``2(``1,System.Object[])"/> method.
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.MixinTargetMockUtility.CreateMixinWithMockedTarget``3(``1,``2,System.Object[])">
            <summary>
            Creates a mixin with a mocked target object.
            </summary>
            <typeparam name="TMixin">The type of mixin to create.</typeparam>
            <typeparam name="TThis">The TThis parameter of the mixin.</typeparam>
            <typeparam name="TBase">The TBase parameter of the mixin.</typeparam>
            <param name="thisMock">The mock object to use for the mixin's <see cref="P:Remotion.Mixins.Mixin`1.This"/> property.</param>
            <param name="baseMock">The mock object to use for the mixin's <see cref="P:Remotion.Mixins.Mixin`2.Base"/> property.</param>
            <param name="args">The constructor arguments to be used when instantiating the mixin.</param>
            <returns>A mixin instance with the given mock objects as its <see cref="P:Remotion.Mixins.Mixin`1.This"/> and <see cref="P:Remotion.Mixins.Mixin`2.Base"/>
            parameters.</returns>
            <remarks>
            <para>
            This method is useful if a mixin's method should be overridden by the <paramref name="thisMock"/>, especially if the mixin type
            is abstract. If you already have a mixin instance to be mocked, use the <see cref="M:Remotion.Mixins.MixinTargetMockUtility.MockMixinTarget``2(Remotion.Mixins.Mixin{``0,``1},``0,``1)"/> method instead.
            </para>
            <para>
            For use with Rhino Mocks, be sure to configure the current <see cref="T:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder"/>'s <see cref="T:Remotion.Mixins.CodeGeneration.IModuleManager"/> to
            generate transient modules instead of persistent ones (which is the default). The following example code shows how to do this:
            <code>
            ((Remotion.Mixins.CodeGeneration.DynamicProxy.ModuleManager) ConcreteTypeBuilder.Current.Scope).Scope = new ModuleScope (false);
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.MixinTargetMockUtility.CreateMixinWithMockedTarget``2(``1,System.Object[])">
            <summary>
            Creates a mixin with a mocked target object.
            </summary>
            <typeparam name="TMixin">The type of mixin to create.</typeparam>
            <typeparam name="TThis">The TThis parameter of the mixin.</typeparam>
            <param name="thisMock">The mock object to use for the mixin's <see cref="P:Remotion.Mixins.Mixin`1.This"/> property.</param>
            <param name="args">The constructor arguments to be used when instantiating the mixin.</param>
            <returns>A mixin instance with the given mock objects as its <see cref="P:Remotion.Mixins.Mixin`1.This"/> and <see cref="P:Remotion.Mixins.Mixin`2.Base"/>
            parameters.</returns>
            <remarks>
            <para>
            This method is useful if a mixin's method should be overridden by the <paramref name="thisMock"/>, especially if the mixin type
            is abstract. If you already have a mixin instance to be mocked, use the <see cref="M:Remotion.Mixins.MixinTargetMockUtility.MockMixinTarget``1(Remotion.Mixins.Mixin{``0},``0)"/> method instead.
            </para>
            <para>
            For use with Rhino Mocks, be sure to configure the current <see cref="T:Remotion.Mixins.CodeGeneration.ConcreteTypeBuilder"/>'s <see cref="T:Remotion.Mixins.CodeGeneration.IModuleManager"/> to
            generate transient modules instead of persistent ones (which is the default). The following example code shows how to do this:
            <code>
            ((Remotion.Mixins.CodeGeneration.DynamicProxy.ModuleManager) ConcreteTypeBuilder.Current.Scope).Scope = new ModuleScope (false);
            </code>
            </para>
            </remarks>
        </member>
        <member name="T:Remotion.Collections.ArrayComparer`1">
            <summary>
            Provides equality and hash codes for arrays. Use <see cref="M:Remotion.Collections.ArrayComparer`1.GetComparer"/> to get an instance.
            </summary>
        </member>
        <member name="T:Remotion.Configuration.ExtendedConfigurationSection">
            <summary>Base class for all configuration sections using the <see cref="T:Remotion.Configuration.ProviderHelperBase"/> to manage their provider sections.</summary>
        </member>
        <member name="T:Remotion.Reflection.CodeGeneration.DPExtensions.TypedMethodInvocationExpression">
            <summary>
            Replacement for <see cref="T:Castle.DynamicProxy.Generators.Emitters.SimpleAST.MethodInvocationExpression"/> with value type support.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderCharHandler">
            <summary>
            Handles <see cref="T:System.Char"/>s in <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>'s <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToText(System.Object,Remotion.Diagnostics.ToText.IToTextBuilder)"/> fallback cascade.
            If <see cref="P:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderSettings.UseAutomaticCharEnclosing"/> is true it wraps characters in single quotes.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.ArgumentUtility">
            <summary>
            This utility class provides methods for checking arguments.
            </summary>
            <remarks>
            Some methods of this class return the value of the parameter. In some cases, this is useful because the value will be converted to another 
            type:
            <code><![CDATA[
            void foo (object o) 
            {
              int i = ArgumentUtility.CheckNotNullAndType<int> ("o", o);
            }
            ]]></code>
            In some other cases, the input value is returned unmodified. This makes it easier to use the argument checks in calls to base class constructors
            or property setters:
            <code><![CDATA[
            class MyType : MyBaseType
            {
              public MyType (string name) : base (ArgumentUtility.CheckNotNullOrEmpty ("name", name))
              {
              }
            
              public override Name
              {
                set { base.Name = ArgumentUtility.CheckNotNullOrEmpty ("value", value); }
              }
            }
            ]]></code>
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckNotNullAndType``1(System.String,System.Object)">
            <summary>Returns the value itself if it is not <see langword="null"/> and of the specified value type.</summary>
            <typeparam name="TExpected"> The type that <paramref name="actualValue"/> must have. </typeparam>
            <exception cref="T:System.ArgumentNullException">The <paramref name="actualValue"/> is a <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentTypeException">The <paramref name="actualValue"/> is an instance of another type.</exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckType``1(System.String,System.Object)">
            <summary>Returns the value itself if it is of the specified type.</summary>
            <typeparam name="TExpected"> The type that <paramref name="actualValue"/> must have. </typeparam>
            <exception cref="T:Remotion.Utilities.ArgumentTypeException"> 
                <paramref name="actualValue"/> is an instance of another type (which is not a subtype of <typeparamref name="TExpected"/>).</exception>
            <exception cref="T:System.ArgumentNullException"> 
                <paramref name="actualValue"/> is null and <typeparamref name="TExpected"/> cannot be null. </exception>
            <remarks>
              For non-nullable value types, you should use either <see cref="M:Remotion.Utilities.ArgumentUtility.CheckNotNullAndType``1(System.String,System.Object)"/> or pass the type 
              <see cref="T:System.Nullable`1"/> instead.
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckNotNullAndTypeIsAssignableFrom(System.String,System.Type,System.Type)">
            <summary>Checks whether <paramref name="actualType"/> is not <see langword="null"/> and can be assigned to <paramref name="expectedType"/>.</summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="actualType"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentTypeException">The <paramref name="actualType"/> cannot be assigned to <paramref name="expectedType"/>.</exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckTypeIsAssignableFrom(System.String,System.Type,System.Type)">
            <summary>Checks whether <paramref name="actualType"/> can be assigned to <paramref name="expectedType"/>.</summary>
            <exception cref="T:Remotion.Utilities.ArgumentTypeException">The <paramref name="actualType"/> cannot be assigned to <paramref name="expectedType"/>.</exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckItemsType``1(System.String,``0,System.Type)">
            <summary>Checks whether all items in <paramref name="collection"/> are of type <paramref name="itemType"/> or a null reference.</summary>
            <exception cref="T:Remotion.Utilities.ArgumentItemTypeException"> If at least one element is not of the specified type or a derived type. </exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckItemsNotNullAndType``1(System.String,``0,System.Type)">
            <summary>Checks whether all items in <paramref name="collection"/> are of type <paramref name="itemType"/> and not null references.</summary>
            <exception cref="T:Remotion.Utilities.ArgumentItemTypeException"> If at least one element is not of the specified type or a derived type. </exception>
            <exception cref="T:Remotion.Utilities.ArgumentItemNullException"> If at least one element is a null reference. </exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckValidEnumValue(System.String,System.Enum)">
            <summary>Checks whether <paramref name="enumValue"/> is defined within its enumeration type.</summary>
            <exception cref="T:System.ArgumentNullException"> If <paramref name="enumValue"/> is a null reference. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If <paramref name="enumValue"/> has a numeric value that is not completely defined within its 
            enumeration type. For flag types, every bit must correspond to at least one enumeration value. </exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckValidEnumValueAndType``1(System.String,System.Object)">
            <summary>Checks whether <paramref name="enumValue"/> is of the enumeration type <typeparamref name="TEnum"/> and defined within this type.</summary>
            <remarks>
            When successful, the value is returned as a <c>Nullable</c> of the specified type for direct assignment. 
            </remarks>
            <exception cref="T:Remotion.Utilities.ArgumentTypeException"> If <paramref name="enumValue"/> is not of the specified type. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If <paramref name="enumValue"/> has a numeric value that is not completely defined within its 
            enumeration type. For flag types, every bit must correspond to at least one enumeration value. </exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckValidEnumValueAndTypeAndNotNull``1(System.String,System.Object)">
            <summary>Checks whether <paramref name="enumValue"/> is of the enumeration type <typeparamref name="TEnum"/>, is defined within this 
            type, and is not a null reference.</summary>
            <remarks>
            When successful, the value is returned as the specified type for direct assignment. 
            </remarks>
            <exception cref="T:System.ArgumentNullException"> If <paramref name="enumValue"/> is a null reference. </exception>
            <exception cref="T:Remotion.Utilities.ArgumentTypeException"> If <paramref name="enumValue"/> is not of the specified type. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If <paramref name="enumValue"/> has a numeric value that is not completely defined within its 
            enumeration type. For flag types, every bit must correspond to at least one enumeration value. </exception>
        </member>
        <member name="F:Remotion.Text.IdentifierGenerator._uniqueIdentfiersByObject">
            <summary> Hashtable&lt;object uniqueObject, string uniqueIdentifier&gt; </summary>
        </member>
        <member name="F:Remotion.Text.IdentifierGenerator._uniqueIdentifiers">
            <summary> Hashtable&lt;string uniqueIdentifier, null&gt; </summary>
        </member>
        <member name="F:Remotion.Text.IdentifierGenerator._isTemplate">
            <summary> Specifies that the IdentifierGenerator must be cloned and cannot be used directly. </summary>
        </member>
        <member name="F:Remotion.Text.IdentifierGenerator._specificReplaceStrings">
            <summary> IDictionary&lt;char, string&gt; </summary>
        </member>
        <member name="M:Remotion.Text.IdentifierGenerator.Clone">
            <summary>
              Creates a copy of an IdentifierGenerator.
            </summary>
            <remarks>
              No records of generated identifiers are copied to the clone.
            </remarks>
        </member>
        <member name="P:Remotion.Text.IdentifierGenerator.CStyle">
            <summary>
              Returns an identifier generator for C-style identifiers.
            </summary>
            <remarks>
              <para>
                If you want to generate unique identifiers, use the <see cref="M:Remotion.Text.IdentifierGenerator.Clone"/> method to create a new <c>IdentifierGenerator</c>.
              </para><para>
                C-style identifiers start with either an english letter or an underscore. All other characters can
                be english letters, digits or underscores. C-style identifiers are case-sensitive.
              </para><para>
                C-style identifiers can be used for the programming languages C, C++, C# and Java, among others. 
                (Note that C# allows a number of unicode characters too, including languages-specific letters.)
              </para>
            </remarks>
        </member>
        <member name="P:Remotion.Text.IdentifierGenerator.HtmlStyle">
            <summary>
              Returns an identifier generator for HTML ID tokens.
            </summary>
            <remarks>
              <para>
                If you want to generate unique identifiers, use the <see cref="M:Remotion.Text.IdentifierGenerator.Clone"/> method to create a new <c>IdentifierGenerator</c>.
              </para><para>
                See http://www.w3.org/TR/html4/types.html#type-id
              </para>
            </remarks>
        </member>
        <member name="P:Remotion.Text.IdentifierGenerator.XmlStyle">
            <summary>
              Returns an identifier generator for XML ID tokens.
            </summary>
            <remarks>
              <para>
                If you want to generate unique identifiers, use the <see cref="M:Remotion.Text.IdentifierGenerator.Clone"/> method to create a new <c>IdentifierGenerator</c>.
              </para><para>
                See http://www.w3.org/TR/REC-xml#id
              </para>
            </remarks>
        </member>
        <member name="P:Remotion.Text.IdentifierGenerator.UniqueSeparator">
            <summary>
              If a unique number is appended to string, <c>UniqueSeparator</c> is inserted between the identifier 
              and the number.
            </summary>
            <example>
              If <c>UniqueSeparator</c> is an underscore ("_"), an identifier "id" is generated and has to be 
              appended with the number 2 to be unique, the resulting unique identifier is "id_2".
            </example>
        </member>
        <member name="P:Remotion.Text.IdentifierGenerator.AllowEnglishLetters">
            <summary>
            States that all english letters (upper case and lower case) are valid for identifiers, while accented
            letters and umlauts are not.
            </summary>
        </member>
        <member name="P:Remotion.Text.IdentifierGenerator.AllowLanguageSpecificLetters">
            <summary>
            States that all letters (upper case and lower case) are valid for identifiers, including accented
            letters and umlauts.
            </summary>
        </member>
        <member name="P:Remotion.Text.IdentifierGenerator.AllowDigits">
            <summary>
            States that numeric digits are valid for identifiers.
            </summary>
        </member>
        <member name="P:Remotion.Text.IdentifierGenerator.AllowAdditionalCharacters">
            <summary>
            Provides a list of characters that are valid as a string.
            </summary>
        </member>
        <member name="P:Remotion.Text.IdentifierGenerator.DefaultReplaceString">
            <summary>
            Characters that are not valid and have no special replace string defined are replaced with this value.
            </summary>
        </member>
        <member name="P:Remotion.Text.IdentifierGenerator.TreatFirstCharacterSpecial">
            <summary>
            If this property is true, the special properties for the first character are considered for
            the first character instead of the normal properties.
            </summary>
            <remarks>
              If <c>TreatFirstCharacterSpecial</c> is true,
              <list type="bullets">
                <item><see cref="P:Remotion.Text.IdentifierGenerator.AllowFirstCharacterEnglishLetters"/></item> is considered instead of <see cref="P:Remotion.Text.IdentifierGenerator.AllowEnglishLetters"/>
                <item><see cref="P:Remotion.Text.IdentifierGenerator.AllowFirstCharacterLanguageSpecificLetters"/></item> is considered instead of <see cref="P:Remotion.Text.IdentifierGenerator.AllowLanguageSpecificLetters"/>
                <item><see cref="P:Remotion.Text.IdentifierGenerator.AllowFirstCharacterDigits"/></item> is considered instead of <see cref="P:Remotion.Text.IdentifierGenerator.AllowDigits"/>
                <item><see cref="P:Remotion.Text.IdentifierGenerator.AllowFirstCharacterAdditionalCharacters"/></item> is considered instead of <see cref="P:Remotion.Text.IdentifierGenerator.AllowAdditionalCharacters"/>
                <item><see cref="P:Remotion.Text.IdentifierGenerator.DefaultFirstCharacterReplaceString"/></item> is considered instead of <see cref="P:Remotion.Text.IdentifierGenerator.DefaultReplaceString"/>
              </list>
              for the first character.
            </remarks>
        </member>
        <member name="P:Remotion.Text.IdentifierGenerator.AllowFirstCharacterEnglishLetters">
            <summary>
            States that all english letters (upper case and lower case) are valid for the first character of an 
            identifier, while accented letters and umlauts are not.
            </summary>
            <remarks>
            This property is only considered if <see cref="P:Remotion.Text.IdentifierGenerator.TreatFirstCharacterSpecial"/> is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Remotion.Text.IdentifierGenerator.AllowFirstCharacterLanguageSpecificLetters">
            <summary>
            States that all letters (upper case and lower case) are valid for the first character of an identifier, 
            including accented letters and umlauts.
            </summary>
            <remarks>
            This property is only considered if <see cref="P:Remotion.Text.IdentifierGenerator.TreatFirstCharacterSpecial"/> is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Remotion.Text.IdentifierGenerator.AllowFirstCharacterDigits">
            <summary>
            States that numeric digits are valid for the first character of an identifier.
            </summary>
            <remarks>
            This property is only considered if <see cref="P:Remotion.Text.IdentifierGenerator.TreatFirstCharacterSpecial"/> is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Remotion.Text.IdentifierGenerator.AllowFirstCharacterAdditionalCharacters">
            <summary>
            Provides a list of characters that are valid for the first character of an identifier.
            </summary>
            <remarks>
            This property is only considered if <see cref="P:Remotion.Text.IdentifierGenerator.TreatFirstCharacterSpecial"/> is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Remotion.Text.IdentifierGenerator.DefaultFirstCharacterReplaceString">
            <summary>
            If the first character is not valid and has no special replace string defined, it isreplaced with this value.
            </summary>
            <remarks>
            This property is only considered if <see cref="P:Remotion.Text.IdentifierGenerator.TreatFirstCharacterSpecial"/> is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Remotion.Text.IdentifierGenerator.IsCaseSensitive">
            <summary>
              Specifies whether the resulting identifiers are case-sensitive.
            </summary>
            <remarks>
              For generating unique identifiers, this property determines which identifiers are considered equal.
            </remarks>
        </member>
        <member name="P:Remotion.Text.IdentifierGenerator.UseCaseSensitiveNames">
            <summary>
              Secifies whether the provided unique names are considered to be case sensitive.
            </summary>
            <remarks>
              For generating unique identifiers using unique names, this property determines whether two unique names that
              differ only in case are considered equal.
            </remarks>
        </member>
        <member name="T:Remotion.Text.CommandLine.CommandLineParser">
            <summary>
            Provides methods for declaring command line syntax and providing values.
            </summary>
        </member>
        <member name="M:Remotion.Text.CommandLine.CommandLineParser.SplitCommandLine(System.String,System.Boolean)">
            <summary>
            Splits a command line string into an array of command line arguments, separated by spaces.
            </summary>
            <param name="commandLine">The command line (as available from <see cref="P:System.Environment.CommandLine"/>.)</param><returns>An array of command line arguments.</returns><remarks>
      The following rules apply:
      <list type="bullet">
        <item>Use spaces to separate arguments.</item>
        <item>Embed arguments within double quotation marks to treat them as a single argument even if they contain 
        spaces.</item>
        <item>Within double quotation marks, use two double quotation marks if you need one double quotation mark in the 
        argument.</item>
      </list>
      This resembles the logic that is applied to the arguments of the C# Main method. However, the parameters passed to
      the Main method are parsed a little bit differently in special situations, according to an unknown and undocumented 
      algorithm.
    </remarks><example>
      <list type="table">
        <listheader>
          <term>Command Line</term>
          <description>Parsing Result</description>
        </listheader>
        <item>
          <term>
            Hello world!
          </term>
          <description>
            <para>
              Hello
            </para><para>
              world!
            </para>
          </description>
        </item>
        <item>
          <term>
            Hello "new world!"
          </term>
          <description>
            <para>
              Hello
            </para><para>
              new world!
            </para>
          </description>
        </item>
        <item>
          <term>
            Hello """new"" world!"
          </term>
          <description>
            <para>
              Hello
            </para><para>
              "new" world!
            </para>
          </description>
        </item>
      </list>
    </example>
            <param name="includeFirstArgument">
      If <see langword="true"/>, the first argument (which is usually the file name of
      the program) is included, otherwise only the arguments after the first one are included.
    </param>
        </member>
        <member name="M:Remotion.Text.CommandLine.CommandLineParser.Parse(System.String,System.Boolean)">
            <summary>
            This method reads a command line and initializes the arguments contained in <see cref="F:Remotion.Text.CommandLine.CommandLineParser.Arguments"/>.
            </summary>
            <param name="commandLine">The string that contains the command line arguments. See <see cref="M:Remotion.Text.CommandLine.CommandLineParser.SplitCommandLine(System.String,System.Boolean)"/> for information on how
            command lines are parsed.</param>
            <param name="includeFirstArgument">
      If <see langword="true"/>, the first argument (which is usually the file name of
      the program) is included, otherwise only the arguments after the first one are included.
    </param>
            <exception cref="T:Remotion.Text.CommandLine.InvalidCommandLineArgumentValueException">The value of a parameter cannot be interpreted.</exception>
            <exception cref="T:Remotion.Text.CommandLine.InvalidCommandLineArgumentNameException">The command line contains a named argument that is not defined.</exception>
            <exception cref="T:Remotion.Text.CommandLine.InvalidNumberOfCommandLineArgumentsException">The command line contains too many unnamed arguments.</exception>
            <exception cref="T:Remotion.Text.CommandLine.MissingRequiredCommandLineParameterException">A non-optional command line argument is not contained in the command line.</exception>
        </member>
        <member name="M:Remotion.Text.CommandLine.CommandLineParser.Parse(System.String[])">
            <summary>
            This method reads the strings of a command line (as passed to the C# Main method) and
            initializes the arguments contained in <see cref="F:Remotion.Text.CommandLine.CommandLineParser.Arguments"/>.
            </summary>
            <param name="args">An array of command line arguments. This is typically the <c>args</c> parameter passed to the C# Main method.</param>
            <exception cref="T:Remotion.Text.CommandLine.InvalidCommandLineArgumentValueException">The value of a parameter cannot be interpreted.</exception>
            <exception cref="T:Remotion.Text.CommandLine.InvalidCommandLineArgumentNameException">The command line contains a named argument that is not defined.</exception>
            <exception cref="T:Remotion.Text.CommandLine.InvalidNumberOfCommandLineArgumentsException">The command line contains too many unnamed arguments.</exception>
            <exception cref="T:Remotion.Text.CommandLine.MissingRequiredCommandLineParameterException">A non-optional command line argument is not contained in the command line.</exception>
        </member>
        <member name="M:Remotion.Text.CommandLine.CommandLineParser.GetAsciiSynopsis(System.String,System.Int32)">
            <summary>
            Returns a string containing the syntax description of the arguments contained in <see cref="F:Remotion.Text.CommandLine.CommandLineParser.Arguments"/>.
            </summary>
            <param name="commandName">The file name of the program.</param>
            <param name="maxWidth">The maximum line length (for screen output, use 79 for 80 character output to avoid blank lines).</param>
            <returns>A syntax overview containing a short command line overview and a table of parameters and desciptions.</returns>
        </member>
        <member name="T:Remotion.Logging.Log4NetLogManager">
            <summary>
            Implementation of <see cref="T:Remotion.Logging.ILogManager"/> for <b>log4net</b>.
            </summary>
        </member>
        <member name="M:Remotion.Logging.Log4NetLogManager.GetLogger(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Remotion.Logging.Log4NetLog"/> type.
            </summary>
            <param name="name">The name of the logger to retrieve. Must not be <see langword="null"/> or empty.</param>
            <returns>A <see cref="T:Remotion.Logging.Log4NetLog"/> for the <paramref name="name"/> specified.</returns>
        </member>
        <member name="M:Remotion.Logging.Log4NetLogManager.GetLogger(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Remotion.Logging.Log4NetLog"/> type.
            </summary>
            <param name="type">The full name of <paramref name="type"/> will be used as the name of the logger to retrieve. Must not be <see langword="null"/>.</param>
            <returns>A <see cref="T:Remotion.Logging.Log4NetLog"/> for the fully qualified name of the <paramref name="type"/> specified.</returns>
        </member>
        <member name="M:Remotion.Logging.Log4NetLogManager.Initialize">
            <summary>
            Initializes <b>log4net</b> by invoking <see cref="M:log4net.Config.XmlConfigurator.Configure"/>.
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.Infrastructure.SequenceStateHolder.IncrementCounter">
            <summary>
            Move to the next position in the sequence.
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.ToText.Infrastructure.SequenceStateHolder.Counter">
            <summary>
            The current position in the sequence.
            </summary>
        </member>
        <member name="T:Remotion.Collections.TypedSequence">
            <summary>
            Stores a sequence of values together with their types.
            </summary>
        </member>
        <member name="F:Remotion.Collections.TypedSequence.Empty">
            <summary>
            An empty sequence.
            </summary>
        </member>
        <member name="M:Remotion.Collections.TypedSequence.Create``1(``0)">
            <summary>
            Creates a typed sequence with the given elements. The element types are specified by generic arguments, which can be automatically inferred
            by most compilers.
            </summary>
            <returns>A new <see cref="T:Remotion.Collections.TypedSequence"/> instance holding the given values with their respective types.</returns>
        </member>
        <member name="M:Remotion.Collections.TypedSequence.Create``2(``0,``1)">
            <summary>
            Creates a typed sequence with the given elements. The element types are specified by generic arguments, which can be automatically inferred
            by most compilers.
            </summary>
            <returns>A new <see cref="T:Remotion.Collections.TypedSequence"/> instance holding the given values with their respective types.</returns>
        </member>
        <member name="M:Remotion.Collections.TypedSequence.Create``3(``0,``1,``2)">
            <summary>
            Creates a typed sequence with the given elements. The element types are specified by generic arguments, which can be automatically inferred
            by most compilers.
            </summary>
            <returns>A new <see cref="T:Remotion.Collections.TypedSequence"/> instance holding the given values with their respective types.</returns>
        </member>
        <member name="M:Remotion.Collections.TypedSequence.Create``4(``0,``1,``2,``3)">
            <summary>
            Creates a typed sequence with the given elements. The element types are specified by generic arguments, which can be automatically inferred
            by most compilers.
            </summary>
            <returns>A new <see cref="T:Remotion.Collections.TypedSequence"/> instance holding the given values with their respective types.</returns>
        </member>
        <member name="M:Remotion.Collections.TypedSequence.Create``5(``0,``1,``2,``3,``4)">
            <summary>
            Creates a typed sequence with the given elements. The element types are specified by generic arguments, which can be automatically inferred
            by most compilers.
            </summary>
            <returns>A new <see cref="T:Remotion.Collections.TypedSequence"/> instance holding the given values with their respective types.</returns>
        </member>
        <member name="M:Remotion.Collections.TypedSequence.Create``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates a typed sequence with the given elements. The element types are specified by generic arguments, which can be automatically inferred
            by most compilers.
            </summary>
            <returns>A new <see cref="T:Remotion.Collections.TypedSequence"/> instance holding the given values with their respective types.</returns>
        </member>
        <member name="M:Remotion.Collections.TypedSequence.Create``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Creates a typed sequence with the given elements. The element types are specified by generic arguments, which can be automatically inferred
            by most compilers.
            </summary>
            <returns>A new <see cref="T:Remotion.Collections.TypedSequence"/> instance holding the given values with their respective types.</returns>
        </member>
        <member name="M:Remotion.Collections.TypedSequence.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Creates a typed sequence with the given elements. The element types are specified by generic arguments, which can be automatically inferred
            by most compilers.
            </summary>
            <returns>A new <see cref="T:Remotion.Collections.TypedSequence"/> instance holding the given values with their respective types.</returns>
        </member>
        <member name="M:Remotion.Collections.TypedSequence.Create``9(``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Creates a typed sequence with the given elements. The element types are specified by generic arguments, which can be automatically inferred
            by most compilers.
            </summary>
            <returns>A new <see cref="T:Remotion.Collections.TypedSequence"/> instance holding the given values with their respective types.</returns>
        </member>
        <member name="M:Remotion.Collections.TypedSequence.Create``10(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Creates a typed sequence with the given elements. The element types are specified by generic arguments, which can be automatically inferred
            by most compilers.
            </summary>
            <returns>A new <see cref="T:Remotion.Collections.TypedSequence"/> instance holding the given values with their respective types.</returns>
        </member>
        <member name="M:Remotion.Collections.TypedSequence.#ctor(System.Collections.Generic.IEnumerable{Remotion.Collections.Tuple{System.Type,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Collections.TypedSequence"/> class. For small number of values, use the <see cref="M:Remotion.Collections.TypedSequence.Create``1(``0)"/> overloads 
            instead.
            </summary>
            <param name="typedValues">The typed values to be held by this <see cref="T:Remotion.Collections.TypedSequence"/>.</param>
        </member>
        <member name="M:Remotion.Collections.TypedSequence.#ctor(Remotion.Collections.Tuple{System.Type,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Collections.TypedSequence"/> class. For small number of values, use the <see cref="M:Remotion.Collections.TypedSequence.Create``1(``0)"/> overloads 
            instead.
            </summary>
            <param name="typedValues">The typed values to be held by this <see cref="T:Remotion.Collections.TypedSequence"/>.</param>
        </member>
        <member name="M:Remotion.Collections.TypedSequence.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this <see cref="T:Remotion.Collections.TypedSequence"/>.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the sequence.
            </returns>
        </member>
        <member name="P:Remotion.Collections.TypedSequence.Count">
            <summary>
            Gets the number of elements stored by this <see cref="T:Remotion.Collections.TypedSequence"/>.
            </summary>
            <value>The element count.</value>
        </member>
        <member name="P:Remotion.Collections.TypedSequence.Types">
            <summary>
            Gets an array holding the types of the elements stored by this <see cref="T:Remotion.Collections.TypedSequence"/>.
            </summary>
            <value>The element types.</value>
        </member>
        <member name="P:Remotion.Collections.TypedSequence.Values">
            <summary>
            Gets an array holding the element values stored by this <see cref="T:Remotion.Collections.TypedSequence"/>.
            </summary>
            <value>The element values.</value>
        </member>
        <member name="T:Remotion.Utilities.ArrayUtility">
            <summary>
            Provides utility functions that make common array operations easier.
            </summary>
        </member>
        <member name="T:Remotion.Text.SeparatedStringBuilder">
            <summary>
            Builds a string adding separators between appended strings.
            </summary>
        </member>
        <member name="M:Remotion.Text.SeparatedStringBuilder.Build``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Appends the result of selector(item) for each item in the specified list.
            </summary>
        </member>
        <member name="M:Remotion.Text.SeparatedStringBuilder.Build``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Appends each item in the specified list.
            </summary>
        </member>
        <member name="M:Remotion.Text.SeparatedStringBuilder.Build``1(System.String,System.Collections.IEnumerable,System.Func{``0,System.String})">
            <summary>
            Appends the result of selector(item) for each item in the specified list.
            </summary>
        </member>
        <member name="M:Remotion.Text.SeparatedStringBuilder.Build``1(System.String,System.Collections.IEnumerable)">
            <summary>
            Appends each item in the specified list.
            </summary>
        </member>
        <member name="T:Remotion.Globalization.ResourceManagerSet">
            <summary>
              Combines one or more <see cref="T:Remotion.Globalization.IResourceManager"/> instances to a set that can be accessed using a single interface.
            </summary>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerSet.#ctor(Remotion.Globalization.IResourceManager[])">
            <summary>
              Combines several IResourceManager instances to a single ResourceManagerSet, starting with the first entry of the first set.
            </summary>
            <remarks>
              For parameters that are ResourceManagerSet instances, the contained IResourceManagers are added directly.
            </remarks>
            <example>
              <para>
                Given the following parameter list of resource managers (rm) and resource manager sets (rmset):
              </para><para>
                rm1, rm2, rmset (rm3, rm4, rm5), rm6, rmset (rm7, rm8)
              </para><para>
                The following resource manager set is created:
              </para><para>
                rmset (rm1, rm2, rm3, rm4, rm5, rm6, rm7, rm8)
              </para>
            </example>
            <param name="resourceManagers"> The resource manager, starting with the least specific. </param>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerSet.GetAllStrings(System.String)">
            <summary>
              Searches for all string resources inside the resource manager whose name is prefixed with a matching tag.
            </summary>
            <seealso cref="M:Remotion.Globalization.IResourceManager.GetAllStrings(System.String)"/>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerSet.GetString(System.String)">
            <summary>
              Gets the value of the specified string resource. 
            </summary>
            <seealso cref="M:Remotion.Globalization.IResourceManager.GetString(System.String)"/>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerSet.GetString(System.Enum)">
            <summary>
              Gets the value of the specified string resource. 
            </summary>
            <seealso cref="M:Remotion.Globalization.IResourceManager.GetString(System.Enum)"/>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerSet.ContainsResource(System.String)">
            <summary>Tests whether the <see cref="T:Remotion.Globalization.ResourceManagerSet"/> contains the specified resource.</summary>
            <param name="id">The ID of the resource to look for.</param>
            <returns><see langword="true"/> if the <see cref="T:Remotion.Globalization.ResourceManagerSet"/> contains the specified resource.</returns>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerSet.ContainsResource(System.Enum)">
            <summary>Tests whether the <see cref="T:Remotion.Globalization.ResourceManagerSet"/> contains the specified resource.</summary>
            <param name="enumValue">The ID of the resource to look for.</param>
            <returns><see langword="true"/> if the <see cref="T:Remotion.Globalization.ResourceManagerSet"/> contains the specified resource.</returns>
        </member>
        <member name="T:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder">
            <summary>
            Assists <see cref="T:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder"/> by providing a fluent interface for building <see cref="T:Remotion.Mixins.Context.MixinContext"/> objects.
            </summary>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.OfKind(Remotion.Mixins.MixinKind)">
            <summary>
            Defines the relationship the mixin has with its target class, which influences whether the mixin overrides attributes and interfaces
            of the target class, or the other way around. For more information see <see cref="T:Remotion.Mixins.MixinKind"/>. The default value
            is <see cref="F:Remotion.Mixins.MixinKind.Extending"/>.
            </summary>
            <param name="kind">The mixin kind.</param>
            <returns>This object for further configuration of the mixin.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.WithDependency(System.Type)">
            <summary>
            Collects a dependency for the configured <see cref="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.MixinType"/>. A dependency causes a base call ordering to be defined between two mixins:
            if mixin A depends on mixin B and both override the same methods, A's overrides will be called before B's overrides when an overridden member
            is invoked.
            </summary>
            <param name="requiredMixin">The mixin required by the configured <see cref="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.MixinType"/>.</param>
            <returns>This object for further configuration of the mixin.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.WithDependency``1">
            <summary>
            Collects a dependency for the configured <see cref="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.MixinType"/>. A dependency causes a base call ordering to be defined between two mixins:
            if mixin A depends on mixin B and both override the same methods, A's overrides will be called before B's overrides when an overridden member
            is invoked.
            </summary>
            <typeparam name="TRequiredMixin">The mixin (or an interface) required by the configured <see cref="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.MixinType"/>.</typeparam>
            <returns>This object for further configuration of the mixin.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.WithDependencies(System.Type[])">
            <summary>
            Collects a number of dependencies for the configured <see cref="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.MixinType"/>. A dependency causes a base call ordering to be defined between
            two mixins:
            if mixin A depends on mixin B and both override the same methods, A's overrides will be called before B's overrides when an overridden member
            is invoked.
            </summary>
            <param name="requiredMixins">The mixins (or interfaces) required by the configured <see cref="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.MixinType"/>.</param>
            <returns>This object for further configuration of the mixin.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.WithDependencies``2">
            <summary>
            Collects a number of dependencies for the configured <see cref="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.MixinType"/>. A dependency causes a base call ordering to be defined between
            two mixins:
            if mixin A depends on mixin B and both override the same methods, A's overrides will be called before B's overrides when an overridden member
            is invoked.
            </summary>
            <typeparam name="TMixin1">The first mixin (or interface) required by the configured <see cref="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.MixinType"/>.</typeparam>
            <typeparam name="TMixin2">The second mixin (or interface) required by the configured <see cref="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.MixinType"/>.</typeparam>
            <returns>This object for further configuration of the mixin.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.WithDependencies``3">
            <summary>
            Collects a number of dependencies for the configured <see cref="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.MixinType"/>. A dependency causes a base call ordering to be defined between
            two mixins:
            if mixin A depends on mixin B and both override the same methods, A's overrides will be called before B's overrides when an overridden member
            is invoked.
            </summary>
            <typeparam name="TMixin1">The first mixin (or interface) required by the configured <see cref="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.MixinType"/>.</typeparam>
            <typeparam name="TMixin2">The second mixin (or interface) required by the configured <see cref="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.MixinType"/>.</typeparam>
            <typeparam name="TMixin3">The third mixin (or interface) required by the configured <see cref="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.MixinType"/>.</typeparam>
            <returns>This object for further configuration of the mixin.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.WithIntroducedMemberVisibility(Remotion.Mixins.MemberVisibility)">
            <summary>
            Sets the default visibility of members introduced by this mixin to the given <paramref name="memberVisibility"/>.
            </summary>
            <param name="memberVisibility">The default member visibility to be used.</param>
            <returns>This object for further configuration of the mixin.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.BuildMixinContext">
            <summary>
            Builds a mixin context with the data collected so far for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.MixinType"/>.
            </summary>
            <returns>A <see cref="T:Remotion.Mixins.Context.MixinContext"/> holding all mixin configuration data collected so far.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.Clear">
            <summary>
            Clears all mixin configuration for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.Parent"/>'s <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>. This causes the target type to ignore
            all mixin configuration data from its
            parent context and also resets all information collected so far for the class by this object.
            </summary>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.AddMixin(System.Type)">
            <summary>
            Collects the given type as a mixin for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.
            </summary>
            <param name="mixinType">The mixin type to collect.</param>
            <returns>A <see cref="T:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder"/> object for further configuration of the mixin.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.AddMixin``1">
            <summary>
            Collects the given type as a mixin for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.
            </summary>
            <typeparam name="TMixin">The mixin type to collect.</typeparam>
            <returns>A <see cref="T:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder"/> object for further configuration of the mixin.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.AddMixins(System.Type[])">
            <summary>
            Collects the given types as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.
            </summary>
            <param name="mixinTypes">The mixin types to collect.</param>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.AddMixins``2">
            <summary>
            Collects the given types as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.
            </summary>
            <typeparam name="TMixin1">The first mixin type to collect.</typeparam>
            <typeparam name="TMixin2">The second mixin type to collect.</typeparam>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.AddMixins``3">
            <summary>
            Collects the given types as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.
            </summary>
            <typeparam name="TMixin1">The first mixin type to collect.</typeparam>
            <typeparam name="TMixin2">The second mixin type to collect.</typeparam>
            <typeparam name="TMixin3">The third mixin type to collect.</typeparam>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.EnsureMixin(System.Type)">
            <summary>
            Ensures that the given type is configured as a mixin for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>, adding it if necessary. The mixin will not be
            added if it is also present in the parent context (unless <see cref="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.Clear"/> was called); if added, it will override corresponding
            mixins inherited from a base type.
            </summary>
            <param name="mixinType">The mixin type to collect.</param>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.EnsureMixin``1">
            <summary>
            Ensures that the given type is configured as a mixin for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>, adding it if necessary. The mixin will not be
            added if it is also present in the parent context (unless <see cref="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.Clear"/> was called); if added, it will override corresponding
            mixins inherited from a base type.
            </summary>
            <typeparam name="TMixin">The mixin type to collect.</typeparam>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.EnsureMixins(System.Type[])">
            <summary>
            Ensures that the given types are configured as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>, adding them if necessary. The mixins will not be
            added if they are also present in the parent context (unless <see cref="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.Clear"/> was called); if added, they will override corresponding
            mixins inherited from a base type.
            </summary>
            <param name="mixinTypes">The mixin types to collect.</param>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.EnsureMixins``2">
            <summary>
            Ensures that the given types are configured as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>, adding them if necessary. The mixins will not be
            added if they are also present in the parent context (unless <see cref="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.Clear"/> was called); if added, they will override corresponding
            mixins inherited from a base type.
            </summary>
            <typeparam name="TMixin1">The first mixin type to collect.</typeparam>
            <typeparam name="TMixin2">The second mixin type to collect.</typeparam>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.EnsureMixins``3">
            <summary>
            Ensures that the given types are configured as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>, adding them if necessary. The mixins will not be
            added if they are also present in the parent context (unless <see cref="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.Clear"/> was called); if added, they will override corresponding
            mixins inherited from a base type.
            </summary>
            <typeparam name="TMixin1">The first mixin type to collect.</typeparam>
            <typeparam name="TMixin2">The second mixin type to collect.</typeparam>
            <typeparam name="TMixin3">The third mixin type to collect.</typeparam>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.AddOrderedMixins(System.Type[])">
            <summary>
            Collects the given types as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/> and adds dependencies between the mixins to ensure a proper base call
            order.
            </summary>
            <param name="mixinTypes">The mixin types to collect with dependencies.</param>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.AddOrderedMixins``2">
            <summary>
            Collects the given types as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/> and adds dependencies between the mixins to ensure a proper base call
            order.
            </summary>
            <typeparam name="TMixin1">The first mixin type to collect with dependencies.</typeparam>
            <typeparam name="TMixin2">The first mixin type to collect with dependencies.</typeparam>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.AddOrderedMixins``3">
            <summary>
            Collects the given types as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/> and adds dependencies between the mixins to ensure a proper base call
            order.
            </summary>
            <typeparam name="TMixin1">The first mixin type to collect with dependencies.</typeparam>
            <typeparam name="TMixin2">The first mixin type to collect with dependencies.</typeparam>
            <typeparam name="TMixin3">The first mixin type to collect with dependencies.</typeparam>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.AddCompleteInterface(System.Type)">
            <summary>
            Adds the given type as a complete interface to the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>. A complete interface can contain both members defined by the
            target class itself and by mixins applied to the class, making it easier to invoke methods and properties on a mixed object without casting.
            </summary>
            <param name="interfaceType">The type to collect as a complete interface.</param>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.AddCompleteInterface``1">
            <summary>
            Adds the given type as a complete interface to the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>. A complete interface can contain both members defined by the
            target class itself and by mixins applied to the class, making it easier to invoke methods and properties on a mixed object without casting.
            </summary>
            <typeparam name="TInterface">The type to collect as a complete interface.</typeparam>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.AddCompleteInterfaces(System.Type[])">
            <summary>
            Adds the given types as complete interfaces to the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>. A complete interface can contain both members defined by the
            target class itself and by mixins applied to the class, making it easier to invoke methods and properties on a mixed object without casting.
            </summary>
            <param name="interfaceTypes">The types to collect as complete interfaces.</param>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.AddCompleteInterfaces``2">
            <summary>
            Adds the given types as complete interfaces to the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>. A complete interface can contain both members defined by the
            target class itself and by mixins applied to the class, making it easier to invoke methods and properties on a mixed object without casting.
            </summary>
            <typeparam name="TInterface1">The types to collect as complete interfaces.</typeparam>
            <typeparam name="TInterface2">The types to collect as complete interfaces.</typeparam>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.AddCompleteInterfaces``3">
            <summary>
            Adds the given types as complete interfaces to the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>. A complete interface can contain both members defined by the
            target class itself and by mixins applied to the class, making it easier to invoke methods and properties on a mixed object without casting.
            </summary>
            <typeparam name="TInterface1">The types to collect as complete interfaces.</typeparam>
            <typeparam name="TInterface2">The types to collect as complete interfaces.</typeparam>
            <typeparam name="TInterface3">The types to collect as complete interfaces.</typeparam>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.SuppressMixin(System.Type)">
            <summary>
            Denotes that a specific mixin type, and all mixin types that can be ascribed to it (see <see cref="M:Remotion.Utilities.ReflectionUtility.CanAscribe(System.Type,System.Type)"/>), should be
            ignored in the context of this object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/>. Suppression is helpful when a target class should take over most 
            of its mixins from the parent context or inherit mixins from another type, but a specific mixin should be ignored in that 
            process.
            </summary>
            <param name="mixinType">The mixin type, base type, or generic type definition denoting mixin types to be suppressed.</param>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.SuppressMixin``1">
            <summary>
            Denotes that a specific mixin type, and all mixin types that can be ascribed to it (see <see cref="M:Remotion.Utilities.ReflectionUtility.CanAscribe(System.Type,System.Type)"/>), should be
            ignored in the context of this object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/>. Suppression is helpful when a target class should take over most of its mixins from the
            parent context or inherit mixins from another type, but a specific mixin should be ignored in that process.
            </summary>
            <typeparam name="TMixinType">The mixin type, base type, or generic type definition denoting mixin types to be suppressed.</typeparam>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.SuppressMixins(System.Type[])">
            <summary>
            Denotes that a number of mixin types, and all mixin types that can be ascribed to it (see <see cref="M:Remotion.Utilities.ReflectionUtility.CanAscribe(System.Type,System.Type)"/>), should be
            ignored in the context of this object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/>. Suppression is helpful when a target class should take over most of its mixins from the
            parent context or inherit mixins from another type, but a specific mixin should be ignored in that process.
            </summary>
            <param name="mixinTypes">The mixin types, base types, or generic type definitions denoting mixin types to be suppressed.</param>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.SuppressMixins``2">
            <summary>
            Denotes that a number of mixin types, and all mixin types that can be ascribed to it (see <see cref="M:Remotion.Utilities.ReflectionUtility.CanAscribe(System.Type,System.Type)"/>), should be
            ignored in the context of this object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/>. Suppression is helpful when a target class should take over most of its mixins from the
            parent context or inherit mixins from another type, but a specific mixin should be ignored in that process.
            </summary>
            <typeparam name="TMixinType1">The first mixin type, base type, or generic type definition denoting mixin types to be suppressed.</typeparam>
            <typeparam name="TMixinType2">The second mixin type, base type, or generic type definition denoting mixin types to be suppressed.</typeparam>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.SuppressMixins``3">
            <summary>
            Denotes that a number of mixin types, and all mixin types that can be ascribed to it (see <see cref="M:Remotion.Utilities.ReflectionUtility.CanAscribe(System.Type,System.Type)"/>), should be
            ignored in the context of this object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/>. Suppression is helpful when a target class should take over most of its mixins from the
            parent context or inherit mixins from another type, but a specific mixin should be ignored in that process.
            </summary>
            <typeparam name="TMixinType1">The first mixin type, base type, or generic type definition denoting mixin types to be suppressed.</typeparam>
            <typeparam name="TMixinType2">The second mixin type, base type, or generic type definition denoting mixin types to be suppressed.</typeparam>
            <typeparam name="TMixinType3">The third mixin type, base type, or generic type definition denoting mixin types to be suppressed.</typeparam>
            <returns>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.BuildClassContext(System.Collections.Generic.IEnumerable{Remotion.Mixins.Context.ClassContext})">
            <summary>
            Builds a class context with the data collected so far for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/> that inherits from other contexts.
            </summary>
            <param name="inheritedContexts">A collection of <see cref="T:Remotion.Mixins.Context.ClassContext"/> instances the newly built context should inherit mixin data from.</param>
            <returns>A <see cref="T:Remotion.Mixins.Context.ClassContext"/> for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/> holding all mixin configuration data collected so far.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.BuildClassContext">
            <summary>
            Builds a class context with the data collected so far for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/> without inheriting from other contexts.
            </summary>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.ForClass(System.Type)">
            <summary>
            Begins configuration of another target class.
            </summary>
            <param name="targetType">The class to be configured.</param>
            <returns>A fluent interface object for configuring the given <paramref name="targetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.ForClass``1">
            <summary>
            Begins configuration of another target class.
            </summary>
            <typeparam name="TTargetType">The class to be configured.</typeparam>
            <returns>A fluent interface object for configuring the given <typeparamref name="TTargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.BuildConfiguration">
            <summary>
            Builds a configuration object with the data gathered so far.
            </summary>
            <returns>A new <see cref="T:Remotion.Mixins.MixinConfiguration"/> instance incorporating all the data acquired so far.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.EnterScope">
            <summary>
            Builds a configuration object and calls the <see cref="M:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.EnterScope"/> method on it, thus activating the configuration for the current
            thread. The previous configuration is restored when the returned object's <see cref="M:System.IDisposable.Dispose"/> method is called (e.g. by a
            using statement).
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> object for restoring the original configuration.</returns>
        </member>
        <member name="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.Parent">
            <summary>
            Gets the <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/> used for creating this <see cref="T:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder"/>.
            </summary>
            <value>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/>.</value>
        </member>
        <member name="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.MixinKind">
            <summary>
            Gets the kind of relationship the configured mixin has with its target class.
            </summary>
            <value>The mixin kind.</value>
        </member>
        <member name="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.MixinType">
            <summary>
            Gets mixin type configured by this object.
            </summary>
            <value>The mixin type configured by this object.</value>
        </member>
        <member name="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.Dependencies">
            <summary>
            Gets the base call dependencies collected so far.
            </summary>
            <value>The base call dependencies collected so far by this object.</value>
        </member>
        <member name="P:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder.IntroducedMemberVisiblity">
            <summary>
            Gets the default introduced member visiblity for this mixin.
            </summary>
            <value>The default introduced member visiblity.</value>
        </member>
        <member name="T:Remotion.Collections.NullDataStore`2">
            <summary>
            This class implements a data store that doesn't actually store anything. It's part of the null object pattern.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderStringHandler">
            <summary>
            Handles <see cref="T:System.String"/>s in <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>'s <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToText(System.Object,Remotion.Diagnostics.ToText.IToTextBuilder)"/> fallback cascade.
            If <see cref="P:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderSettings.UseAutomaticStringEnclosing"/> is true it wraps strings in double quotes.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderRegisteredTypeHandler">
            <summary>
            Handles registered types in <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>'s <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToText(System.Object,Remotion.Diagnostics.ToText.IToTextBuilder)"/> fallback cascade.
            Depending on the configuration of the class instance, only the handler whose type matches the instance type, or the nearest registered base type handler will be used used.
            Type handlers are registered through calling <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.RegisterSpecificTypeHandler``1(System.Action{``0,Remotion.Diagnostics.ToText.IToTextBuilder})"/>.
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderRegisteredTypeHandler.#ctor(Remotion.Diagnostics.ToText.Infrastructure.ToTextSpecificHandlerMap{Remotion.Diagnostics.ToText.Infrastructure.IToTextSpecificTypeHandler},System.Boolean)">
            <summary>
            Constructs a handler using the passed handler map.
            </summary>
            <param name="typeHandlerMap">The handler map. External container so it can be shared with a 2nd 
            instance configured to exhibit different registered type handling behavior.</param> 
            <param name="searchForParentHandlers">If <c>false</c> only uses a handler if his type matches the type of the instance passed 
            to <see cref="M:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderRegisteredTypeHandler.ToTextIfTypeMatches(Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextParameters,Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderHandlerFeedback)"/>. If <c>true</c> recursively searches for the nearest registered base type handler, 
            if no exact match can be found.</param>
        </member>
        <member name="T:Remotion.Context.BootstrapStorageProvider">
            <summary>
            Implements <see cref="T:Remotion.Context.ISafeContextStorageProvider"/> for bootstrapping of <see cref="T:Remotion.Context.SafeContext"/>. This provider should not be
            used for any other purpose because it does not store its data in a thread-local way.
            </summary>
        </member>
        <member name="M:Remotion.Xml.SchemaLoaderBase.LoadSchemaSet">
            <summary> Gets an <see cref="T:System.Xml.Schema.XmlSchemaSet"/> for the schema specified with property <see cref="P:Remotion.Xml.SchemaLoaderBase.SchemaFile"/> that is embedded in the assembly. </summary>
            <remarks> Overwrite this method if the Schema includes other schemas that need to be loaded first. </remarks>
            <exception cref="T:System.ApplicationException"> Thrown if the schema file could not be loaded. </exception>
        </member>
        <member name="M:Remotion.Xml.SchemaLoaderBase.LoadSchema(System.String)">
            <summary> Gets an <see cref="T:System.Xml.Schema.XmlSchema"/> for a schema embedded in the assembly. </summary>
            <exception cref="T:System.ApplicationException"> Thrown if the schema file could not be loaded. </exception>
        </member>
        <member name="T:Remotion.Utilities.NameValueCollectionUtility">
            <summary>
              Utility class for <see cref="T:System.Collections.Specialized.NameValueCollection"/>
            </summary>
        </member>
        <member name="M:Remotion.Utilities.NameValueCollectionUtility.Append(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
              Adds the second dictionary to the first. If a key occurs in both dictionaries, the value of the second
              dictionaries is taken.
            </summary>
            <param name="first"> Must not be <see langword="null"/>. </param>
            <param name="second"> Must not be <see langword="null"/>. </param>
        </member>
        <member name="M:Remotion.Utilities.NameValueCollectionUtility.Merge(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
              Merges two collections. If a key occurs in both collections, the value of the second collections is taken.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.ListUtility">
            <summary>
            Provides utility methods for processing IList instances. 
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.To">
            <summary>
            <para>
            Gives convenient access to the transformation of arbitrary objects into human readable text form using 
            <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/> and <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>.
            </para>
            </summary>
            
            <remarks>
            <para>
            The <see cref="T:Remotion.Diagnostics.ToText.To"/> class supplies the following functionality:
            <list type="number">
            <item>Provides convenient access to a <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/> instance through <see cref="M:Remotion.Diagnostics.ToText.To.Text(System.Object)"/>.</item> 
            <item>Automatically registers type and interface handlers for use by <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/> (see examples below)</item>
            <item>Supplies several <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/> instances preconfigured for specific usage scenarios.</item>
            </list>
            </para>
            
            <example>
            <para>
            The following shows a sample of an autoregistered type handler. 
            All type handlers must implement <see cref="T:Remotion.Diagnostics.ToText.Infrastructure.IToTextSpecificTypeHandler"/> 
            (or derive from a class that does, e.g. <see cref="T:Remotion.Diagnostics.ToText.ToTextSpecificTypeHandler`1"/>). 
            The <see cref="T:Remotion.Diagnostics.ToText.ToTextSpecificHandlerAttribute"/> marks the handler for autoregistration.
            <code>
            <![CDATA[
            [ToTextSpecificHandler]
            public class ToTextTestToTextSpecificTypeHandler : ToTextSpecificTypeHandler<ToTextTest>
            {
              public override void ToText (ToTextTest t, IToTextBuilder toTextBuilder)
              {
                toTextBuilder.s ("handled by ToTextTestToTextSpecificTypeHandler");
              }
            }
            ]]>
            </code>
            </para>
            </example>
            
            <example>
            <para>
            The following shows a sample of an autoregistered interface handler. 
            All interface handlers must implement <see cref="T:Remotion.Diagnostics.ToText.Infrastructure.IToTextSpecificInterfaceHandler"/> 
            (or derive from a class that does, e.g. <see cref="T:Remotion.Diagnostics.ToText.ToTextSpecificInterfaceHandler`1"/>). 
            The <see cref="T:Remotion.Diagnostics.ToText.ToTextSpecificHandlerAttribute"/> marks the handler for autoregistration.
            <code>
            <![CDATA[
            [ToTextSpecificHandler]
            class ITestSimpleNameToTextSpecificInterfaceHandler : ToTextSpecificInterfaceHandler<ITestSimpleName>
            {
              public override void ToText (ITestSimpleName t, IToTextBuilder toTextBuilder)
              {
                toTextBuilder.sb().e ("TestSimple").e (t.Name).se ();
              }
            }  
            ]]>
            </code>
            </para>
            </example>
            </remarks>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.To.Text(System.Object)">
            <summary>
            <para>Returns a human-readable text representation (using a <see cref="P:Remotion.Diagnostics.ToText.To.ToTextProvider"/> instance; 
            see <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>) of the passed argument.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.To.GetTypeHandlers">
            <summary>
            <para>Returns all autoregistered type handlers (see <see cref="T:Remotion.Diagnostics.ToText.Infrastructure.IToTextSpecificTypeHandler"/>) in the system. 
            Type handlers which carry the <see cref="T:Remotion.Diagnostics.ToText.ToTextSpecificHandlerAttribute"/> are autoregistered at 
            the first call to <see cref="M:Remotion.Diagnostics.ToText.To.GetTypeHandlers"/> through reflection. 
            Consecutive calls return the cached <see cref="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextSpecificHandlerMap`1"/> of the autoregistered type handlers.
            </para>
            </summary>    
        </member>
        <member name="M:Remotion.Diagnostics.ToText.To.GetInterfaceHandlers">
            <summary>
            <para>Returns all autoregistered interface handlers (see <see cref="T:Remotion.Diagnostics.ToText.Infrastructure.IToTextSpecificInterfaceHandler"/>) in the system. 
            Interface handlers which carry the <see cref="T:Remotion.Diagnostics.ToText.ToTextSpecificHandlerAttribute"/> are autoregistered at 
            the first call to <see cref="M:Remotion.Diagnostics.ToText.To.GetInterfaceHandlers"/> through reflection. 
            Consecutive calls return the cached <see cref="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextSpecificHandlerMap`1"/> of the autoregistered interface handlers.
            </para>
            </summary>  
        </member>
        <member name="M:Remotion.Diagnostics.ToText.To.TextEnableAutomatics(System.Boolean)">
            <summary>
            <para>Enables/disables automatic settings in the <see cref="P:Remotion.Diagnostics.ToText.To.ToTextProvider"/>
            (<see cref="P:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderSettings.UseAutomaticObjectToText"/>,
            <see cref="P:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderSettings.UseAutomaticStringEnclosing"/>,
            <see cref="P:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderSettings.UseAutomaticCharEnclosing"/>,
            <see cref="P:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderSettings.UseInterfaceHandlers"/>),
            according to the passed argument.
            </para>
            </summary>   
        </member>
        <member name="P:Remotion.Diagnostics.ToText.To.ToTextProvider">
            <summary>
            <para>The thread-static <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>. 
            See <see cref="T:Remotion.Diagnostics.ToText.To"/>.<see cref="M:Remotion.Diagnostics.ToText.To.Text(System.Object)"/> for convenient way to call <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToTextString(System.Object)"/> for the <see cref="P:Remotion.Diagnostics.ToText.To.ToTextProvider"/> </para>
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.ToText.To.Console">
            <summary>
            <para>Returns a <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/> which writes to the console output stream (<see cref="P:System.Console.Out"/>).</para>
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.ToText.To.ConsoleLine">
            <summary>
            <para>Returns a <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/> which writes to the console output stream (<see cref="P:System.Console.Out"/>).
            A newline is emitted before returning the <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/>.</para>
            </summary>
        </member>
        <member name="P:Remotion.Diagnostics.ToText.To.Error">
            <summary>
            <para>Returns a <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/> preconfigured to write to the console error stream (<see cref="P:System.Console.Error"/>).</para>
            </summary>    
        </member>
        <member name="P:Remotion.Diagnostics.ToText.To.TempLog">
            <summary>
            <para>Returns a <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/> preconfigured to write to a logfile in the users temp directory (<see cref="M:System.IO.Path.GetTempPath"/>).</para>
            </summary>    
        </member>
        <member name="P:Remotion.Diagnostics.ToText.To.TempLogXml">
            <summary>
            <para>Returns a <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/> preconfigured to write to an XML-logfile
            in the users temp directory (<see cref="M:System.IO.Path.GetTempPath"/>) through an <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilderXml"/>.</para>
            </summary>    
        </member>
        <member name="P:Remotion.Diagnostics.ToText.To.String">
            <summary>
            <para>Returns a new <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/> preconfigured to write to a <see cref="T:System.IO.StringWriter"/>.
            Call <see cref="M:Remotion.Diagnostics.ToText.ToTextBuilder.ToString"/> on the returned <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/> to get the resulting string.
            </para>
            </summary>    
        </member>
        <member name="P:Remotion.Diagnostics.ToText.To.LogFileDirectory">
            <summary>
            <para>Returns the path to the logfiles written to by <see cref="P:Remotion.Diagnostics.ToText.To.TempLog"/> and <see cref="P:Remotion.Diagnostics.ToText.To.TempLogXml"/>.</para>
            </summary>    
        </member>
        <member name="P:Remotion.Diagnostics.ToText.To.LogFilePath">
            <summary>
            <para>Returns the path to the XML logfile written to by <see cref="P:Remotion.Diagnostics.ToText.To.TempLogXml"/>.</para>
            </summary>    
        </member>
        <member name="P:Remotion.Diagnostics.ToText.To.XmlLogFilePath">
            <summary>
            <para>Returns the path to the plain text logfile written to by <see cref="P:Remotion.Diagnostics.ToText.To.TempLog"/>.</para>
            </summary>    
        </member>
        <member name="M:Remotion.Diagnostics.ToText.ToTextILogExtensionMethods.IsLogLevelEnabled(Remotion.Logging.ILog,Remotion.Logging.LogLevel)">
            <summary>
            Returns true if the passed <see cref="T:Remotion.Logging.LogLevel"/>  is enabled in the <see cref="T:Remotion.Logging.ILog"/>.
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.ToTextILogExtensionMethods.Log(Remotion.Logging.ILog,Remotion.Logging.LogLevel,System.Func{Remotion.Diagnostics.ToText.ToTextBuilder,Remotion.Diagnostics.ToText.IToTextBuilder})">
            <summary>
            Delayed execution Logging through a passed <see cref="T:Remotion.Diagnostics.ToText.IToTextBuilder"/>  <c> =&gt; </c>  <see cref="T:Remotion.Diagnostics.ToText.IToTextBuilder"/> lambda expression.
            </summary>
            <remarks>
            Delayed execution Logging through lambda expression mapping a <see cref="T:Remotion.Diagnostics.ToText.IToTextBuilder"/> to 
            a  <see cref="T:Remotion.Diagnostics.ToText.IToTextBuilder"/> on which the required  <see cref="T:Remotion.Diagnostics.ToText.IToTextBuilder"/> 
            write calls are executed.
            <example><code><![CDATA[
            var log = LogManager.GetLogger (typeof (ToTest));
            log.Log (LogLevel.Debug, ttb => ttb.sb ().e(myVariable).e ("Some text").se ());
            ]]></code></example>
            </remarks>
        </member>
        <member name="F:Remotion.Text.CommandLine.CommandLineClassParser._arguments">
            <summary> IDictionary &lt;CommandLineArgument, MemberInfo&gt; </summary>
        </member>
        <member name="T:Remotion.Reflection.DelegateSelector">
            <summary>
            A function that will create a delegate to call from <see cref="T:Remotion.Reflection.FuncInvoker`1"/>.
            </summary>
            <param name="delegateType"> Type of the delegate that will be created. </param>
            <returns> The delegate used to call the wrapped method. </returns>
        </member>
        <member name="T:Remotion.Reflection.AssemblyFinderTypeDiscoveryService">
            <summary>
            Provides an implementation of the <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService"/> interface that uses an <see cref="P:Remotion.Reflection.AssemblyFinderTypeDiscoveryService.AssemblyFinder"/> to
            retrieve types. This class can be used to build components that can retrieve types via <see cref="T:System.ComponentModel.Design.IDesignerHost"/> and
            <see cref="P:Remotion.Reflection.AssemblyFinderTypeDiscoveryService.AssemblyFinder"/> using the same code for both. For example, it is used by <see cref="T:Remotion.Reflection.ContextAwareTypeDiscoveryUtility"/>
            in the standard context.
            </summary>
        </member>
        <member name="M:Remotion.Reflection.AssemblyFinderTypeDiscoveryService.#ctor(Remotion.Reflection.AssemblyFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Reflection.AssemblyFinderTypeDiscoveryService"/> class with a specific <see cref="P:Remotion.Reflection.AssemblyFinderTypeDiscoveryService.AssemblyFinder"/>
            instance.
            </summary>
            <param name="assemblyFinder">The assembly finder used by this service instance to retrieve types.</param>
        </member>
        <member name="M:Remotion.Reflection.AssemblyFinderTypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
            <summary>
            Retrieves the list of types available in the assemblies found by the <see cref="P:Remotion.Reflection.AssemblyFinderTypeDiscoveryService.AssemblyFinder"/> specified in the constructor.
            </summary>
            <param name="baseType">The base type to match. Can be null.</param>
            <param name="excludeGlobalTypes">Indicates whether types from all referenced assemblies should be checked.</param>
            <returns>
            A collection of types that match the criteria specified by baseType and excludeGlobalTypes.
            </returns>
        </member>
        <member name="P:Remotion.Reflection.AssemblyFinderTypeDiscoveryService.AssemblyFinder">
            <summary>
            Gets the assembly finder used by this service to discover types. The service simply returns the types returned by the
            <see cref="M:System.Reflection.Assembly.GetTypes"/> method for the assemblies found by this object.
            </summary>
            <value>The assembly finder used for type discovery.</value>
        </member>
        <member name="T:Remotion.Collections.AutoInitHashtable">
            <summary>
              A hashtable that automatically creates new value objects when queried for a specific key.
            </summary>
            <remarks>
            	This collection cannot be modified using <see cref="M:System.Collections.Hashtable.Add(System.Object,System.Object)"/> and setting values through the indexer. Getting values through the indexer
            	will assign a new object to the specified key if none exists.
            </remarks>
        </member>
        <member name="T:Remotion.Mixins.Context.MixinContext">
            <summary>
            Represents a single mixin applied to a target class.
            </summary>
            <threadsafety static="true" instance="true"/>
            <remarks>
            Instances of this class are immutable.
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.Context.MixinContext.#ctor(Remotion.Mixins.MixinKind,System.Type,Remotion.Mixins.MemberVisibility,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Mixins.Context.MixinContext"/> class.
            </summary>
            <param name="mixinKind">The kind of relationship the configured mixin has with its target class.</param>
            <param name="mixinType">The mixin type represented by this <see cref="T:Remotion.Mixins.Context.MixinContext"/>.</param>
            <param name="introducedMemberVisibility">The default visbility of introduced members.</param>
            <param name="explicitDependencies">The explicit dependencies of the mixin.</param>
        </member>
        <member name="M:Remotion.Mixins.Context.MixinContext.#ctor(Remotion.Mixins.MixinKind,System.Type,Remotion.Mixins.MemberVisibility,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Mixins.Context.MixinContext"/> class.
            </summary>
            <param name="mixinKind">The kind of mixin represented by this <see cref="T:Remotion.Mixins.Context.MixinContext"/>.</param>
            <param name="mixinType">The mixin type represented by this <see cref="T:Remotion.Mixins.Context.MixinContext"/>.</param>
            <param name="introducedMemberVisibility">The default visbility of introduced members.</param>
            <param name="explicitDependencies">The explicit dependencies of the mixin.</param>
        </member>
        <member name="M:Remotion.Mixins.Context.MixinContext.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:Remotion.Mixins.Context.MixinContext"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with this <see cref="T:Remotion.Mixins.Context.MixinContext"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"></see> is a <see cref="T:Remotion.Mixins.Context.MixinContext"/> for the same mixin type with equal explicit
            dependencies; otherwise, false.
            </returns>
        </member>
        <member name="M:Remotion.Mixins.Context.MixinContext.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:Remotion.Mixins.Context.MixinContext"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Remotion.Mixins.Context.MixinContext"/> which includes the hash codes of its mixin type and its explicit dependencies.
            </returns>
        </member>
        <member name="P:Remotion.Mixins.Context.MixinContext.ExplicitDependencies">
            <summary>
            Gets the explicit dependencies added to this <see cref="T:Remotion.Mixins.Context.MixinContext"/>.
            </summary>
            <value>The explicit dependencies added to this <see cref="T:Remotion.Mixins.Context.MixinContext"/>.</value>
            <remarks>An explicit dependency is a base call dependency which should be considered for a mixin even though it is not expressed in the
            mixin's class declaration. This can be used to define the ordering of mixins in specific mixin configurations.</remarks>
        </member>
        <member name="P:Remotion.Mixins.Context.MixinContext.IntroducedMemberVisibility">
            <summary>
            Gets the default visibility of members introduced by this mixin.
            </summary>
            <value>The default introduced member visibility.</value>
        </member>
        <member name="P:Remotion.Mixins.Context.MixinContext.MixinType">
            <summary>
            The mixin type represented by the <see cref="T:Remotion.Mixins.Context.MixinContext"/>.
            </summary>
        </member>
        <member name="P:Remotion.Mixins.Context.MixinContext.MixinKind">
            <summary>
            The kind of relationship the configured mixin has with its target class.
            </summary>
        </member>
        <member name="T:Remotion.Logging.Log4NetTraceListener">
            <summary>
            A <see cref="T:System.Diagnostics.TraceListener"/> that directs tracing or debugging output to <b>log4net</b>.
            </summary>
            <remarks>See <see cref="T:System.Diagnostics.TraceSource"/> for information on how to configure a <see cref="T:System.Diagnostics.TraceListener"/>.</remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.Convert(System.Diagnostics.TraceEventType)">
            <summary>
            Converts <see cref="T:System.Diagnostics.TraceEventType"/> to <see cref="T:Remotion.Logging.LogLevel"/>.
            </summary>
            <param name="eventType">The <see cref="T:System.Diagnostics.TraceEventType"/> to be converted.</param>
            <returns>Corresponding <see cref="T:Remotion.Logging.LogLevel"/> needed when logging through the <see cref="T:Remotion.Logging.ILog"/> interface.</returns>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Logging.Log4NetTraceListener"/> class. 
            </summary>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Logging.Log4NetTraceListener"/> class using the specified name. 
            </summary>
            <param name="name">
      The name of the <see cref="T:Remotion.Logging.Log4NetTraceListener"/>.
    </param>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.Write(System.String)">
            <overloads>Writes a message to the <b>log4net</b> log. </overloads>
            <summary>
            Writes a message to the <b>log4net</b> log. 
            </summary>
            <param name="message">A message to write.</param>
            <remarks>
            <see cref="M:Remotion.Logging.Log4NetTraceListener.Write(System.String)"/> does not use <see cref="T:System.Diagnostics.TraceFilter"/>, even though the inherited overloads
            use it; this follows the behavior of the standard <see cref="T:System.Diagnostics.TraceListener"/> implementations like 
            <see cref="T:System.Diagnostics.EventLogTraceListener"/> and <see cref="T:System.Diagnostics.TextWriterTraceListener"/>; 
            this behavior is not explicitely documented for the classes of System.Diagnostics.
            </remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.WriteLine(System.String)">
            <overloads>Writes a message to the <b>log4net</b> log. </overloads>
            <summary>
            Writes a message to the <b>log4net</b> log. 
            </summary>
            <param name="message">A message to write.</param>
            <remarks>
            <see cref="M:Remotion.Logging.Log4NetTraceListener.WriteLine(System.String)"/> has identical behavior to <see cref="M:Remotion.Logging.Log4NetTraceListener.Write(System.String)"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
            <overloads>Writes trace and event information to the <b>log4net</b> log.</overloads>
            <summary>
            Writes trace and event information to the <b>log4net</b> log.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param><param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param><param name="id">A numeric identifier for the event.</param>
            <remarks>The <paramref name="eventCache"/> parameter is not logged, since <b>log4net</b> features can provide the same information.
      As such <see cref="P:System.Diagnostics.TraceListener.TraceOutputOptions"/> is not relevant, too. 
      When using a <see cref="T:System.Diagnostics.TraceFilter"/>, <paramref name="eventCache"/> can be used the normal way. 
    </remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes trace information, a message, and event information to the <b>log4net</b> log.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param><param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param><param name="id">A numeric identifier for the event.</param><param name="message">A message to write.</param>
            <remarks>The <paramref name="eventCache"/> parameter is not logged, since <b>log4net</b> features can provide the same information.
      As such <see cref="P:System.Diagnostics.TraceListener.TraceOutputOptions"/> is not relevant, too. 
      When using a <see cref="T:System.Diagnostics.TraceFilter"/>, <paramref name="eventCache"/> can be used the normal way. 
    </remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes trace information, a formatted array of objects and event information to the <b>log4net</b> log.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param><param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param><param name="id">A numeric identifier for the event.</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array.</param><param name="args">An object array containing zero or more objects to format.</param>
            <remarks>The <paramref name="eventCache"/> parameter is not logged, since <b>log4net</b> features can provide the same information.
      As such <see cref="P:System.Diagnostics.TraceListener.TraceOutputOptions"/> is not relevant, too. 
      When using a <see cref="T:System.Diagnostics.TraceFilter"/>, <paramref name="eventCache"/> can be used the normal way. 
    </remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <overloads>Writes trace data to the <b>log4net</b> log. </overloads>
            <summary>
            Writes trace information, a data object and event information to the <b>log4net</b> log.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param><param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param><param name="id">A numeric identifier for the event.</param>
            <param name="data">The trace data to emit.</param>
            <remarks>The <paramref name="eventCache"/> parameter is not logged, since <b>log4net</b> features can provide the same information.
      As such <see cref="P:System.Diagnostics.TraceListener.TraceOutputOptions"/> is not relevant, too. 
      When using a <see cref="T:System.Diagnostics.TraceFilter"/>, <paramref name="eventCache"/> can be used the normal way. 
    </remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Writes trace information, an array of data objects and event information to the <b>log4net</b> log.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param><param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param><param name="id">A numeric identifier for the event.</param>
            <param name="data">An array of objects to emit as data.</param>
            <remarks>The <paramref name="eventCache"/> parameter is not logged, since <b>log4net</b> features can provide the same information.
      As such <see cref="P:System.Diagnostics.TraceListener.TraceOutputOptions"/> is not relevant, too. 
      When using a <see cref="T:System.Diagnostics.TraceFilter"/>, <paramref name="eventCache"/> can be used the normal way. 
    </remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
            <summary>
            Writes trace information, a message, a related activity identity and event information to the <b>log4net</b> log.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param><param name="id">A numeric identifier for the event.</param><param name="message">A message to write.</param>
            <param name="relatedActivityId">A <see cref="T:System.Guid"/> object identifying a related activity.</param>
            <remarks>The <paramref name="eventCache"/> parameter is not logged, since <b>log4net</b> features can provide the same information.
      As such <see cref="P:System.Diagnostics.TraceListener.TraceOutputOptions"/> is not relevant, too. 
      When using a <see cref="T:System.Diagnostics.TraceFilter"/>, <paramref name="eventCache"/> can be used the normal way. 
    </remarks>
        </member>
        <member name="M:Remotion.Reflection.CodeGeneration.IClassEmitter.CreateFullNamedMethodOverride(System.Reflection.MethodInfo)">
            <summary>
            Creates a full-named method override, i.e. a method override with the same visibility as whose name includes the name of the base method's
            declaring type, similar to an explicit interface implementation.
            </summary>
            <param name="baseMethod">The base method to override.</param>
            <returns>A <see cref="T:Remotion.Reflection.CodeGeneration.CustomMethodEmitter"/> for the full-named method override.</returns>
            <remarks>This method can be useful when overriding several (shadowed) methods of the same name inherited by different base types.</remarks>
        </member>
        <member name="M:Remotion.Reflection.CodeGeneration.IClassEmitter.CreatePublicInterfaceMethodImplementation(System.Reflection.MethodInfo)">
            <summary>
            Creates a public interface method implementation, i.e. an interface implementation with public visibility whose name equals the name
            of the interface method (like a C# implicit interface implementation).
            </summary>
            <param name="interfaceMethod">The interface method to implement.</param>
            <returns>A <see cref="T:Remotion.Reflection.CodeGeneration.CustomMethodEmitter"/> for the interface implementation.</returns>
            <remarks>The generated method has public visibility and the <see cref="F:System.Reflection.MethodAttributes.NewSlot"/> flag set. This means that the method
            will shadow methods from the base type with the same name and signature, not override them. Use <see cref="M:Remotion.Reflection.CodeGeneration.IClassEmitter.CreateFullNamedMethodOverride(System.Reflection.MethodInfo)"/> to
            explicitly create an override for such a method.</remarks>
        </member>
        <member name="M:Remotion.Reflection.CodeGeneration.IClassEmitter.CreateNestedClass(System.String,System.Type,System.Type[])">
            <summary>
            Creates a nested class within the type emitted by this <see cref="T:Remotion.Reflection.CodeGeneration.IClassEmitter"/>.
            </summary>
            <param name="typeName">The name of the nested type.</param>
            <param name="baseType">The base type of the nested type.</param>
            <param name="interfaces">The interfaces to be implemented by the nested type.</param>
            <returns>A new <see cref="T:Remotion.Reflection.CodeGeneration.IClassEmitter"/> for the nested class.</returns>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderIToTextHandlerHandler">
            <summary>
            <para>Handles instances which implement the <see cref="T:Remotion.Diagnostics.ToText.IToTextConvertible"/> interface in <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>'s <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToText(System.Object,Remotion.Diagnostics.ToText.IToTextBuilder)"/> fallback cascade.
            Types implementing <see cref="T:Remotion.Diagnostics.ToText.IToTextConvertible"/> supply a <see cref="M:Remotion.Diagnostics.ToText.IToTextConvertible.ToText(Remotion.Diagnostics.ToText.IToTextBuilder)"/> method, which is called to do the transformation into human readable text form.
            <see cref="M:Remotion.Diagnostics.ToText.IToTextConvertible.ToText(Remotion.Diagnostics.ToText.IToTextBuilder)"/> can be seen as the ToText-sibling of <see cref="M:System.Object.ToString"/> (Note that it works more efficiently since it 
            works by appending its result to a <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/> instead of returning a <see cref="T:System.String"/>).</para>
            </summary>
        </member>
        <member name="T:Remotion.Utilities.StringUtility">
            <summary>
            Provides utility functions that make common string handling easier.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.StringUtility.ParseSeparatedList(System.String,System.Char)">
            <summary>
              Parses a delimiter-separated string into individual elements.
            </summary>
            <remarks>
              This method handles quotes and escaping. A quoted string may contain commas that
              will not be treated as separators. Commas prefixed with a backslash are treated
              like normal commas, double backslashes are treated as single backslashes.
            </remarks>
            <param name="value"> The string to be parsed. Must not be <see langword="null"/>. </param>
            <param name="delimiter"> The character used for list separation. Default is comma (,). </param>
        </member>
        <member name="M:Remotion.Utilities.StringUtility.ParseSeparatedList(System.String)">
            <summary>
              Parses a delimiter-separated string into individual elements.
            </summary>
            <remarks>
              This method handles quotes and escaping. A quoted string may contain commas that
              will not be treated as separators. Commas prefixed with a backslash are treated
              like normal commas, double backslashes are treated as single backslashes.
            </remarks>
            <param name="value"> The string to be parsed. Must not be <see langword="null"/>. </param>
        </member>
        <member name="M:Remotion.Utilities.StringUtility.ParseSeparatedList(System.String,System.Char,System.Char,System.Char,System.Char,System.String,System.Boolean)">
            <summary>
              Parses a delimiter-separated string into individual elements.
            </summary>
            <remarks>
              This method handles quotes and escaping. A quoted string may contain commas that
              will not be treated as separators. Commas prefixed with a backslash are treated
              like normal commas, double backslashes are treated as single backslashes.
            </remarks>
            <param name="value"> The string to be parsed. Must not be <see langword="null"/>. </param>
            <param name="delimiter"> The character used for list separation. Default is comma (,). </param>
            <param name="openingQuote"> The character used as opening quote. Default is double quote (&quot;). </param>
            <param name="closingQuote"> The character used as closing quote. Default is double quote (&quot;). </param>
            <param name="escapingChar"> The character used to escape quotes and itself. Default is backslash (\). </param>
            <param name="whitespaceCharacters"> A string containing all characters to be considered whitespace. 
              Default is space character only. </param>
            <param name="interpretSpecialCharacters"> If true, the escaping character can be followed by the letters
              r, n or t (case sensitive) for line feeds, new lines or tab characters, respectively. Default is true. </param>
        </member>
        <member name="M:Remotion.Utilities.StringUtility.AreEqual(System.String,System.String)">
            <summary>
            Compares two strings using the invariant culture.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.StringUtility.AreEqual(System.String,System.String,System.Boolean)">
            <summary>
            Compares two strings using the invariant culture.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.StringUtility.Parse(System.Type,System.String,System.IFormatProvider)">
            <summary>
              Parses the specified type from a string.
            </summary>
            <param name="type"> The type that should be created from the string. This type must have 
              a public <see langword="static"/> <b>Parse</b> method with either no arguments or a single 
              <see cref="T:System.IFormatProvider"/>argument. 
              If <paramref name="type"/> is an array type, the values must be comma-separated. (Escaping is 
              handled as for <see cref="M:Remotion.Utilities.StringUtility.ParseSeparatedList(System.String,System.Char)"/>.) </param>
            <param name="value"> The string value to be parsed. </param>
            <param name="formatProvider"> The format provider to be passed to the type's <b>Parse</b> method (if present). </param>
            <returns> An instance of the specified type. </returns>
            <exception cref="T:Remotion.Utilities.ParseException"> The <b>Parse</b> method was not found, or failed. </exception>
        </member>
        <member name="T:Remotion.Utilities.StringUtility.ParsedItem">
            <summary>
              The result of <see cref="M:Remotion.Utilities.StringUtility.ParseSeparatedList(System.String,System.Char)"/>.
            </summary>
        </member>
        <member name="F:Remotion.Utilities.StringUtility.ParsedItem.Value">
            <summary> The string value at this position. </summary>
        </member>
        <member name="F:Remotion.Utilities.StringUtility.ParsedItem.IsQuoted">
            <summary> An indicator that is <c>true</c> if the string at this position was quoted in the input string. </summary>
        </member>
        <member name="T:Remotion.Utilities.EnumerableUtility">
            <summary>
            Provides helper functions for <see cref="T:System.Collections.Generic.IEnumerable`1"/> objects.
            </summary>
            <remarks>
            Most of these methods will become obsolete with C# 3.0/LINQ.
            </remarks>
        </member>
        <member name="T:Remotion.Utilities.AttributeUtility">
            <summary>
            Utility class for finding custom attributes via their type or an interface implemented by the type.
            </summary>
        </member>
        <member name="M:Remotion.Text.StringExtensions.StringExtensions.LeftUntilChar(System.String,System.Char)">
            <summary>
            Returns the substring of the passed string starting at the first character and 
            ending at the passed seperator character, excluding the seperator character.
            </summary>
        </member>
        <member name="M:Remotion.Text.StringExtensions.StringExtensions.RightUntilChar(System.String,System.Char)">
            <summary>
            Returns the substring of the passed string starting at the last character and ending at 
            the passed seperator character, excluding the seperator character.
            </summary>
        </member>
        <member name="M:Remotion.Text.StringExtensions.StringExtensions.EscapeString(System.String,System.Text.StringBuilder)">
            <summary>
            Appends the passed string to the passed <see cref="T:System.Text.StringBuilder"/>, replacing all tabs,newlines, linefeeds, etc 
            with their escaped C# string representation. E.g. tabulator =&gt; \t .
            See also <see cref="M:Remotion.Text.StringExtensions.StringExtensions.Escape(System.String)"/>.
            </summary>
        </member>
        <member name="M:Remotion.Text.StringExtensions.StringExtensions.Escape(System.String)">
            <summary>
            Returns the passed string with all tabs, newlines, linefeeds, etc 
            replaced with their escaped C# string representation. E.g. tabulator =&gt; \t .
            See also <see cref="M:Remotion.Text.StringExtensions.StringExtensions.EscapeString(System.String,System.Text.StringBuilder)"/>.
            </summary>
        </member>
        <member name="T:Remotion.Mixins.Definitions.Building.MemberChain`1">
            <summary>
            MemberChain takes an enumeration of members and orders them according to the hierarchy of their declaring types. This can be used
            to find out what members override or shadow other members of the same name and signature.
            </summary>
            <typeparam name="T">The member type to be chained, must be assignable from <see cref="T:System.Reflection.MemberInfo"/>.</typeparam>
        </member>
        <member name="M:Remotion.Reflection.CodeGeneration.CustomClassEmitter.CreateFullNamedMethodOverride(System.Reflection.MethodInfo)">
            <summary>
            Creates a full-named method override, i.e. a method override with the same visibility as whose name includes the name of the base method's
            declaring type, similar to an explicit interface implementation.
            </summary>
            <param name="baseMethod">The base method to override.</param>
            <returns>
            A <see cref="T:Remotion.Reflection.CodeGeneration.CustomMethodEmitter"/> for the full-named method override.
            </returns>
            <remarks>This method can be useful when overriding several (shadowed) methods of the same name inherited by different base types.</remarks>
        </member>
        <member name="M:Remotion.Reflection.CodeGeneration.CustomClassEmitter.CreatePublicInterfaceMethodImplementation(System.Reflection.MethodInfo)">
            <summary>
            Creates a public interface method implementation, i.e. an interface implementation with public visibility whose name equals the name
            of the interface method (like a C# implicit interface implementation).
            </summary>
            <param name="interfaceMethod">The interface method to implement.</param>
            <returns>A <see cref="T:Remotion.Reflection.CodeGeneration.CustomMethodEmitter"/> for the interface implementation.</returns>
            <remarks>The generated method has public visibility and the <see cref="F:System.Reflection.MethodAttributes.NewSlot"/> flag set. This means that the method
            will shadow methods from the base type with the same name and signature, not override them. Use <see cref="M:Remotion.Reflection.CodeGeneration.CustomClassEmitter.CreateFullNamedMethodOverride(System.Reflection.MethodInfo)"/> to
            explicitly create an override for such a method.</remarks>
        </member>
        <member name="M:Remotion.Reflection.CodeGeneration.CustomClassEmitter.CreateNestedClass(System.String,System.Type,System.Type[])">
            <summary>
            Creates a nested class within the type emitted by this <see cref="T:Remotion.Reflection.CodeGeneration.IClassEmitter"/>.
            </summary>
            <param name="typeName">The name of the nested type.</param>
            <param name="baseType">The base type of the nested type.</param>
            <param name="interfaces">The interfaces to be implemented by the nested type.</param>
            <returns>
            A new <see cref="T:Remotion.Reflection.CodeGeneration.IClassEmitter"/> for the nested class.
            </returns>
        </member>
        <member name="T:Remotion.Globalization.ResourceManagerFactory">
            <summary>
            Provides methods to create resource managers for given resource management information.
            </summary>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerFactory.GetResourceManagers``1(System.Reflection.Assembly,``0[])">
            <summary>
              Returns an <b>ResourceManager</b> array for the resource containers specified through the 
              <paramref name="resourceAttributes"/>.
            </summary>
            <remarks>
      ResourceManagers are cached after their first initalization.
    </remarks><param name="assembly">
      The assembly containing the resources.
    </param><param name="resourceAttributes">
      The <see cref="T:Remotion.Globalization.MultiLingualResourcesAttribute"/> instances specifying the the resource managers.
    </param><returns>
      A <b>ResourceManager</b> Array containing the type's resource containers.
    </returns>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.DisableableWriter">
            <summary>
            Wrapper around <see cref="P:Remotion.Diagnostics.ToText.Infrastructure.DisableableWriter.TextWriter"/> class which supports enabling/disabling of its <see cref="M:Remotion.Diagnostics.ToText.Infrastructure.DisableableWriter.Write(System.Object)"/> method 
            through its <see cref="P:Remotion.Diagnostics.ToText.Infrastructure.DisableableWriter.Enabled"/> property.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.AppDomainAssemblyResolver">
            <summary>
            Helper class for resolving assemblies when executing code in a separate <see cref="T:System.AppDomain"/>.
            </summary>
        </member>
        <member name="T:Remotion.DisposableBase">
            <summary>
            This class can be used as a base class for any class that needs to implement <see cref="T:System.IDisposable"/>.
            <see cref="T:Remotion.DisposableExplicitBase"/>
            </summary>
        </member>
        <member name="T:Remotion.DisposableExplicitBase">
            <summary>
            This class can be used as a base class for any class that needs to implement <see cref="T:System.IDisposable"/>, but does not want to 
            expose a public <c>Dispose</c> method.
            <see cref="T:Remotion.DisposableBase"/>
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypesafeActivator">
            <summary>
            Create an instance of a known type using fixed parameter types for the constructor.
            </summary>
            <remarks>
            While <see cref="M:System.Activator.CreateInstance(System.Type,System.Object[])"/> uses the types of passed arguments to select the correct constructor, this class
            uses the types of the expressions you use at compile time. Use the following code to create an instance of a class called MyClass using a 
            constructor that has an argument of type string:
            <code>
              ParameterType p;
              YourClass obj = TypesafeActivator.CreateInstance&lt;YourClass&gt;().With (p);
            </code>
            This code always selects the constructor that accepts an argument of type ParameterType, even if the value passed is null or an instance
            of a subclass of ParameterType.
            </remarks>
        </member>
        <member name="T:Remotion.Reflection.AssemblyFinder">
            <summary>
            Use the <see cref="T:Remotion.Reflection.AssemblyFinder"/> class to find all (referenced) assemblies identified by a marker <see cref="T:System.Attribute"/>.
            </summary>
        </member>
        <member name="M:Remotion.Reflection.AssemblyFinder.#ctor(Remotion.Reflection.IAssemblyFinderFilter,System.Reflection.Assembly[])">
            <summary>
            Initializes a new instance of the  <see cref="T:Remotion.Reflection.AssemblyFinder"/> type with a predetermined set of <paramref name="rootAssemblies"/>.
            These assemblies are then used as startng points for looking up any referenced assembly matching the given <paramref name="filter"/>
            applied.
            </summary>
            <param name="filter">The <see cref="T:Remotion.Reflection.IAssemblyFinderFilter"/> used to filter the referenced assemblies.</param>
            <param name="rootAssemblies">The <see cref="T:System.Reflection.Assembly"/> array used as starting point for finding the referenced assemblies. All of these
            assemblies will be included in the result list, no matter whether they match the filter or not.</param>
        </member>
        <member name="M:Remotion.Reflection.AssemblyFinder.#ctor(Remotion.Reflection.IAssemblyFinderFilter,System.Boolean)">
            <summary>
            Initializes a new instance of the  <see cref="T:Remotion.Reflection.AssemblyFinder"/> type to look for assemblies within the current
            <see cref="T:System.AppDomain"/>'s <see cref="P:System.AppDomain.BaseDirectory"/> matching the <paramref name="filter"/>. These assemblies are then used as 
            startng points for looking up any referenced assembly also matching the <paramref name="filter"/>.
            </summary>
            <param name="filter">The <see cref="T:Remotion.Reflection.IAssemblyFinderFilter"/> used to filter the referenced assemblies.</param>
            <param name="considerDynamicDirectory">Specifies whether to search the <see cref="P:System.AppDomain.DynamicDirectory"/> as well as the base
            directory.</param>
        </member>
        <member name="M:Remotion.Reflection.AssemblyFinder.FindAssemblies">
            <summary>
            Returns the root assemblies as well as all directly or indirectly referenced assemblies matching the filter specified
            at construction time.
            </summary>
            <returns>An array of assemblies matching the <see cref="T:Remotion.Reflection.IAssemblyFinderFilter"/> specified at construction time.</returns>
        </member>
        <member name="M:Remotion.Reflection.AssemblyFinder.FindMockableAssemblies">
            <summary>
            Returns the root assemblies as well as all directly or indirectly referenced assemblies matching the filter specified
            at construction time.
            </summary>
            <returns>An array of assemblies matching the <see cref="T:Remotion.Reflection.IAssemblyFinderFilter"/> specified at construction time.</returns>
            <remarks>This method exists primarily for testing purposes.</remarks>
        </member>
        <member name="M:Remotion.Reflection.AssemblyFinder.GetRootAssemblies">
            <summary>
            Gets the array of root assembies identified by the constructor arguments or retrieved from the AppDomain's directory.
            </summary>
        </member>
        <member name="P:Remotion.Reflection.AssemblyFinder.BaseDirectory">
            <summary>
            Gets the base directory used for loading root assemblies.
            </summary>
            <value>The base directory.</value>
        </member>
        <member name="P:Remotion.Reflection.AssemblyFinder.RelativeSearchPath">
            <summary>
            Gets the semicolon-separated relative search path used for loading root assemblies.
            </summary>
            <value>The relative search path.</value>
        </member>
        <member name="P:Remotion.Reflection.AssemblyFinder.DynamicDirectory">
            <summary>
            Gets the dynamic directory used for loading root assemblies.
            </summary>
            <value>The dynamic directory.</value>
        </member>
        <member name="P:Remotion.Reflection.AssemblyFinder.ConsiderDynamicDirectory">
            <summary>
            Gets a value indicating whether the <see cref="P:Remotion.Reflection.AssemblyFinder.DynamicDirectory"/> is used for loading root assemblies.
            </summary>
            <value>true if the dynamic directory is used; otherwise, false.</value>
        </member>
        <member name="P:Remotion.Reflection.AssemblyFinder.Filter">
            <summary>
            Gets the <see cref="T:Remotion.Reflection.IAssemblyFinderFilter"/> passed during initialization.
            </summary>
        </member>
        <member name="P:Remotion.Reflection.AssemblyFinder.Loader">
            <summary>
            Gets or sets the <see cref="T:Remotion.Reflection.AssemblyLoader"/> used to load assemblies.
            </summary>
            <value>The loader used to load assemblies.</value>
        </member>
        <member name="T:Remotion.Mixins.Utilities.UncastableEnumerableWrapper`1">
            <summary>
            Wraps an enumerable object so that the wrapped object cannot be cast back to its original type.
            </summary>
            <typeparam name="T">The type returned by the wrapped enumerable object.</typeparam>
            <remarks>Use this class when returning an enumerable object from a method to prevent that the object can be cast to its original type.
            That way, it will be ensured that the returned object only supports the methods exposed by the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.</remarks>
        </member>
        <member name="T:Remotion.Configuration.ExtendedProviderBase">
            <summary>Base class for all providers.</summary>
            <remarks>
            <see cref="T:Remotion.Configuration.ExtendedProviderBase"/> changes the protocoll for initializing a configuration provider from using a default constructor
            followed by a call to <see cref="M:Remotion.Configuration.ExtendedProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"/> to initialize the provider during construction.
            </remarks>
        </member>
        <member name="M:Remotion.Configuration.ExtendedProviderBase.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>Initializes a new instance of the <see cref="T:Remotion.Configuration.ExtendedProviderBase"/>.</summary>
            <param name="name">The friendly name of the provider. Must not be <see langword="null"/> or empty.</param>
            <param name="config">
            A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.
            Must not be <see langword="null"/>.
            </param>
        </member>
        <member name="M:Remotion.Configuration.ExtendedProviderBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Configuration.ExtendedProviderBase"/> class in the process of deserialization.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> provided by the serialization engine.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> provided by the serialization engine.</param>
        </member>
        <member name="M:Remotion.Configuration.ExtendedProviderBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization.</param>
            <remarks>Override this method (and call the base implementation) to supply additional data for the serialization process.</remarks>
        </member>
        <member name="T:Remotion.Context.CallContextStorageProvider">
            <summary>
            Implements <see cref="T:Remotion.Context.ISafeContextStorageProvider"/> by storing data in the thread-local <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>.
            </summary>
        </member>
        <member name="T:Remotion.Collections.SimpleDataStore`2">
            <summary>
            Implements the <see cref="T:Remotion.Collections.IDataStore`2"/> interface as a simple, not thread-safe in-memory data store based on a 
            <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:Remotion.Collections.SimpleDataStore`2.ContainsKey(`0)">
            <summary>
            Determines whether the store contains an element with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>
            true if the store contains the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Collections.SimpleDataStore`2.Add(`0,`1)">
            <summary>
            Adds a new element to the store.
            </summary>
            <param name="key">The key of the new element.</param>
            <param name="value">The value of the new element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">An item with an equal key already exists in the store.</exception>
        </member>
        <member name="M:Remotion.Collections.SimpleDataStore`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the store, if any.
            </summary>
            <param name="key">The key of the element to be removed.</param>
            <returns>
            true if the item was found in the store; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Collections.SimpleDataStore`2.Clear">
            <summary>
            Removes all elements from the store.
            </summary>
        </member>
        <member name="M:Remotion.Collections.SimpleDataStore`2.GetValueOrDefault(`0)">
            <summary>
            Gets the value of the element with the specified key, or <typeparamref name="TValue"/>'s default value if no such element exists.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>
            The value of the element, or the default value if no such element exists.
            </returns>
        </member>
        <member name="M:Remotion.Collections.SimpleDataStore`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value of the element with the specified key.
            </summary>
            <param name="key">The key to look up.</param>
            <param name="value">The value of the element with the specified key, or <typeparamref name="TValue"/>'s default value if no such element
            exists.</param>
            <returns>
            true if an element with the specified key was found; otherwise, false.
            </returns>
        </member>
        <member name="M:Remotion.Collections.SimpleDataStore`2.GetOrCreateValue(`0,System.Func{`0,`1})">
            <summary>
            Gets the value of the element with the specified key, creating a new one if none exists.
            </summary>
            <param name="key">The key of the element to be retrieved.</param>
            <param name="creator">A delegate used for creating a new element if none exists.</param>
            <returns>
            The value of the element that was found or created.
            </returns>
        </member>
        <member name="P:Remotion.Collections.SimpleDataStore`2.Item(`0)">
            <summary>
            Gets or sets the <typeparamref name="TValue"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.ToTextSpecificTypeHandler`1">
            <summary>
            Convenience base class for defining externally registered ToText type handlers. For details see <see cref="T:Remotion.Diagnostics.ToText.To"/>-class description.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderFormattableHandler">
            <summary>
            Handles instances implementing the <see cref="T:System.IFormattable"/> interface in <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>'s <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToText(System.Object,Remotion.Diagnostics.ToText.IToTextBuilder)"/> fallback cascade.
            This handler takes care of all primitive data types and prevents them from being treated by the <see cref="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderAutomaticObjectToTextHandler"/> handler,
            which should always come after it.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.ConsoleApplication.ConsoleApplication`2">
            <summary>
            Console application class: Supplies command line parsing (including standard command line switches; 
            see <see cref="T:Remotion.Utilities.ConsoleApplication.ConsoleApplicationSettings"/>) and standardized error handling and output.
            </summary>
            <remarks>
            Standard command line switches: "/?" to show the usage information, "/wait+" to wait for a keypress at the end of program execution.
            </remarks>
            <example>
            <code>
            <![CDATA[
            public class Program 
            {
              public static int Main (string[] args)
              {
                var consoleApplication = new ConsoleApplication<AclExpanderApplication, AclExpanderApplicationSettings>();
                return consoleApplication.Main (args);
              }
            }
            ]]>
            </code>
            </example>
            <typeparam name="TApplication">The application implementation class. Supplied with an log- and error-output-stream
            by the <see cref="N:Remotion.Utilities.ConsoleApplication"/>.
            Needs to implement <see cref="T:Remotion.Utilities.ConsoleApplication.IApplicationRunner`1"/>.
            </typeparam>
            <typeparam name="TApplicationSettings">The settings for the <typeparamref name="TApplication"/>. 
            Needs to derive from <see cref="T:Remotion.Utilities.ConsoleApplication.ConsoleApplicationSettings"/>.
            </typeparam>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.IToTextConvertible">
             <summary>
             Implement <see cref="T:Remotion.Diagnostics.ToText.IToTextConvertible"/> on a class to supply <see cref="T:Remotion.Diagnostics.ToText.To"/>.<see cref="M:Remotion.Diagnostics.ToText.To.Text(System.Object)"/> / <see cref="T:Remotion.Diagnostics.ToText.ToTextBuilder"/> support
             for class instances. 
             </summary>
             <remarks>
             Note that an externally registered type handler (see <see cref="T:Remotion.Diagnostics.ToText.To"/>-class description)
             takes precedence over an <see cref="T:Remotion.Diagnostics.ToText.IToTextConvertible"/> implementation within a class.
             </remarks>
             
             <example><code><![CDATA[
             public class Foo : IToTextConvertible
             {
               protected string userName, firstName, lastName;
               protected int age;
            
               public void ToText (IToTextBuilder toTextBuilder)
               {
                 toTextBuilder.ib<Foo>();
                 toTextBuilder.e(() => userName).e("first", firstName).e("last", lastName).e(() => age);
                 toTextBuilder.ie();
               }
             }
             ]]></code></example>
        </member>
        <member name="T:Remotion.Reflection.InheritanceHierarchyFilter">
            <summary>
            The <see cref="T:Remotion.Reflection.InheritanceHierarchyFilter"/> can be used to get all leaf classes within a deifned set of types passed into the 
            constructor.
            </summary>
        </member>
        <member name="T:Remotion.Mixins.Validation.ValidationException">
            <summary>
            Thrown when there is an error in the mixin configuration which is detected during validation of the configuration. The problem prevents
            code being generated from the configuration. See also <see cref="T:Remotion.Mixins.ConfigurationException"/>.
            </summary>
        </member>
        <member name="M:Remotion.Mixins.Validation.ValidationException.#ctor(System.String,Remotion.Mixins.Validation.IValidationLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Mixins.Validation.ValidationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="log">The validation log.</param>
        </member>
        <member name="M:Remotion.Mixins.Validation.ValidationException.#ctor(Remotion.Mixins.Validation.IValidationLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Mixins.Validation.ValidationException"/> class and creates a descriptive message from the validation log.
            </summary>
            <param name="log">The validation log log.</param>
            <exception cref="T:System.ArgumentNullException">The log is empty.</exception>
        </member>
        <member name="M:Remotion.Mixins.Validation.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Mixins.Validation.ValidationException"/> class during deserialization.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Remotion.Mixins.Utilities.MixedObjectInstantiationScope">
            <summary>
            Allows users to specify configuration settings when a mixed type is instantiated.
            </summary>
            <remarks>
            <para>
            Usually, the mixin types configured in the <see cref="T:Remotion.Mixins.Context.ClassContext"/> of a target class are simply instantiated when the mixed
            instance is constructed. Using this scope class, a user can supply pre-instantiated mixins instead.
            </para>
            <para>
            This is mainly for internal purposes, users should use the <see cref="T:Remotion.Mixins.ObjectFactory"/>
            class to instantiate mixed types.
            </para>
            <para>
            This class is a singleton bound to the current <see cref="T:Remotion.Context.SafeContext"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Mixins.Utilities.MixedObjectInstantiationScope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Mixins.Utilities.MixedObjectInstantiationScope"/> class, setting it as the
            <see cref="P:Remotion.Mixins.Utilities.MixedObjectInstantiationScope.Current"/> scope object. The previous scope is restored when this scope's <see cref="M:Remotion.Mixins.Utilities.MixedObjectInstantiationScope.Dispose"/>
            method is called, e.g. from a <c>using</c> statement. The new scope will not contain any pre-created mixin instances.
            </summary>
        </member>
        <member name="M:Remotion.Mixins.Utilities.MixedObjectInstantiationScope.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Mixins.Utilities.MixedObjectInstantiationScope"/> class, setting it as the
            <see cref="P:Remotion.Mixins.Utilities.MixedObjectInstantiationScope.Current"/> scope object. The previous scope is restored when this scope's <see cref="M:Remotion.Mixins.Utilities.MixedObjectInstantiationScope.Dispose"/>
            method is called, e.g. from a <c>using</c> statement. The new scope contains the specified pre-created mixin instances.
            </summary>
            <param name="suppliedMixinInstances">The mixin instances to be used when a mixed type is instantiated from within the scope. The objects
            specified must fit the mixin types specified in the mixed type's configuration. Users can also specify instances for a subset of the mixin
            types, the remaining ones will be created on demand.</param>
        </member>
        <member name="M:Remotion.Mixins.Utilities.MixedObjectInstantiationScope.Dispose">
            <summary>
            When called for the first time, restores the <see cref="T:Remotion.Mixins.Utilities.MixedObjectInstantiationScope"/> that was in effect when this scope was created.
            </summary>
        </member>
        <member name="P:Remotion.Mixins.Utilities.MixedObjectInstantiationScope.SuppliedMixinInstances">
            <summary>
            The mixin instances to be used when a mixed class is instantiated from within the scope.
            </summary>
        </member>
        <member name="T:Remotion.Mixins.Context.DeclarativeConfigurationBuilder">
            <summary>
            Provides support for building mixin configuration data from the declarative mixin configuration attributes
            (<see cref="T:Remotion.Mixins.UsesAttribute"/>, <see cref="T:Remotion.Mixins.ExtendsAttribute"/>, <see cref="T:Remotion.Mixins.CompleteInterfaceAttribute"/>,
            and <see cref="T:Remotion.Mixins.IgnoreForMixinConfigurationAttribute"/>).
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Remotion.Mixins.Context.DeclarativeConfigurationBuilder.BuildConfigurationFromAssemblies(Remotion.Mixins.MixinConfiguration,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Builds a new <see cref="T:Remotion.Mixins.MixinConfiguration"/> from the declarative configuration information in the given assemblies.
            </summary>
            <param name="parentConfiguration">The parent configuration to derive the new configuration from (can be <see langword="null"/>).</param>
            <param name="assemblies">The assemblies to be scanned for declarative mixin information.</param>
            <returns>An mixin configuration inheriting from <paramref name="parentConfiguration"/> and incorporating the configuration information
            held by the given assemblies.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblies"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Mixins.Context.DeclarativeConfigurationBuilder.BuildConfigurationFromAssemblies(Remotion.Mixins.MixinConfiguration,System.Reflection.Assembly[])">
            <summary>
            Builds a new <see cref="T:Remotion.Mixins.MixinConfiguration"/> from the declarative configuration information in the given assemblies.
            </summary>
            <param name="parentConfiguration">The parent configuration to derive the new configuration from (can be <see langword="null"/>).</param>
            <param name="assemblies">The assemblies to be scanned for declarative mixin information.</param>
            <returns>A mixin configuration inheriting from <paramref name="parentConfiguration"/> and incorporating the configuration information
            held by the given assemblies.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblies"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Mixins.Context.DeclarativeConfigurationBuilder.BuildConfigurationFromAssemblies(System.Reflection.Assembly[])">
            <summary>
            Builds a new <see cref="T:Remotion.Mixins.MixinConfiguration"/> from the declarative configuration information in the given assemblies without inheriting
            from a parent configuration.
            </summary>
            <param name="assemblies">The assemblies to be scanned for declarative mixin information.</param>
            <returns>A mixin configuration incorporating the configuration information held by the given assemblies.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblies"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Mixins.Context.DeclarativeConfigurationBuilder.BuildConfigurationFromClasses(Remotion.Mixins.MixinConfiguration,Remotion.Mixins.Context.ClassContext[])">
            <summary>
            Builds a new <see cref="T:Remotion.Mixins.MixinConfiguration"/> containing the given class contexts (replacing conflicting inherited ones, if any).
            </summary>
            <param name="parentConfiguration">The parent configuration to derive the new configuration from (can be <see langword="null"/>).</param>
            <param name="classContexts">The class contexts to be contained in the new mixin configuration.</param>
            <returns>A mixin configuration inheriting from <paramref name="parentConfiguration"/> and incorporating the given class contexts.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.DeclarativeConfigurationBuilder.BuildConfigurationFromTypes(Remotion.Mixins.MixinConfiguration,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Builds a new <see cref="T:Remotion.Mixins.MixinConfiguration"/> from the declarative configuration information in the given types.
            </summary>
            <param name="parentConfiguration">The parent configuration to derive the new configuration from (can be <see langword="null"/>).</param>
            <param name="types">The types to be scanned for declarative mixin information.</param>
            <returns>A mixin configuration inheriting from <paramref name="parentConfiguration"/> and incorporating the configuration information
            held by the given types.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="types"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Mixins.Context.DeclarativeConfigurationBuilder.BuildDefaultConfiguration">
            <summary>
            Builds the default application configuration by analyzing all assemblies in the application bin directory and their (directly or indirectly)
            referenced assemblies for mixin configuration information. System assemblies are not scanned.
            </summary>
            <returns>A mixin configuration holding the default mixin configuration information for this application.</returns>
            <remarks>This method uses the <see cref="T:Remotion.Reflection.ContextAwareTypeDiscoveryUtility"/> to discover the types to be used in the mixin configuration.
            In design mode, this will use the types returned by the designer, but in ordinary application scenarios, the following steps are performed:
            <list type="number">
            <item>Retrieve all types assemblies from the current <see cref="T:System.AppDomain">AppDomain's</see> bin directory.</item>
            <item>Analyze each of them that is included by the <see cref="T:Remotion.Reflection.ApplicationAssemblyFinderFilter"/> for mixin configuration information.</item>
            <item>Load the referenced assemblies of those assemblies if they aren't excluded by the <see cref="T:Remotion.Reflection.ApplicationAssemblyFinderFilter"/>.</item>
            <item>If the loaded assemblies haven't already been analyzed, treat them according to steps 2-4.</item>
            </list>
            </remarks>
            <seealso cref="T:Remotion.Reflection.ContextAwareTypeDiscoveryUtility"/>
        </member>
        <member name="M:Remotion.Mixins.Context.DeclarativeConfigurationBuilder.#ctor(Remotion.Mixins.MixinConfiguration)">
            <summary>
            Initializes a new <see cref="T:Remotion.Mixins.Context.DeclarativeConfigurationBuilder"/>, which can be used to collect assemblies and types with declarative
            mixin configuration attributes in order to build an <see cref="T:Remotion.Mixins.MixinConfiguration"/>.
            </summary>
            <param name="parentConfiguration">The parent configuration used when this instance builds a new <see cref="T:Remotion.Mixins.MixinConfiguration"/>.</param>
        </member>
        <member name="M:Remotion.Mixins.Context.DeclarativeConfigurationBuilder.AddAssembly(System.Reflection.Assembly)">
            <summary>
            Scans the given assembly for declarative mixin configuration information and stores the information for a later call to <see cref="M:Remotion.Mixins.Context.DeclarativeConfigurationBuilder.BuildConfiguration"/>.
            The mixin configuration information of types marked with the <see cref="T:Remotion.Mixins.IgnoreForMixinConfigurationAttribute"/> will be ignored.
            </summary>
            <param name="assembly">The assembly to be scanned.</param>
            <returns>A reference to this <see cref="T:Remotion.Mixins.Context.DeclarativeConfigurationBuilder"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assembly"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Mixins.Context.DeclarativeConfigurationBuilder.AddType(System.Type)">
            <summary>
            Scans the given type for declarative mixin configuration information and stores the information for a later call to <see cref="M:Remotion.Mixins.Context.DeclarativeConfigurationBuilder.BuildConfiguration"/>.
            The type will be scanned whether or not is is marked with the <see cref="T:Remotion.Mixins.IgnoreForMixinConfigurationAttribute"/>.
            </summary>
            <param name="type">The type to be scanned. This must be a non-generic type or a generic type definition. Closed generic types are not
            supported to be scanned.</param>
            <returns>A reference to this <see cref="T:Remotion.Mixins.Context.DeclarativeConfigurationBuilder"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The given type is a closed generic type and not a generic type definition.</exception>
        </member>
        <member name="M:Remotion.Mixins.Context.DeclarativeConfigurationBuilder.BuildConfiguration">
            <summary>
            Analyzes the information added so far to this builder and creates a new <see cref="T:Remotion.Mixins.MixinConfiguration"/> from that data.
            </summary>
            <returns>An <see cref="T:Remotion.Mixins.MixinConfiguration"/> derived from the configuration specified in the builder's constructor containing
            <see cref="T:Remotion.Mixins.Context.ClassContext"/> and <see cref="T:Remotion.Mixins.Context.MixinContext"/> objects based on the information added so far.</returns>
        </member>
        <member name="T:Remotion.Configuration.ProviderCollection`1">
            <summary>Represents a collection of provider objects that inherit from <typeparamref name="T"/>.</summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="M:Remotion.Configuration.ProviderCollection`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Remotion.Configuration.ProviderCollection`1"/> class.</summary>
        </member>
        <member name="M:Remotion.Configuration.ProviderCollection`1.Add(`0)">
            <summary>Adds a provider to the collection.</summary>
            <param name="provider">The provider to be added.</param>
            <exception cref="T:System.ArgumentException">
            The <see cref="P:System.Configuration.Provider.ProviderBase.Name"/> of <paramref name="provider"/> is <see langword="null"/>.<para>- or -</para>
            The length of the <see cref="P:System.Configuration.Provider.ProviderBase.Name"/> of <paramref name="provider"/> is less than 1.
            </exception>
            <exception cref="T:Remotion.Utilities.ArgumentTypeException">The <paramref name="provider"/> is not derived from <see cref="T:System.Configuration.Provider.ProviderBase"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="M:Remotion.Configuration.ProviderCollection`1.Add(System.Configuration.Provider.ProviderBase)">
            <summary>Adds a provider to the collection.</summary>
            <param name="provider">The provider to be added.</param>
            <exception cref="T:System.ArgumentException">
            The <see cref="P:System.Configuration.Provider.ProviderBase.Name"/> of <paramref name="provider"/> is <see langword="null"/>.<para>- or -</para>
            The length of the <see cref="P:System.Configuration.Provider.ProviderBase.Name"/> of <paramref name="provider"/> is less than 1.<para>- or -</para>
            </exception>
            <exception cref="T:Remotion.Utilities.ArgumentTypeException">The <paramref name="provider"/> is not assignable to <typeparamref name="T"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="P:Remotion.Configuration.ProviderCollection`1.Item(System.String)">
            <summary>Gets the provider with the specified name.</summary>
            <param name="name">The key by which the provider is identified.</param>
            <returns>The provider with the specified name.</returns>
        </member>
        <member name="T:Remotion.Configuration.ConfigurationWrapperFromConfigurationObject">
            <summary>
            Concrete implementation of <see cref="T:Remotion.Configuration.ConfigurationWrapper"/> that uses an instance of the <see cref="T:System.Configuration.Configuration"/>
            type. Create the instance by invoking <see cref="M:Remotion.Configuration.ConfigurationWrapper.CreateFromConfigurationObject(System.Configuration.Configuration)"/>.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.ToTextSpecificInterfaceHandler`1">
            <summary>
            Convenience base class for defining externally registered ToText interface type handlers. For details see <see cref="T:Remotion.Diagnostics.ToText.To"/>-class description.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextSpecificHandlerCollector">
            <summary>
            Finds <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/> type handlers that supply <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToText(System.Object,Remotion.Diagnostics.ToText.IToTextBuilder)"/> functionality for
            a specific type through reflection and registers them with a <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>.
            Type handlers are classes which derive directly from <see cref="T:Remotion.Diagnostics.ToText.ToTextSpecificTypeHandler`1"/> and carry the 
            <see cref="T:Remotion.Diagnostics.ToText.ToTextSpecificHandlerAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderSettings">
            <summary>
            Settings class for the <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/> class.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.ToTextSpecificHandlerAttribute">
            <summary>
            Attribute that qualifies a class as an externally registered ToText type handler. For details see <see cref="T:Remotion.Diagnostics.ToText.To"/>-class description.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderRegisteredInterfaceHandlerHandler">
            <summary>
            Handles instances implementing a registered interface in <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>'s <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToText(System.Object,Remotion.Diagnostics.ToText.IToTextBuilder)"/> fallback cascade.
            The interface handler with the highest priority will be used used.
            Interface handlers are registered through calling <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.RegisterSpecificInterfaceHandlerWithHighestPriority``1(System.Action{``0,Remotion.Diagnostics.ToText.IToTextBuilder})"/> and 
            <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.RegisterSpecificInterfaceHandlerWithLowestPriority``1(System.Action{``0,Remotion.Diagnostics.ToText.IToTextBuilder})"/> respectively.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextParameters">
            <summary>
            Parameter class used to pass the instance to convert, type of the instance and <see cref="P:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextParameters.ToTextBuilder"/> to <see cref="M:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderHandler.ToTextIfTypeMatches(Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextParameters,Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderHandlerFeedback)"/>.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.DisableableXmlWriter">
            <summary>
            Wrapper around <see cref="T:System.Xml.XmlWriter"/> class which supports enabling/disabling of its <see cref="M:Remotion.Diagnostics.ToText.Infrastructure.DisableableXmlWriter.WriteStartElement(System.String)"/>,etc methods
            through its <see cref="P:Remotion.Diagnostics.ToText.Infrastructure.DisableableXmlWriter.Enabled"/> property.
            </summary>
        </member>
        <member name="T:Remotion.Collections.CompoundValueEqualityComparer`1">
            <summary>
            <para>Class supplying automatic consistent <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.Equals(`0,`0)"/>, <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.Equals(`0,System.Object)"/> and <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.GetHashCode(`0)"/> 
            implementation for instances of its generic type parameter, using a <see cref="T:System.Func`2"/> which returns
            the instance members which shall participate in the equality/hash code calculation.
            </para>
            <para>
            Note: The implementation incurs the performance overhead of the creation of the <see cref="T:System.Object"/>-arrays every time
            <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.Equals(`0,`0)"/> and <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.GetHashCode(`0)"/> get called. Be aware of this when using in performance critical code.
            </para>
            </summary>
            <typeparam name="T">Type for which <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.Equals(`0,`0)"/>, <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.Equals(`0,System.Object)"/> and <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.GetHashCode(`0)"/> are supplied.</typeparam>
        </member>
        <member name="M:Remotion.Collections.CompoundValueEqualityComparer`1.#ctor(System.Func{`0,System.Object[]})">
            <summary>
            Ctor which takes the <see cref="T:System.Func`2"/> which must return an <see cref="T:System.Object"/>-array
            of the members which shall participate in the equality/hash code calculation.
            </summary>
            <param name="relevantValueProvider"></param>
        </member>
        <member name="M:Remotion.Collections.CompoundValueEqualityComparer`1.Equals(`0,System.Object)">
            <summary>
            Standard conforming <see cref="M:System.Object.Equals(System.Object)"/> implementation comparing <typeparamref name="T"/> with an <see cref="T:System.Object"/>,
            using <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.Equals(`0,`0)"/>
            </summary>
        </member>
        <member name="M:Remotion.Collections.CompoundValueEqualityComparer`1.Equals(`0,`0)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/> implementation comparing all <see cref="T:System.Object"/>|s in the array returned by the <see cref="T:System.Func`2"/>.
            </summary>
        </member>
        <member name="M:Remotion.Collections.CompoundValueEqualityComparer`1.GetHashCode(`0)">
            <summary>
            <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.GetHashCode(`0)"/> implementation using all the <see cref="T:System.Object"/>|s in the array returned by the <see cref="T:System.Func`2"/>.
            </summary>
            <remarks>
            Returned hash code uses the <see cref="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode(System.Object[])"/> method.
            </remarks>
        </member>
        <member name="M:Remotion.Collections.CompoundValueEqualityComparer`1.GetEqualityParticipatingObjects(`0)">
            <summary>
            Returns the <see cref="T:System.Object"/>-array of the objects participating in the equality/hash code calculation for the passed instance.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.EnumUtility">
            <summary>
            This utility class provides methods for dealing with enumeration values.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.EnumUtility.IsValidEnumValue(System.Object)">
            <summary>
            Checks whether the specified value is one of the values that the enumeration type defines.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.EnumUtility.IsValidEnumValue(System.Type,System.Object)">
            <summary>
            Checks whether the specified <paramref name="value"/> is one of the values that the <paramref name="enumType"/> defines.
            </summary>
            <remarks>This method corresponds to <see cref="T:System.Enum"/>.<see cref="M:System.Enum.IsDefined(System.Type,System.Object)"/> but can also handls flag-enums.</remarks>
            <exception cref="T:System.ArgumentException">
              <para><paramref name="enumType"/> is not an <see cref="T:System.Enum"/>.</para>
              -or- 
              <para>The type of <paramref name="value"/> is not an <paramref name="enumType"/>.</para>
              -or-
              <para>The type of <paramref name="value"/> is not an underlying type of <paramref name="enumType"/>.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              value is not type <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, 
              <see cref="T:System.Byte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.UInt64"/>.
            </exception>
        </member>
        <member name="M:Remotion.Utilities.NullableTypeUtility.IsNullableType(System.Type)">
            <summary>
            Determines whether a type is nullable, ie. whether variables of it can be assigned <see langword="null"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            true if <paramref name="type"/> is nullable; otherwise, false.
            </returns>
            <remarks>
            A type is nullable if it is a reference type or a nullable value type. This method returns false only for non-nullable value types.
            </remarks>
        </member>
        <member name="T:Remotion.Utilities.ConsoleUtility">
            <summary>
            Provides utility methods for managing consoles.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.ConsoleUtility.EnterColorScope(System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            Temporarily sets the foreground and background of the default console to the given <paramref name="foregroundColor"/> and
            <paramref name="backgroundColor"/>. The previous colors are restored when the returned object's <see cref="M:System.IDisposable.Dispose"/> method is 
            called, eg. in a <c>using</c> statement.
            </summary>
            <param name="foregroundColor">The color to temporarily assign as the console's foreground color. Pass <see langword="null"/> to leave the 
            foreground color untouched.</param>
            <param name="backgroundColor">The color to temporarily assign as the console's background color. Pass <see langword="null"/> to leave the 
            background color untouched.</param>
            <returns>A <see cref="T:System.IDisposable"/> object representing the scope for which the new colors stays valid.</returns>
        </member>
        <member name="T:Remotion.Utilities.ConsoleUtility.ColorScope">
            <summary>
            Represents a scope with a specific console color. Instantiate this scope via <see cref="M:Remotion.Utilities.ConsoleUtility.EnterColorScope(System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})"/> unless
            you need to specify a specific <see cref="T:Remotion.Utilities.IConsoleManager"/> implementation.
            </summary>
        </member>
        <member name="T:Remotion.Mixins.MixinTypeUtility">
            <summary>
            Provides a central point for reflectively working with mixin targets and generated concrete types.
            </summary>
        </member>
        <member name="M:Remotion.Mixins.MixinTypeUtility.IsGeneratedConcreteMixedType(System.Type)">
            <summary>
            Determines whether the given <paramref name="type"/> is a concrete, mixed type generated by the mixin infrastructure.
            </summary>
            <param name="type">The type to be checked.</param>
            <returns>
            True if <paramref name="type"/> or one of its base types was generated by the mixin infrastructure as a concrete, mixed type; otherwise, false.
            </returns>
        </member>
        <member name="M:Remotion.Mixins.MixinTypeUtility.IsGeneratedByMixinEngine(System.Type)">
            <summary>
            Determines whether the given <paramref name="type"/> was generated by the mixin infrastructure.
            </summary>
            <param name="type">The type to be checked.</param>
            <returns>
            True if <paramref name="type"/> or one of its base types was generated by the mixin infrastructure. It might be a concrete, mixed type,
            a derived mixin type, or any other type needed by the mixin infrastructure.
            </returns>
        </member>
        <member name="M:Remotion.Mixins.MixinTypeUtility.GetConcreteMixedType(System.Type)">
            <summary>
            Gets the concrete type for a given <paramref name="baseType"/> which contains all mixins currently configured for the type.
            </summary>
            <param name="baseType">The base type for which to retrieve a concrete type.</param>
            <returns>The <paramref name="baseType"/> itself if there are no mixins configured for the type or if the type itself is a generated type;
            otherwise, a generated type containing all the mixins currently configured for <paramref name="baseType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.MixinTypeUtility.GetUnderlyingTargetType(System.Type)">
            <summary>
            Gets the underlying target type for a given <paramref name="type"/>.
            </summary>
            <param name="type">The type to get the underlying target type for.</param>
            <returns>The <paramref name="type"/> itself if it is not a generated type; otherwise, the type that was used as a target type when the
            given <paramref name="type"/> was generated.</returns>
        </member>
        <member name="M:Remotion.Mixins.MixinTypeUtility.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether the given <paramref name="typeToAssign"/> would be assignable to <paramref name="baseOrInterface"/> after all mixins
            currently configured for the type have been taken into account.
            </summary>
            <param name="baseOrInterface">The base or interface to assign to.</param>
            <param name="typeToAssign">The type to check for assignment compatibility to <paramref name="baseOrInterface"/>.</param>
            <returns>
            True if the type returned by <see cref="M:Remotion.Mixins.MixinTypeUtility.GetConcreteMixedType(System.Type)"/> for <paramref name="typeToAssign"/> is the same as, derived from, or an
            implementation of <paramref name="baseOrInterface"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Remotion.Mixins.MixinTypeUtility.HasMixins(System.Type)">
            <summary>
            Determines whether the specified <paramref name="type"/> is associated with any mixins.
            </summary>
            <param name="type">The type to check for mixins.</param>
            <returns>
            True if the specified type is a generated type containing any mixins or a base type for which there are mixins currently configured;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Remotion.Mixins.MixinTypeUtility.HasMixin(System.Type,System.Type)">
            <summary>
            Determines whether the specified <paramref name="typeToCheck"/> is associated with a mixin of the given <paramref name="mixinType"/>.
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <param name="mixinType">The mixin type to check for.</param>
            <returns>
            True if the specified type is a generated type containing a mixin of the given <paramref name="mixinType"/> or a base type currently
            configured with such a mixin; otherwise, false.
            </returns>
            <remarks>This method checks for the exact mixin type, it does not take assignability or generic type instantiations into account. If the
            check should be broadened to include these properties, <see cref="M:Remotion.Mixins.MixinTypeUtility.GetAscribableMixinType(System.Type,System.Type)"/> should be used.</remarks>
        </member>
        <member name="M:Remotion.Mixins.MixinTypeUtility.GetAscribableMixinType(System.Type,System.Type)">
            <summary>
            Determines whether the specified <paramref name="typeToCheck"/> is associated with a mixin that can be ascribed to the given
            <paramref name="mixinType"/> and returns the respective mixin type.
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <param name="mixinType">The mixin type to check for.</param>
            <returns>
            The exact mixin type if the specified type is a generated type containing a mixin that can be ascribed to <paramref name="mixinType"/> or a
            base type currently configured with such a mixin; otherwise <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Remotion.Mixins.MixinTypeUtility.HasAscribableMixin(System.Type,System.Type)">
            <summary>
            Determines whether the specified <paramref name="typeToCheck"/> is associated with a mixin that can be ascribed to the given
            <paramref name="mixinType"/>.
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <param name="mixinType">The mixin type to check for.</param>
            <returns>
            True, if the specified type is a generated type containing a mixin that can be ascribed to <paramref name="mixinType"/> or a
            base type currently configured with such a mixin; otherwise false.
            </returns>
        </member>
        <member name="M:Remotion.Mixins.MixinTypeUtility.GetMixinTypes(System.Type)">
            <summary>
            Gets the mixin types associated with the given <paramref name="type"/>.
            </summary>
            <param name="type">The type to check for mixin types.</param>
            <returns>The mixins included in <paramref name="type"/> if it is a generated type; otherwise the mixins currently configured for
            <paramref name="type"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.MixinTypeUtility.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates an instance of the type returned by <see cref="M:Remotion.Mixins.MixinTypeUtility.GetConcreteMixedType(System.Type)"/> for the given <paramref name="type"/>.
            </summary>
            <param name="type">The type for whose concrete type to create an instance.</param>
            <param name="args">The arguments to be passed to the constructor.</param>
            <returns>An instance of the type returned by <see cref="M:Remotion.Mixins.MixinTypeUtility.GetConcreteMixedType(System.Type)"/> for <paramref name="type"/> created via a constructor taking the
            specified <paramref name="args"/>.</returns>
        </member>
        <member name="T:Remotion.Collections.Set`1">
            <summary>
            Implements a set collection data type.
            </summary>
            <typeparam name="T">The type of items to be stored by this collection.</typeparam>
            <remarks>
            	<para>
            A <see cref="T:Remotion.Collections.Set`1"/> is an unordered collection of items, where each item added is held exactly once. When an item is added more than once
            (determined by the given <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> or the default comparer <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>), the set
            will automatically ignore the second add operation.
            </para>
            	<para>
            The <see cref="T:Remotion.Collections.Set`1"/> data type is internally based on a <see cref="T:System.Collections.Generic.Dictionary`2"/>, so checking whether a set contains an item is
            very fast, but depends on the quality of the hashing algorithm used for <typeparamref name="T"/>.
            </para>
            <para>This collection type does not support items being <see langword="null"/>, is not automatically safe for multi-threading, and cannot be
            set to be read-only.</para>
            </remarks>
        </member>
        <member name="M:Remotion.Collections.Set`1.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:Remotion.Collections.Set`1"/> class.
            </summary>
        </member>
        <member name="M:Remotion.Collections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Collections.Set`1"/> class, adding a range of initial items.
            </summary>
            <param name="initialItems">The initial items to be held by the set. If this contains duplicates, they will be filtered out while being
            added to the set.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="initialItems"/> parameter is <see langword="null"/> or contains a
            <see langword="null"/> reference.</exception>
        </member>
        <member name="M:Remotion.Collections.Set`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Collections.Set`1"/> class, adding a range of initial items.
            </summary>
            <param name="initialItems">The initial items to be held by the set. If this contains duplicates, they will be filtered out while being
            added to the set.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="initialItems"/> parameter is <see langword="null"/> or contains a
            <see langword="null"/> reference.</exception>
        </member>
        <member name="M:Remotion.Collections.Set`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new empty instance of the <see cref="T:Remotion.Collections.Set`1"/> class with a given <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <param name="equalityComparer">The comparer to be used to determine whether two items are equal to each other.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="equalityComparer"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Collections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Collections.Set`1"/> class, adding a range of initial items.
            </summary>
            <param name="initialItems">The initial items to be held by the set. If this contains duplicates, they will be filtered out in the adding
            process.</param>
            <param name="equalityComparer">The comparer to be used to determine whether two items are equal to each other.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="initialItems"/> parameter is <see langword="null"/> or contains a
            <see langword="null"/> reference, or the <paramref name="equalityComparer"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Collections.Set`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the set.
            </summary>
            <param name="items">The items to be added to the set. If this contains duplicates, they will be filtered out in the adding
            process.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="items"/> parameter is <see langword="null"/> or contains a
            <see langword="null"/> reference.</exception>
        </member>
        <member name="M:Remotion.Collections.Set`1.Add(`0)">
            <summary>
            Adds an item to the set.
            </summary>
            <param name="item">The item to add to the set. If the set already contains this item, the operation is ignored.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="item"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Collections.Set`1.Clear">
            <summary>
            Removes all items from the set.
            </summary>
        </member>
        <member name="M:Remotion.Collections.Set`1.Contains(`0)">
            <summary>
            Determines whether the set contains a specific value.
            </summary>
            <param name="item">The object to locate in the set.</param>
            <returns>
            True if item is found in the set; otherwise, false.
            </returns>
        </member>
        <member name="M:Remotion.Collections.Set`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the set to an <see cref="T:System.Array"/> starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from
            the set. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><para><paramref name="array"/> is multidimensional.</para>
            <para>-or-</para>
            <para><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</para>
            <para>-or-</para>
            <para>The number of elements in the set is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination
            array.</para>
            </exception>
            <remarks>The elements are copied to the <see cref="T:System.Array"/> in the same order in which the enumerator iterates through the
            set.</remarks>
        </member>
        <member name="M:Remotion.Collections.Set`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Remotion.Collections.Set`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied.
            The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional. -or- index is equal to or greater than the length of array. -or-
             The number of elements in the <see cref="T:Remotion.Collections.Set`1"/> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the <see cref="T:Remotion.Collections.Set`1"/> elements cannot be cast automatically to the type of the
             destination array. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Remotion.Collections.Set`1.ToArray">
            <summary>
            Returns an array holding the items currently stored in the set.
            </summary>
            <returns>An array holding the same items as the set</returns>
            <remarks>The elements are copied to the <see cref="T:System.Array"/> in the same order in which the enumerator iterates through the
            set.</remarks>
        </member>
        <member name="M:Remotion.Collections.Set`1.Remove(`0)">
            <summary>
            Removes the given item from the set, if it is contained.
            </summary>
            <param name="item">The object to remove from the set.</param>
            <returns>
            True if the set contained the item; otherwise, false.
            </returns>
        </member>
        <member name="M:Remotion.Collections.Set`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <remarks>The order in which items are returned by the enumerator is undefined and may change between consecutive calls of
            <see cref="M:Remotion.Collections.Set`1.GetEnumerator"/> if items are added or removed between the calls.</remarks>
        </member>
        <member name="M:Remotion.Collections.Set`1.GetAny">
            <summary>
            Returns an arbitrary element contained in the set without removing it.
            </summary>
            <returns>An arbitrary element contained in the set.</returns>
            <exception cref="T:System.InvalidOperationException">The set is empty.</exception>
        </member>
        <member name="P:Remotion.Collections.Set`1.Count">
            <summary>
            Gets the number of elements contained in the set.
            </summary>
            <returns>The number of elements contained in the set.</returns>
        </member>
        <member name="P:Remotion.Collections.Set`1.System#Collections#ICollection#SyncRoot">
            <summary>
            This method is not supported and always throws an exception.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Remotion.Collections.Set`1"/> collection type does not support SyncRoots.</exception>
        </member>
        <member name="P:Remotion.Collections.Set`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread safe). This always returns false.
            </summary>
            <returns>
            Always false.
            </returns>
        </member>
        <member name="T:Remotion.Reflection.Properties`1">
             <summary>
             Allows the creation of the property of a class independent of a concrete class instance,
             in the form of an <see cref="T:Remotion.Reflection.Property`2"/> object.
             </summary>
             <remarks>
             The resulting <see cref="T:Remotion.Reflection.Property`2"/> can then e.g. be passed to
             a method which can use it to access the property of arbitrary class instances.
             </remarks>
             <example>
             <code>
             <![CDATA[
             void PropertyTest (ObjectID tenantId)
             {
               User[] users = User.FindByTenantID (tenantId).ToArray ();
               IsUserPropertyNull (users, Properties<User>.Get (x => x.UserName));
               IsUserPropertyNull (users, Properties<User>.Get (x => x.OwningGroup));
               IsUserPropertyNull (users, Properties<User>.Get (x => x.Tenant));
             }
            
             bool IsUserPropertyNull<T> (User[] users, Property<User, T> userProperty) where T : class
             {
               foreach (var user in users)
               {
                 var propertyValue = userProperty.Get (user);
                 if (propertyValue == null)
                 {
                   return true;
                 }
               }
               return false;
             }   
             ]]>
             </code>
             </example>
             <typeparam name="T">The class for which we want to create the <see cref="T:Remotion.Reflection.Property`2"/> object.</typeparam>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderHandler.ToTextProviderEnumHandler">
            <summary>
            Handles <see cref="T:System.Enum"/>s in <see cref="T:Remotion.Diagnostics.ToText.ToTextProvider"/>'s <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToText(Remotion.Diagnostics.ToText.IToTextBuilder)"/> fallback cascade.
            </summary>
        </member>
        <member name="T:Remotion.Collections.EnumerableExtensions">
            <summary>
            Provides a set of <see langword="static"/> methods for querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Remotion.Collections.EnumerableExtensions.First``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1})">
            <summary>
            Returns the first element of a sequence
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TException">Type type of the exception returned by <paramref name="createEmptySequenceException"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of. Must not be <see langword="null"/>.</param>
            <param name="createEmptySequenceException">
            This callback is invoked if the sequence is empty. The returned exception is then thrown to indicate this error. Must not be <see langword="null"/>.
            </param>
            <returns>The first element in the specified sequence.</returns>
        </member>
        <member name="M:Remotion.Collections.EnumerableExtensions.First``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``1})">
            <summary>
            Returns the first element in a sequence that satisfies a specified condition.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TException">Type type of the exception returned by <paramref name="createNoMatchingElementException"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element of. Must not be <see langword="null"/>.</param>
            <param name="predicate">A function to test each element for a condition. Must not be <see langword="null"/>.</param>
            <param name="createNoMatchingElementException">
            This callback is invoked if the sequence is empty or no element satisfies the condition in <paramref name="predicate"/>. 
            The returned exception is then thrown to indicate this error. Must not be <see langword="null"/>.
            </param>
            <returns>The first element in the sequence that passes the test in the specified predicate function.</returns>
        </member>
        <member name="M:Remotion.Collections.EnumerableExtensions.Single``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1})">
            <summary>
            Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TException">Type type of the exception returned by <paramref name="createEmptySequenceException"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the single element of. Must not be <see langword="null"/>.</param>
            <param name="createEmptySequenceException">
            This callback is invoked if the sequence is empty. 
            The returned exception is then thrown to indicate this error. Must not be <see langword="null"/>.
            </param>
            <returns>The single element in the specified sequence.</returns>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException The specified sequence contains more than one element.</exception>
        </member>
        <member name="M:Remotion.Collections.EnumerableExtensions.Single``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``1})">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TException">Type type of the exception returned by <paramref name="createNoMatchingElementException"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element of. Must not be <see langword="null"/>.</param>
            <param name="predicate">A function to test each element for a condition. Must not be <see langword="null"/>.</param>
            <param name="createNoMatchingElementException">
            This callback is invoked if the sequence is empty or no element satisfies the condition in <paramref name="predicate"/>. 
            The returned exception is then thrown to indicate this error. Must not be <see langword="null"/>.
            </param>
            <returns>The single element in the specified sequence.</returns>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException The specified sequence contains more than one element.</exception>
        </member>
        <member name="M:Remotion.Collections.EnumerableExtensions.CreateSequence``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})">
            <summary>
            Generates a sequence of elements from the <paramref name="source"/> element by applying the specified next-element function, 
            adding elements to the sequence while the current element satisfies the specified condition.
            </summary>
            <typeparam name="TSource">The type of the <paramref name="source"/> element.</typeparam>
            <param name="source">The object to be transformed into a sequence.</param>
            <param name="nextElementSelector">A function to retrieve the next element in the sequence. Must not be <see langword="null" />.</param>
            <param name="predicate">A function to test each element for a condition. Must not be <see langword="null" />.</param>
            <returns>
            A collection of elements containing the <paramref name="source"/> and all subsequent elements where each element satisfies a specified condition.
            </returns>
        </member>
        <member name="M:Remotion.Collections.EnumerableExtensions.CreateSequence``1(``0,System.Func{``0,``0})">
            <summary>
            Generates a sequence of elements from the <paramref name="source"/> element by applying the specified next-element function, 
            adding elements to the sequence while the current element is not <see langword="null" />.
            </summary>
            <typeparam name="TSource">The type of the <paramref name="source"/> element.</typeparam>
            <param name="source">The object to be transformed into a sequence.</param>
            <param name="nextElementSelector">A function to retrieve the next element in the sequence. Must not be <see langword="null" />.</param>
            <returns>
            A sequence of elements containing the <paramref name="source"/> and all subsequent elements where each element satisfies a specified condition.
            </returns>
        </member>
        <member name="M:Remotion.Collections.EnumerableExtensions.ToEnumerable``1(``0)">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <paramref name="source"/> element.
            </summary>
            <typeparam name="TSource">The type of the <paramref name="source"/> element.</typeparam>
            <param name="source">The object to be added to the sequence. </param>
            <returns>A sequence of elments containing only the <paramref name="source"/> element.</returns>
        </member>
        <member name="T:Remotion.Collections.ComponentwiseEqualsAndHashcodeWrapper`1">
            <summary>
            Wrapper around an <see cref="T:System.Collections.Generic.IEnumerable`1"/> which supplies element-wise <see cref="M:System.Object.Equals(System.Object)"/> and
            <see cref="M:System.Object.GetHashCode"/> semantics. Use in conjunction with <see cref="T:Remotion.Collections.CompoundValueEqualityComparer`1"/>
            to get value based semantics for container class members.
            </summary>
            <typeparam name="TElement"></typeparam>
        </member>
        <member name="M:Remotion.Collections.ComponentwiseEqualsAndHashcodeWrapper`1.Equals(System.Object)">
            <summary>
            Compares the elements of the <see cref="T:Remotion.Collections.ComponentwiseEqualsAndHashcodeWrapper`1"/> for equality, if the passed <see cref="T:System.Object"/> 
            is an <see cref="T:Remotion.Collections.ComponentwiseEqualsAndHashcodeWrapper`1"/> .
            </summary>
        </member>
        <member name="M:Remotion.Collections.ComponentwiseEqualsAndHashcodeWrapper`1.GetHashCode">
            <summary>
            Returns a hash code based on the members of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="T:Remotion.Collections.ComponentwiseEqualsAndHashcodeWrapper">
            <summary>
            ComponentwiseEqualsAndHashcodeWrapper-factory: ComponentwiseEqualsAndHashcodeWrapper.New(<see cref="T:System.Collections.Generic.IEnumerable`1"/>).
            </summary>
        </member>
        <member name="T:Remotion.Utilities.EnumDescriptionAttribute">
            <summary>
            Use this attribute to specify a clear text representation of a certain enumeration value.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.EnumDescription">
            <summary>
            Use this class to get the clear text representations of enumeration values.
            </summary>
        </member>
        <member name="F:Remotion.Utilities.EnumDescription.s_typeDescriptions">
            <summary> IDictionary&lt;Type, IDictionary&lt;System.Enum, string&gt;&gt; </summary>
            <remarks> This is for enums with the EnumDescriptionAttribute on values. </remarks>
        </member>
        <member name="F:Remotion.Utilities.EnumDescription.s_enumResourceManagers">
            <summary> IDictionary&lt;string resourceKey, ResourceManager&gt; </summary>
            <remarks> This is for enums with the EnumDescriptionResourceAttribute. </remarks>
        </member>
        <member name="M:Remotion.Utilities.EnumDescription.CreateDesciptionsDictionary(System.Type)">
            <returns>IDictionary&lt;System.Enum, string&gt;</returns>
        </member>
        <member name="P:Remotion.Text.CommandLine.CommandLineGroupArgument.Parts">
            <summary> IList&lt;CommandLineArgument&gt;</summary>
        </member>
        <member name="T:Remotion.Text.CommandLine.ICommandLinePartArgument">
            <summary>
            Implemented by argument types that are part of a <see cref="T:Remotion.Text.CommandLine.CommandLineGroupArgument"/>.
            </summary>
        </member>
        <member name="F:Remotion.Text.CommandLine.CommandLineModeArgument._flags">
            <summary> ArrayList&lt;CommandLineModeFlagArgument&gt;</summary>
        </member>
        <member name="T:Remotion.Text.CommandLine.CommandLineModeFlagArgument">
            <summary>
            Several flag arguments are used for one mode argument group. E.g. /mode1 or /mode2 are two flags that specify either of two modes.
            </summary>
        </member>
        <member name="T:Remotion.Globalization.ResourceManagerWrapper">
            <summary>
              A wrapper for the .net Framework <c>ResourceManager</c> implementation.
            </summary>
            <remarks>
              <para>
                Limited to accessing string resources.
                Limited on resources for the current UI culture and its less specific cultures.
              </para><para>
                If multiple Resource Managers are added which belonging to derived types, 
                make sure to sort the resource managers in the order of inheritance before wrapping them.
              </para>
            </remarks>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerWrapper.#ctor(System.Resources.ResourceManager)">
            <summary>
              Constructor for wrapping multiple resource managers
            </summary>
            <param name="resourceManager">
      The <c>ResourceManager</c> to be wrapped.
      Must not be <see langname="null"/>.
    </param>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerWrapper.GetAllStrings">
            <summary>
              Returns all string resources inside the wrapped resource managers.
            </summary>
            <returns>
              A collection of string pairs, the key being the resource's ID, the vale being the string.
            </returns>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerWrapper.GetAllStrings(System.String)">
            <summary>
              Searches for all string resources inside the resource manager whose name is prefixed 
              with a matching tag.
            </summary>
            <seealso cref="M:Remotion.Globalization.IResourceManager.GetAllStrings(System.String)"/>
            <remarks>
      <para>
        If a duplicate ID is found, the ID from the last ResourceManager wins.
      </para><para>
        Fallback:
        <list type="number">
          <item>
            Resource hierarchy for current culture.
          </item>
          <item>
            Resource hierarchies for less specific cultures
          </item>
        </list>
      </para>
    </remarks>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerWrapper.GetString(System.Enum)">
            <summary>
              Gets the value of the specified string resource. 
            </summary>
            <seealso cref="M:Remotion.Globalization.IResourceManager.GetString(System.Enum)"/>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerWrapper.GetString(System.String)">
            <summary>
              Gets the value of the specified string resource. 
            </summary>
            <seealso cref="M:Remotion.Globalization.IResourceManager.GetString(System.String)"/>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerWrapper.ContainsResource(System.String)">
            <summary>Tests whether the <see cref="T:Remotion.Globalization.ResourceManagerWrapper"/> contains the specified resource.</summary>
            <param name="id">The ID of the resource to look for.</param>
            <returns><see langword="true"/> if the <see cref="T:Remotion.Globalization.ResourceManagerWrapper"/> contains the specified resource.</returns>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerWrapper.ContainsResource(System.Enum)">
            <summary>Tests whether the <see cref="T:Remotion.Globalization.ResourceManagerWrapper"/> contains the specified resource.</summary>
            <param name="enumValue">The ID of the resource to look for.</param>
            <returns><see langword="true"/> if the <see cref="T:Remotion.Globalization.ResourceManagerWrapper"/> contains the specified resource.</returns>
        </member>
        <member name="M:Remotion.Globalization.ResourceManagerWrapper.GetCultureHierarchy(System.Globalization.CultureInfo)">
            <summary>
              Returns the culture hierarchy, starting with the most specialized culture.
            </summary>
            <param name="mostSpecialized">
              The starting point for walking the culture tree upwards. Must not be <see langame="null"/>.
            </param>
            <returns>
              The cultures, starting with the invariant culture, ending with the most specialized culture.
            </returns>
        </member>
        <member name="P:Remotion.Globalization.ResourceManagerWrapper.ResourceManager">
            <summary>
              Gets the wrapped <c>ResourceManager</c> instance. 
            </summary>
        </member>
        <member name="P:Remotion.Globalization.ResourceManagerWrapper.Remotion#Globalization#IResourceManager#Name">
            <summary>
              Gets the root names of the resource files that the <c>IResourceManager</c>
              searches for resources. Multiple roots are separated by a comma.
            </summary>
        </member>
        <member name="M:Remotion.Globalization.ResourceIdentifiersAttribute.#ctor(System.Boolean)">
            <summary> Initializes a new instance. </summary>
            <param name="suppressTypeName"> If true, the name of the enum type is not included in the resource identifier. Default is true. </param>
        </member>
        <member name="M:Remotion.Globalization.ResourceIdentifiersAttribute.#ctor">
            <summary> Initializes a new instance. </summary>
        </member>
        <member name="T:Remotion.Globalization.ResourceException">
            <summary>
              Represents errors that occur during resource handling.
            </summary>
        </member>
        <member name="M:Remotion.Globalization.ResourceException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Remotion.Globalization.ResourceException"/>  class with a specified 
              error message.
            </summary>
            <param name="message"> The error message string. </param>
        </member>
        <member name="M:Remotion.Globalization.ResourceException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:Remotion.Globalization.ResourceException"/> class with a specified 
              error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message"> The error message string. </param>
            <param name="innerException"> The inner exception reference. </param>
        </member>
        <member name="M:Remotion.Globalization.ResourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Initializes a new instance of the <see cref="T:Remotion.Globalization.ResourceException"/> class with serialized 
              data.
            </summary>
            <param name="info"> The info parameter is a <see langword="null"/>.</param>
            <param name="context">
            The class name is a <see langword="null"/> or <see cref="P:System.Exception.HResult"/> is zero (0).
            </param>
        </member>
        <member name="T:Remotion.Globalization.MultiLingualResourcesAttribute">
            <summary>
              Attribute for specifying the resource container for a type.
            </summary>
            <remarks>
            use the <see cref="T:Remotion.Globalization.MultiLingualResources"/> class to analyze instances of this attribute and to retrieve <see cref="T:System.Resources.ResourceManager"/>
            objects for them, eg. when implementing <see cref="T:Remotion.Globalization.IObjectWithResources"/>.
            </remarks>
        </member>
        <member name="P:Remotion.Globalization.IResourcesAttribute.BaseName">
            <summary>
              Gets the base name of the resource container as specified by the attributes construction.
            </summary>
            <remarks>
            The base name of the resource conantainer to be used by this type
            (&lt;assembly&gt;.&lt;path inside project&gt;.&lt;resource file name without extension&gt;).
            </remarks>
        </member>
        <member name="F:Remotion.Globalization.MultiLingualResourcesAttribute._baseName">
            <summary> The base name of the resource container </summary>
        </member>
        <member name="M:Remotion.Globalization.MultiLingualResourcesAttribute.#ctor(System.String)">
            <summary> Initalizes an instance. </summary>
        </member>
        <member name="P:Remotion.Globalization.MultiLingualResourcesAttribute.BaseName">
            <summary>
              Gets the base name of the resource container as specified by the attributes construction.
            </summary>
            <remarks>
            The base name of the resource conantainer to be used by this type
            (&lt;assembly&gt;.&lt;path inside project&gt;.&lt;resource file name without extension&gt;).
            </remarks>
        </member>
        <member name="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder">
            <summary>
            Assists <see cref="T:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder"/> by providing a fluent interface for building <see cref="T:Remotion.Mixins.Context.ClassContext"/> objects.
            </summary>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.Clear">
            <summary>
            Clears all mixin configuration for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>. This causes the target type to ignore all mixin configuration data from its
            parent context and also resets all information collected so far for the class by this object.
            </summary>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.AddMixin(System.Type)">
            <summary>
            Collects the given type as a mixin for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.
            </summary>
            <param name="mixinType">The mixin type to collect.</param>
            <returns>A <see cref="T:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder"/> object for further configuration of the mixin.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.AddMixin``1">
            <summary>
            Collects the given type as a mixin for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.
            </summary>
            <typeparam name="TMixin">The mixin type to collect.</typeparam>
            <returns>A <see cref="T:Remotion.Mixins.Context.FluentBuilders.MixinContextBuilder"/> object for further configuration of the mixin.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.AddMixins(System.Type[])">
            <summary>
            Collects the given types as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.
            </summary>
            <param name="mixinTypes">The mixin types to collect.</param>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.AddMixins``2">
            <summary>
            Collects the given types as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.
            </summary>
            <typeparam name="TMixin1">The first mixin type to collect.</typeparam>
            <typeparam name="TMixin2">The second mixin type to collect.</typeparam>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.AddMixins``3">
            <summary>
            Collects the given types as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.
            </summary>
            <typeparam name="TMixin1">The first mixin type to collect.</typeparam>
            <typeparam name="TMixin2">The second mixin type to collect.</typeparam>
            <typeparam name="TMixin3">The third mixin type to collect.</typeparam>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.EnsureMixin(System.Type)">
            <summary>
            Ensures that the given type is configured as a mixin for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>, adding it if necessary. The mixin will not be
            added if it has been taken over from the parent context (unless <see cref="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.Clear"/> was called); if added, it will override corresponding
            mixins inherited from a base type.
            </summary>
            <param name="mixinType">The mixin type to collect.</param>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.EnsureMixin``1">
            <summary>
            Ensures that the given type is configured as a mixin for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>, adding it if necessary. The mixin will not be
            added if it has been taken over from the parent context (unless <see cref="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.Clear"/> was called); if added, it will override corresponding
            mixins inherited from a base type.
            </summary>
            <typeparam name="TMixin">The mixin type to collect.</typeparam>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.EnsureMixins(System.Type[])">
            <summary>
            Ensures that the given types are configured as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>, adding them if necessary. The mixins will not be
            added if they has been taken over from the parent context (unless <see cref="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.Clear"/> was called); if added, they will override corresponding
            mixins inherited from a base type.
            </summary>
            <param name="mixinTypes">The mixin types to collect.</param>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.EnsureMixins``2">
            <summary>
            Ensures that the given types are configured as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>, adding them if necessary. The mixins will not be
            added if they has been taken over from the parent context (unless <see cref="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.Clear"/> was called); if added, they will override corresponding
            mixins inherited from a base type.
            </summary>
            <typeparam name="TMixin1">The first mixin type to collect.</typeparam>
            <typeparam name="TMixin2">The second mixin type to collect.</typeparam>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.EnsureMixins``3">
            <summary>
            Ensures that the given types are configured as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>, adding them if necessary. The mixins will not be
            added if they has been taken over from the parent context (unless <see cref="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.Clear"/> was called); if added, they will override corresponding
            mixins inherited from a base type.
            </summary>
            <typeparam name="TMixin1">The first mixin type to collect.</typeparam>
            <typeparam name="TMixin2">The second mixin type to collect.</typeparam>
            <typeparam name="TMixin3">The third mixin type to collect.</typeparam>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.AddOrderedMixins(System.Type[])">
            <summary>
            Collects the given types as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/> and adds dependencies between the mixins to ensure a proper base call
            order.
            </summary>
            <param name="mixinTypes">The mixin types to collect with dependencies.</param>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.AddOrderedMixins``2">
            <summary>
            Collects the given types as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/> and adds dependencies between the mixins to ensure a proper base call
            order.
            </summary>
            <typeparam name="TMixin1">The first mixin type to collect with dependencies.</typeparam>
            <typeparam name="TMixin2">The first mixin type to collect with dependencies.</typeparam>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.AddOrderedMixins``3">
            <summary>
            Collects the given types as mixins for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/> and adds dependencies between the mixins to ensure a proper base call
            order.
            </summary>
            <typeparam name="TMixin1">The first mixin type to collect with dependencies.</typeparam>
            <typeparam name="TMixin2">The first mixin type to collect with dependencies.</typeparam>
            <typeparam name="TMixin3">The first mixin type to collect with dependencies.</typeparam>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.AddCompleteInterface(System.Type)">
            <summary>
            Adds the given type as a complete interface to the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>. A complete interface can contain both members defined by the
            target class itself and by mixins applied to the class, making it easier to invoke methods and properties on a mixed object without casting.
            </summary>
            <param name="interfaceType">The type to collect as a complete interface.</param>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.AddCompleteInterface``1">
            <summary>
            Adds the given type as a complete interface to the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>. A complete interface can contain both members defined by the
            target class itself and by mixins applied to the class, making it easier to invoke methods and properties on a mixed object without casting.
            </summary>
            <typeparam name="TInterface">The type to collect as a complete interface.</typeparam>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.AddCompleteInterfaces(System.Type[])">
            <summary>
            Adds the given types as complete interfaces to the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>. A complete interface can contain both members defined by the
            target class itself and by mixins applied to the class, making it easier to invoke methods and properties on a mixed object without casting.
            </summary>
            <param name="interfaceTypes">The types to collect as complete interfaces.</param>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.AddCompleteInterfaces``2">
            <summary>
            Adds the given types as complete interfaces to the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>. A complete interface can contain both members defined by the
            target class itself and by mixins applied to the class, making it easier to invoke methods and properties on a mixed object without casting.
            </summary>
            <typeparam name="TInterface1">The types to collect as complete interfaces.</typeparam>
            <typeparam name="TInterface2">The types to collect as complete interfaces.</typeparam>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.AddCompleteInterfaces``3">
            <summary>
            Adds the given types as complete interfaces to the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>. A complete interface can contain both members defined by the
            target class itself and by mixins applied to the class, making it easier to invoke methods and properties on a mixed object without casting.
            </summary>
            <typeparam name="TInterface1">The types to collect as complete interfaces.</typeparam>
            <typeparam name="TInterface2">The types to collect as complete interfaces.</typeparam>
            <typeparam name="TInterface3">The types to collect as complete interfaces.</typeparam>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.SuppressMixin(System.Type)">
            <summary>
            Denotes that a specific mixin type, and all mixin types that can be ascribed to it (see <see cref="M:Remotion.Utilities.ReflectionUtility.CanAscribe(System.Type,System.Type)"/>), should be
            ignored in the context of this class. Suppression is helpful when a target class should take over most of its mixins from the
            parent context or inherit mixins from another type, but a specific mixin should be ignored in that process.
            </summary>
            <param name="mixinType">The mixin type, base type, or generic type definition denoting mixin types to be suppressed.</param>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.SuppressMixin``1">
            <summary>
            Denotes that a specific mixin type, and all mixin types that can be ascribed to it (see <see cref="M:Remotion.Utilities.ReflectionUtility.CanAscribe(System.Type,System.Type)"/>), should be
            ignored in the context of this class. Suppression is helpful when a target class should take over most of its mixins from the
            parent context or inherit mixins from another type, but a specific mixin should be ignored in that process.
            </summary>
            <typeparam name="TMixinType">The mixin type, base type, or generic type definition denoting mixin types to be suppressed.</typeparam>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.SuppressMixins(System.Type[])">
            <summary>
            Denotes that a number of mixin types, and all mixin types that can be ascribed to it (see <see cref="M:Remotion.Utilities.ReflectionUtility.CanAscribe(System.Type,System.Type)"/>), should be
            ignored in the context of this class. Suppression is helpful when a target class should take over most of its mixins from the
            parent context or inherit mixins from another type, but a specific mixin should be ignored in that process.
            </summary>
            <param name="mixinTypes">The mixin types, base types, or generic type definitions denoting mixin types to be suppressed.</param>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.SuppressMixins``2">
            <summary>
            Denotes that a number of mixin types, and all mixin types that can be ascribed to it (see <see cref="M:Remotion.Utilities.ReflectionUtility.CanAscribe(System.Type,System.Type)"/>), should be
            ignored in the context of this class. Suppression is helpful when a target class should take over most of its mixins from the
            parent context or inherit mixins from another type, but a specific mixin should be ignored in that process.
            </summary>
            <typeparam name="TMixinType1">The first mixin type, base type, or generic type definition denoting mixin types to be suppressed.</typeparam>
            <typeparam name="TMixinType2">The second mixin type, base type, or generic type definition denoting mixin types to be suppressed.</typeparam>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.SuppressMixins``3">
            <summary>
            Denotes that a number of mixin types, and all mixin types that can be ascribed to it (see <see cref="M:Remotion.Utilities.ReflectionUtility.CanAscribe(System.Type,System.Type)"/>), should be
            ignored in the context of this class. Suppression is helpful when a target class should take over most of its mixins from the
            parent context or inherit mixins from another type, but a specific mixin should be ignored in that process.
            </summary>
            <typeparam name="TMixinType1">The first mixin type, base type, or generic type definition denoting mixin types to be suppressed.</typeparam>
            <typeparam name="TMixinType2">The second mixin type, base type, or generic type definition denoting mixin types to be suppressed.</typeparam>
            <typeparam name="TMixinType3">The third mixin type, base type, or generic type definition denoting mixin types to be suppressed.</typeparam>
            <returns>This object for further configuration of the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.BuildClassContext(System.Collections.Generic.IEnumerable{Remotion.Mixins.Context.ClassContext})">
            <summary>
            Builds a class context with the data collected so far for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/> that inherits from other contexts.
            </summary>
            <param name="inheritedContexts">A collection of <see cref="T:Remotion.Mixins.Context.ClassContext"/> instances the newly built context should inherit mixin data from.</param>
            <returns>A <see cref="T:Remotion.Mixins.Context.ClassContext"/> for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/> holding all mixin configuration data collected so far.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.BuildClassContext">
            <summary>
            Builds a class context with the data collected so far for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/> without inheriting from other contexts.
            </summary>
            <returns>A <see cref="T:Remotion.Mixins.Context.ClassContext"/> for the <see cref="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType"/> holding all mixin configuration data collected so far.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.ForClass(System.Type)">
            <summary>
            Begins configuration of another target class.
            </summary>
            <param name="targetType">The class to be configured.</param>
            <returns>A fluent interface object for configuring the given <paramref name="targetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.ForClass``1">
            <summary>
            Begins configuration of another target class.
            </summary>
            <typeparam name="TTargetType">The class to be configured.</typeparam>
            <returns>A fluent interface object for configuring the given <typeparamref name="TTargetType"/>.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.BuildConfiguration">
            <summary>
            Builds a configuration object with the data gathered so far.
            </summary>
            <returns>A new <see cref="T:Remotion.Mixins.MixinConfiguration"/> instance incorporating all the data acquired so far.</returns>
        </member>
        <member name="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.EnterScope">
            <summary>
            Builds a configuration object and calls the <see cref="M:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.EnterScope"/> method on it, thus activating the configuration for the current
            thread. The previous configuration is restored when the returned object's <see cref="M:System.IDisposable.Dispose"/> method is called (e.g. by a
            using statement).
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> object for restoring the original configuration.</returns>
        </member>
        <member name="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.Parent">
            <summary>
            Gets the <see cref="T:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder"/> used for creating this <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/>.
            </summary>
            <value>This object's <see cref="T:Remotion.Mixins.Context.FluentBuilders.MixinConfigurationBuilder"/>.</value>
        </member>
        <member name="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.TargetType">
            <summary>
            Gets the type configured by this <see cref="T:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder"/>.
            </summary>
            <value>The target type configured by this object.</value>
        </member>
        <member name="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.MixinContextBuilders">
            <summary>
            Gets the mixin context builders collected so far.
            </summary>
            <value>The mixin context builders collected so far by this object.</value>
        </member>
        <member name="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.CompleteInterfaces">
            <summary>
            Gets the complete interfaces collected so far.
            </summary>
            <value>The complete interfaces collected so far by this object.</value>
        </member>
        <member name="P:Remotion.Mixins.Context.FluentBuilders.ClassContextBuilder.SuppressedMixins">
            <summary>
            Gets the suppressed mixins collected so far.
            </summary>
            <value>The suppressed mixins collected so far by this object.</value>
        </member>
        <member name="T:Remotion.Globalization.MultiLingualResources">
            <summary>
            Provides the public API for classes working with and analyzing instances of <see cref="T:Remotion.Globalization.MultiLingualResourcesAttribute"/>.
            </summary>
        </member>
        <member name="M:Remotion.Globalization.MultiLingualResources.GetResourceManager(System.Type,System.Boolean)">
            <summary>
              Returns an instance of <c>IResourceManager</c> for the resource container specified
              in the class declaration of the type.
            </summary>
            <remarks>
        ResourceManagerWrappers are cached after their first initalization.
      </remarks><returns>
        The <c>ResourceManagerWrapper</c> containing the type's resource containers.
      </returns>
            <param name="objectType">
      The type for which the resource manager is wanted.
    </param><param name="includeHierarchy">
      Include the resource managers for the base types.
    </param>
        </member>
        <member name="M:Remotion.Globalization.MultiLingualResources.GetResourceManager(System.Type)">
            <summary>
              Returns an instance of <c>IResourceManager</c> for the resource container specified
              in the class declaration of the type.
            </summary>
            <remarks>
        ResourceManagerWrappers are cached after their first initalization.
      </remarks><returns>
        The <c>ResourceManagerWrapper</c> containing the type's resource containers.
      </returns>
            <param name="objectType">
      The type for which the resource manager is wanted.
    </param>
        </member>
        <member name="M:Remotion.Globalization.MultiLingualResources.GetResourceText(System.Type,System.String)">
            <summary>
              Loads a string resource for the specified type, identified by ID.
            </summary>
            <param name="objectTypeToGetResourceFor">
              The <see cref="T:System.Type"/> for which to get the resource.
            </param>
            <param name="name"> The ID of the resource. </param>
            <returns> The found string resource or an empty string. </returns>
        </member>
        <member name="M:Remotion.Globalization.MultiLingualResources.GetResourceText(System.Object,System.String)">
            <summary>
              Loads a string resource for the object's type, identified by ID.
            </summary>
            <param name="objectToGetResourceFor">
              The object for whose <see cref="T:System.Type"/> to get the resource.
            </param>
            <param name="name"> The ID of the resource. </param>
            <returns> The found string resource or an empty string. </returns>
        </member>
        <member name="M:Remotion.Globalization.MultiLingualResources.ExistsResourceText(System.Type,System.String)">
            <summary>
              Checks for the existence of a string resource for the specified type, identified by ID.
            </summary>
            <param name="objectTypeToGetResourceFor">
              The <see cref="T:System.Type"/> for which to check the resource.
            </param>
            <param name="name"> The ID of the resource. </param>
            <returns> <see langword="true"/> if the resource can be found. </returns>
        </member>
        <member name="M:Remotion.Globalization.MultiLingualResources.ExistsResourceText(System.Object,System.String)">
            <summary>
              Checks for the existence of a string resource for the specified type, identified by ID.
            </summary>
            <param name="objectToGetResourceFor">
              The object for whose <see cref="T:System.Type"/> to check the resource.
            </param>
            <param name="name"> The ID of the resource. </param>
            <returns> <see langword="true"/> if the resource can be found. </returns>
        </member>
        <member name="M:Remotion.Globalization.MultiLingualResources.ExistsResource(System.Type)">
            <summary>
              Checks for the existence of a resource set for the specified type.
            </summary>
            <param name="objectTypeToGetResourceFor">
              The <see cref="T:System.Type"/> for which to check for the resource set.
            </param>
            <returns> <see langword="true"/> if the resource ser can be found. </returns>
        </member>
        <member name="M:Remotion.Globalization.MultiLingualResources.ExistsResource(System.Object)">
            <summary>
              Checks for the existence of a resource set for the specified object.
            </summary>
            <param name="objectToGetResourceFor">
              The object for whose <see cref="T:System.Type"/> to check for the resource set.
            </param>
            <returns> <see langword="true"/> if the resource ser can be found. </returns>
        </member>
        <member name="P:Remotion.Globalization.MultiLingualResources.Resolver">
            <summary>
            Gets the resolver object used by the methods of this class.
            </summary>
            <value>The resolver object used by <see cref="T:Remotion.Globalization.MultiLingualResources"/>.</value>
        </member>
        <member name="T:Remotion.Configuration.ProviderHelperBase">
            <summary>Abstract base class for <see cref="T:Remotion.Configuration.ProviderHelperBase`1"/>.</summary>
        </member>
        <member name="M:Remotion.Configuration.ProviderHelperBase.InitializeProperties(System.Configuration.ConfigurationPropertyCollection)">
            <summary>Initializes properties and adds them to the given <see cref="T:System.Configuration.ConfigurationPropertyCollection"/>.</summary>
        </member>
        <member name="T:Remotion.Configuration.ProviderHelperBase`1">
            <summary>Base for helper classes that load specific providers from the <see cref="T:System.Configuration.ConfigurationSection"/> section.</summary>
            <remarks>
              <see cref="T:Remotion.Configuration.ProviderHelperBase`1"/> is designed to work with providers deriving from <see cref="T:Remotion.Configuration.ExtendedProviderBase"/> and
              having a constructor with the following signature: <c>public ctor (<see cref="T:System.String"/>, <see cref="T:System.Collections.Specialized.NameValueCollection"/>)</c>.
            </remarks>
        </member>
        <member name="M:Remotion.Configuration.ProviderHelperBase`1.#ctor(Remotion.Configuration.ExtendedConfigurationSection)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Configuration.ProviderHelperBase`1"/> class. 
            </summary>
            <param name="configurationSection">
            The <see cref="T:System.Configuration.ConfigurationSection"/> holding the <see cref="P:Remotion.Configuration.ProviderHelperBase`1.ProviderSettings"/> 
            loaded from the configuration section in the xml file
            </param>
        </member>
        <member name="M:Remotion.Configuration.ProviderHelperBase`1.InitializeProperties(System.Configuration.ConfigurationPropertyCollection)">
            <summary>Initializes properties and adds them to the given <see cref="T:System.Configuration.ConfigurationPropertyCollection"/>.</summary>
        </member>
        <member name="M:Remotion.Configuration.ProviderHelperBase`1.InstantiateProviders(System.Configuration.ProviderSettingsCollection,System.Configuration.Provider.ProviderCollection,System.Type,System.Type[])">
            <summary>Initializes a collection of providers of the given type using the supplied settings.</summary>
            <param name="providerSettingsCollection">A collection of settings to be passed to the provider upon initialization.</param>
            <param name="providerCollection">The collection used to contain the initialized providers after the method returns.</param>
            <param name="providerType">The <see cref="T:System.Type"/> of the providers to be initialized.</param>
            <param name="providerInterfaces">The list of interfaces each provider must implement.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="providerSettingsCollection"/> is null.<para>- or -</para>
            <paramref name="providerCollection"/> is null.<para>- or -</para>
            <paramref name="providerType"/> is null.
            </exception>
        </member>
        <member name="M:Remotion.Configuration.ProviderHelperBase`1.InstantiateProvider(System.Configuration.ProviderSettings,System.Type,System.Type[])">
            <summary>Initializes and returns a single provider of the given type using the supplied settings.</summary>
            <param name="providerSettings">The settings to be passed to the provider upon initialization.</param>
            <param name="providerType">The <see cref="T:System.Type"/> of the providers to be initialized.</param>
            <param name="providerInterfaces">The list of interfaces each provider must implement.</param>
            <returns>A new provider of the given type using the supplied settings.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="providerSettings"/> is null.<para>- or -</para>
            <paramref name="providerType"/> is null.
            </exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            The provider threw an exception while it was being initialized.<para>- or -</para>
            An error occurred while attempting to resolve a <see cref="T:System.Type"/> instance for the provider specified in <paramref name="providerSettings"/>.
            </exception>    
        </member>
        <member name="P:Remotion.Configuration.ProviderHelperBase`1.Provider">
            <summary>Get and set the provider.</summary>
        </member>
        <member name="T:Remotion.Utilities.TypeConversionProvider">
            <summary> 
              Provides functionality to get the <see cref="T:System.ComponentModel.TypeConverter"/> for a <see cref="T:System.Type"/> and to convert a value
              from a source <see cref="T:System.Type"/> into a destination <see cref="T:System.Type"/>.
            </summary>
            <remarks>
              <para>
                Use the <see cref="M:Remotion.Utilities.TypeConversionProvider.Create"/> method if you need to create a new instance of the
                <see cref="T:Remotion.Utilities.TypeConversionProvider"/> type.
              </para><para>
                Conversion is possible under the following conditions:
              </para>
              <list type="bullet">
                <item>
                  A type has a <see cref="T:System.ComponentModel.TypeConverter"/> applied through the <see cref="T:System.ComponentModel.TypeConverterAttribute"/> that
                  supports the conversion. 
                </item>
                <item>
                  For <see cref="T:System.Enum"/> types into the <see cref="T:System.String"/> value or the underlying numeric 
                  <see cref="T:System.Type"/>.
                </item>
                <item>
                  For types without a <see cref="T:System.ComponentModel.TypeConverter"/>, the <see cref="T:Remotion.Utilities.TypeConversionProvider"/> try to use the 
                  <see cref="T:Remotion.Utilities.BidirectionalStringConverter"/>. See the documentation of the string converter for details on the
                  supported types.
                </item>
              </list>
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.TypeConversionProvider.Create">
            <summary> Creates a new instace of the <see cref="T:Remotion.Utilities.TypeConversionProvider"/> type. </summary>
            <returns> An instance of the <see cref="T:Remotion.Utilities.TypeConversionProvider"/> type. </returns>
        </member>
        <member name="M:Remotion.Utilities.TypeConversionProvider.SetCurrent(Remotion.Utilities.TypeConversionProvider)">
            <summary> Sets the current <see cref="T:Remotion.Utilities.TypeConversionProvider"/>. </summary>
            <param name="provider"> A <see cref="T:Remotion.Utilities.TypeConversionProvider"/>. Must not be <see langword="null"/>. </param>
        </member>
        <member name="M:Remotion.Utilities.TypeConversionProvider.GetTypeConverter(System.Type,System.Type)">
            <summary> 
              Gets the <see cref="T:System.ComponentModel.TypeConverter"/> that is able to convert an instance of the <paramref name="sourceType"/> 
              <see cref="T:System.Type"/> into an instance of the <paramref name="destinationType"/> <see cref="T:System.Type"/>.
            </summary>
            <param name="sourceType"> 
              The source <see cref="T:System.Type"/> of the value. Must not be <see langword="null"/>. 
            </param>
            <param name="destinationType"> 
              The destination <see cref="T:System.Type"/> of the value. Must not be <see langword="null"/>. 
            </param>
            <returns> 
              A <see cref="T:Remotion.Utilities.TypeConverterResult"/> or or <see cref="F:Remotion.Utilities.TypeConverterResult.Empty"/>if no matching <see cref="T:System.ComponentModel.TypeConverter"/> can be found.
            </returns>
            <remarks> 
              You can identify whether you must use the <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)"/> or the 
              <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)"/> method by testing the returned <see cref="T:System.ComponentModel.TypeConverter"/>'s
              <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)"/> and <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)"/> methods.
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.TypeConversionProvider.GetTypeConverter(System.Type)">
            <summary> 
              Gets the <see cref="T:System.ComponentModel.TypeConverter"/> that is associated with the specified <paramref name="type"/>.
            </summary>
            <param name="type"> 
              The <see cref="T:System.Type"/> to get the <see cref="T:System.ComponentModel.TypeConverter"/> for. Must not be <see langword="null"/>.
            </param>
            <returns>
              A <see cref="T:System.ComponentModel.TypeConverter"/> or <see langword="null"/> of no <see cref="T:System.ComponentModel.TypeConverter"/> can be found.
            </returns>
        </member>
        <member name="M:Remotion.Utilities.TypeConversionProvider.AddTypeConverter(System.Type,System.ComponentModel.TypeConverter)">
            <summary> 
              Registers the <paramref name="converter"/> for the <paramref name="type"/>, overriding the default settings. 
            </summary>
            <param name="type"> 
              The <see cref="T:System.Type"/> for which the <paramref name="converter"/> should be used. 
              Must not be <see langword="null"/>.
            </param>
            <param name="converter"> The <see cref="T:System.ComponentModel.TypeConverter"/> to register. Must not be <see langword="null"/>. </param>
        </member>
        <member name="M:Remotion.Utilities.TypeConversionProvider.RemoveTypeConverter(System.Type)">
            <summary>
              Unregisters a special <see cref="T:System.ComponentModel.TypeConverter"/> previously registered by using <see cref="M:Remotion.Utilities.TypeConversionProvider.AddTypeConverter(System.Type,System.ComponentModel.TypeConverter)"/>.
            </summary>
            <param name="type">
              The <see cref="T:System.Type"/> whose special <see cref="T:System.ComponentModel.TypeConverter"/> should be removed. 
              Must not be <see langword="null"/>.
            </param>
            <remarks> If no <see cref="T:System.ComponentModel.TypeConverter"/> has been registered, the method has no effect. </remarks>
        </member>
        <member name="M:Remotion.Utilities.TypeConversionProvider.CanConvert(System.Type,System.Type)">
            <summary> 
              Test whether the <see cref="T:Remotion.Utilities.TypeConversionProvider"/> object can convert an object of <see cref="T:System.Type"/> 
              <paramref name="sourceType"/> into an object of <see cref="T:System.Type"/> <paramref name="destinationType"/>
              by using the <see cref="M:Remotion.Utilities.TypeConversionProvider.Convert(System.Type,System.Type,System.Object)"/> method.
            </summary>
            <param name="sourceType"> 
              The source <see cref="T:System.Type"/> of the value. Must not be <see langword="null"/>. 
            </param>
            <param name="destinationType"> 
              The destination <see cref="T:System.Type"/> of the value. Must not be <see langword="null"/>. 
            </param>
            <returns> <see langword="true"/> if a conversion is possible. </returns>
        </member>
        <member name="M:Remotion.Utilities.TypeConversionProvider.Convert(System.Type,System.Type,System.Object)">
            <summary> Convertes the <paramref name="value"/> into the <paramref name="destinationType"/>. </summary>
            <param name="sourceType"> 
              The source <see cref="T:System.Type"/> of the <paramref name="value"/>. Must not be <see langword="null"/>. 
            </param>
            <param name="destinationType"> 
              The destination <see cref="T:System.Type"/> of the <paramref name="value"/>. Must not be <see langword="null"/>. 
            </param>
            <param name="value"> The value to be converted. Must not be <see langword="null"/>. </param>
            <returns> An <see cref="T:System.Object"/> that represents the converted <paramref name="value"/>. </returns>
        </member>
        <member name="M:Remotion.Utilities.TypeConversionProvider.Convert(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Type,System.Type,System.Object)">
            <summary> Convertes the <paramref name="value"/> into the <paramref name="destinationType"/>. </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="culture"> The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param>
            <param name="sourceType"> 
              The source <see cref="T:System.Type"/> of the <paramref name="value"/>. Must not be <see langword="null"/>. 
            </param>
            <param name="destinationType"> 
              The destination <see cref="T:System.Type"/> of the <paramref name="value"/>. Must not be <see langword="null"/>. 
            </param>
            <param name="value"> The <see cref="T:System.Object"/> to be converted.</param>
            <returns> An <see cref="T:System.Object"/> that represents the converted <paramref name="value"/>. </returns>
        </member>
        <member name="P:Remotion.Utilities.TypeConversionProvider.Current">
            <summary> Gets the current <see cref="T:Remotion.Utilities.TypeConversionProvider"/>. </summary>
            <value> An instance of the <see cref="T:Remotion.Utilities.TypeConversionProvider"/> type. </value>
        </member>
        <member name="M:Remotion.Utilities.ReflectionUtility.CanAscribe(System.Type,System.Type)">
            <summary>
            Evaluates whether the <paramref name="type"/> can be ascribed to the <paramref name="ascribeeType"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check. Must not be <see langword="null"/>.</param>
            <param name="ascribeeType">The <see cref="T:System.Type"/> to check the <paramref name="type"/> against. Must not be <see langword="null"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="type"/> is not the <paramref name="ascribeeType"/> or its instantiation, 
            its subclass or the implementation of an interface in case the <paramref name="ascribeeType"/> is an interface..
            </returns>
        </member>
        <member name="M:Remotion.Utilities.ReflectionUtility.GetAscribedGenericArguments(System.Type,System.Type)">
            <summary>
            Returns the type arguments for the ascribed <paramref name="ascribeeType"/> as inherited or implemented by a given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to return the type parameter. Must not be <see langword="null"/>.</param>
            <param name="ascribeeType">The <see cref="T:System.Type"/> to check the <paramref name="type"/> against. Must not be <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Type"/> array containing the generic arguments of the <paramref name="ascribeeType"/> as it is inherited or implemented
            by <paramref name="type"/>.</returns>
            <exception cref="T:Remotion.Utilities.ArgumentTypeException">
            Thrown if the <paramref name="type"/> is not the <paramref name="ascribeeType"/> or its instantiation, its subclass or the implementation
            of an interface in case the <paramref name="ascribeeType"/> is an interface.
            </exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
            Thrown if the <paramref name="type"/> is an interface and implements the interface <paramref name="ascribeeType"/> or its instantiations
            more than once.
            </exception>
        </member>
        <member name="M:Remotion.Utilities.ReflectionUtility.GetOriginalDeclaringType(System.Reflection.PropertyInfo)">
            <summary>
            Returns the <see cref="T:System.Type"/> where the property was initially decelared.
            </summary>
            <param name="propertyInfo">The property whose identifier should be returned. Must not be <see langword="null"/>.</param>
            <returns>The <see cref="T:System.Type"/> where the property was declared for the first time.</returns>
        </member>
        <member name="M:Remotion.Utilities.ReflectionUtility.IsOriginalDeclaration(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the given <see cref="T:System.Reflection.PropertyInfo"/> is the original base declaration.
            </summary>
            <param name="propertyInfo">The property info to check.</param>
            <returns>
            	<see langword="true"/> if the <paramref name="propertyInfo"/> is the first declaration of the property; <see langword="false"/> if it is an 
            	overrride.
            </returns>
        </member>
        <member name="M:Remotion.Utilities.ReflectionUtility.GuessIsExplicitInterfaceProperty(System.Reflection.PropertyInfo)">
            <summary>
            Guesses whether the given property is an explicit interface implementation by checking whether it has got private virtual final accessors.
            This can be used as a heuristic to find explicit interface properties without having to check InterfaceMaps for every interface on
            info.DeclaringType. With C# and VB.NET, the heuristic should always be right.
            </summary>
            <param name="info">The property to check.</param>
            <returns>True, if the property is very likely an explicit interface implementation (at least in C# and VB.NET code); otherwise, false.</returns>
        </member>
        <member name="T:Remotion.Utilities.TypeConverterResult">
            <summary>
            The <see cref="T:Remotion.Utilities.TypeConverterResult"/> structure encapsulates the reult of the <see cref="M:Remotion.Utilities.TypeConversionProvider.GetTypeConverter(System.Type,System.Type)"/>
            method.
            </summary>
        </member>
        <member name="T:Remotion.Diagnostics.ToText.ToTextProvider">
            <summary>
            <para>Provides conversion of arbitray objects into human readable text form 
            using a fallback cascade starting with registered external object-to-text-conversion-handlers.</para>
            
            <para>To convert a single object into its text form, call <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.ToTextString(System.Object)"/></para> 
            
            <para>See <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.RegisterDefaultToTextProviderHandlers"/> for a description of the default ToText-handling-fallback-cascade.</para>
            </summary>
        </member>
        <member name="M:Remotion.Diagnostics.ToText.ToTextProvider.RegisterDefaultToTextProviderHandlers">
            <summary>
            Registers the default handlers for the conversion of arbitray objects into human readable text form. 
            Handlers form a fallback cascade starting with registered external object-to-text-conversion-handlers.
            
            The handlers are registered in the following order of precedence:
            <list type="number">
            <item>Handler for specific object type registered (see <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.RegisterSpecificTypeHandler``1(System.Action{``0,Remotion.Diagnostics.ToText.IToTextBuilder})"/>).</item>
            <item>Implements <see cref="T:Remotion.Diagnostics.ToText.IToTextConvertible"/> (i.e. object supplies <see cref="M:Remotion.Diagnostics.ToText.IToTextConvertible.ToText(Remotion.Diagnostics.ToText.IToTextBuilder)"/> method).</item>
            <item>Is a string or character (see <see cref="P:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderSettings.UseAutomaticCharEnclosing"/> and <see cref="P:Remotion.Diagnostics.ToText.Infrastructure.ToTextProviderSettings.UseAutomaticStringEnclosing"/> respectively).</item>
            <item>Implements IFormattable ("is a primitive"); Primitives (e.g. floating point numbers) are alway output formatted locale agnostic.</item>
            <item>Is a (rectangular) array (rectangular arrays have to be treated seperately since the IEnumerable handler would treat them as one-dimensional).</item>
            <item>Implements IEnumerable.</item>
            <item>Handler for a specific interface which the object implements is registered (see e.g. <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.RegisterSpecificInterfaceHandlerWithLowestPriority``1(System.Action{``0,Remotion.Diagnostics.ToText.IToTextBuilder})"/>).</item>
            <item>Handler for a base type of the specific object type registered (see <see cref="M:Remotion.Diagnostics.ToText.ToTextProvider.RegisterSpecificTypeHandler``1(System.Action{``0,Remotion.Diagnostics.ToText.IToTextBuilder})"/>).</item>
            <item>Log instance members through reflection.</item>
            <item>Use object's <see cref="M:System.Object.ToString"/> method.</item>
            </list>
            
            </summary>    
        </member>
        <member name="M:Remotion.Mixins.MixinConfigurationScope.System#IDisposable#Dispose">
            <summary>
            When called for the first time, restores the <see cref="T:Remotion.Mixins.MixinConfiguration"/> that was the <see cref="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration"/> for the current
            thread (<see cref="T:Remotion.Context.SafeContext"/>) before this object was constructed.
            </summary>
            <remarks>
            After this method has been called for the first time, further calls have no effects. If the <see cref="M:System.IDisposable.Dispose"/> method is not called, the
            original configuration will not be restored by this object.
            </remarks>
        </member>
        <member name="M:Remotion.Configuration.ConfigurationElementCollection`1.CreateNewElement">
            <summary>When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.</summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Remotion.Configuration.ConfigurationElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>Gets the element key for a specified configuration element when overridden in a derived class.</summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. </param>
            <returns>An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
    </members>
</doc>
